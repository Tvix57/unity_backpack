%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: war elements, vector infographic icons (s).eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Anton
%%CreationDate: 5/26/2016
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Military weapon guns (S)</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-05-26T14:15:50+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-26T14:15:50+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-05-26T14:15:50+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yqxn8xtZ1nRvKtxqelUWW2eN7iQqH4W4ceq/E9aL7HbDHmxmSBs8kH53661aanGaGhpAvUf7DLOA&#xA;OP4kk78hebta85eYZrA6/PF6Nu9w4t0RfsOicacQB/e+GCQAZQMpHm9E/wAKal/1MWo/fF/zRkbb&#xA;eA97v8Kal/1MWo/fF/zRja8B70mvtW8z+ULuOXU521jQJiFa44Ks0LE96dfp6+2GgWBJjz3DNLC/&#xA;s9QtI7uzlWe3lFUkU7H+hHcZBtBtXxSpyXVtHNFBJKiTz8vRiZgGfgKtxXqeI64qqYq7FXYq7FXY&#xA;q7FXYq8o/wCVi63/AMrh/wAPV/3Het9W9Ko409HlypxrXlv1yfDs08R4nq+QbnYq7FXYq8D13Xvz&#xA;jg1q/ii0/VprdbiUW8kEUvpmLmfT4+mnH7FMtFNB4rQP+Jfzm/6tWt/8irj/AJox9KPWi9M178+H&#xA;mZ7TTdS4KKSQ3Mca8q9CrXagbe2J4UjjT6LWP+chDGp/QZau9Wm01T9ILjfI+lPrZR5EvfzTuNSm&#xA;XzXp0dnp4iJjcyW7yGWooF+rswpSteX0YDXRnHi6s5yLN2KsE87fmNf6B5p0ry/Z6dHdzaqIxFLL&#xA;K0Sq8sxiUGiPtXvkhGwwlKjTIPW87f8ALJpv/STP/wBUMGzLd3redv8Alk03/pJn/wCqGOy7sFj/&#xA;ADN/Ma/tryXSfKSTpaSywPciYyRl4SQ3BaRtJuP2clwhhxnueTP5o1nzL5mur/VnVpZLb0jEi8Ix&#xA;GHHwBfDc9a5YBTRORK4WuimT01htjJWnALHyqOu2Fgl1v5o1HRNfu4dIsJY5I41T6zYVikKOFcqz&#xA;JT4eVNvbAkEprH+ZvnZ5FUprChiAWM8tBU9TvgoJ4j3py3mrzS7lE1m+QL9thcSVqewqT88NBHGe&#xA;9CX1/r19xW71zUpYhTlAbuUROAa0eMEKw27jGgvEUNPqXmq2VYNF1CfT4mPOWSC4eKrAEBSgVga7&#xA;b40okQpnXfzIb/pfXyc2Lml9IfTA5UjFU+INt8R3GNBPGe9DyXnnia9jv31S4F+gcRXZumaWCM8v&#xA;3CSGPlwf4amuNBeIsg8p+dPOul69b3uqX11f2HMtcW0l28oSM8gURGVVkNCCCxG+AxTHIQXoj/n5&#xA;5WQgHSdYNadLWMn4qfs+ry7+GV8Df4gbP59eWAKnR9bAHc2NB95fHhT4gVbD88fLV7fW9nHpmqpJ&#xA;cypCjvBEEDSMFBYiY7b748CBkD0XItjsVQWraxY6Vam5vH4oASFG7Gm5oNumVZcogN+vLzV4JLZa&#xA;lqHnxfNVhN9Se5uXlhDKHZY0TgzDkCpNNhVevyyvPr4YgQRZA+/o1RgZG3rsF+0Fp+lLK/uLiGB0&#xA;Go2N2Vc+m7cWkQgBlZR8S8TxNKUB3E9PqYZhcW2USGV5crsVdirsVdirsVdirsVdirsVeF/nbqse&#xA;mfmR5c1BkMv6Pit7t4QaFljunele1eBGWQ5NOQ7hPtJ/Mnz55zuHi8p6RBYWUR4zanfs0iqaVoOI&#xA;Ucv8kBvemAxA5pEyeSfxeT/zCmPK/wDOsgJFDFa2UEYXr0c1J+dMFjuZcJ70Lpf5O2unWk1pb+ZN&#xA;ZhgnJaWKC4jiVmcUdiPTbdseJRDzY/5g/JDybonlzV9Qj1G/ikjs5QkkksNAw+JB8MSGrMAvXv45&#xA;Xmz8EDLuDLFpxKQHe8A0ryjqzXf1m1KypZPFNM1SvGNp0i5seigGQFj2FT2yjS9oxzS4QC26ns+W&#xA;KNkhm/5haPr3l6+t9PvzHEZohOogctUcmX4jRf5embAG3AMK5sWg+vzypFC0jySMFRQx3ZjQDrlU&#xA;88I7EgNkME5cgS9B84fkmfLnk59eutSae9j9E3Fp6Y4rJM6q6+ryJIUtQGm+TErKyx0LeVTiWMEw&#xA;RiRtvhJ+eTakP62pf8sqf5/TirvW1L/llT/P6cVbEuo1FbVKfR/XFUzthKJ4ltwwmkdY19OvIl2C&#xA;0FN++BL7S02zFjp1rZBzILWGOESN9phGoXkfc0yhywiMVdirsVdirxf889Yv4J4YYZOEfqpEV6gq&#xA;U9Tv/lHMPH6tSb/hjt8WGX6UTdWAkjh9BvQmtjyt3Aqo2KlSu1VKmhFfxzm45TZ4t+Lm5Jj3Jh5c&#xA;s9QvNbtYbySNLMtymhhDEy+l+9RWZui+pGpKgb0pWlQc/s7JGOUCN+r+1jMEjd6fnQtbsVdirsVY&#xA;L5k/N7y9oOuXOjXMMz3Vp6frNWJE/exrIvHm4J2bfbJCNtcsgBS3/lfPlj/lnl/5Gwf814eBHjBN&#xA;LH85vIdxGrT3jWjt/uuRGfw7w+oKb4OApGUMj0bzX5c1oldL1GC6kUcmiRv3gXpUxmjgfRgIZiQK&#xA;a4EuxV4J+bPkrznr/nyaex0yWaxCQQQXIp6fHgCxrXoru1csiQA0ziSXtPl3QLDQNGtdKsUCwWyB&#xA;eVKF2/adv8pjucgTbaBSZYEuxV43/wA5AavqyCw0lInTSpB68tzQ8JJgWVYuXT4AOVPceGabtbJL&#xA;aP8AC7Xs2Ed5dU5/Kz8vNMh8pJc6vZpNd6mRcfGPijioREqsKMtVYk0/mocyezcHBjvrJx9fl451&#xA;0ij/ADx+X3lpvLup31vYqNQtrG4EEpLOQPhlNORO/wC6op7VPicydXZxSHk4+mAGSJ83znFK8UqS&#xA;oaPGwZT4EGozkwaelIt9dRHT9c0WN5YkuLDUbdXaJwGVo5UDUI+RzsYT4gCOry040SC+Q73TFv8A&#xA;zDeWXl60lu4mnm/R9tGDLK0SFmWlBU/AtcyXErfZ6h5S/KTSbrRNBvL22vbLzKtxFJqFhLE6xmIX&#xA;JL8g6DjSBdmDUr7nIGTYIPX/APAvkn/qXtN/6Q4P+aMhZbeEO/wL5J/6l7Tf+kOD/mjGyvCFW18o&#xA;eU7S4jubTRbC3uYjyimitYUdT4qyqCMbK8ITbAl2KuxV2KuxV89fnpdXH+JfqTH1EV4p1NACOScQ&#xA;u3hTMPDGs8yT/Cxy/SEB/j3U/wDfa/h/TOd8Dzcq2Rfl75s1PUvOOm2ZKxLI0hZwA3wpE7stKD7Q&#xA;XjXtmVosNZYkFjI7Pcs6RpdirsVdirDPNH5P+QPM+qvqusac01/KFWSZJ5o+QRQi1VHC7Ko7YRIs&#xA;TAFKP+hdfyn/AOrVL/0lXH/NeHiKPDCfaT+U/wCW+lwJDbeXrJwnSS5iW5krWtS8/qN198HEUiAZ&#xA;LZ2FjYwiCyt4rWAdIoUWNR/sVAGBkr4q7FXYq7FXYq7FVG9srO+tntbyCO5tpBSSGVQ6N81NRkZR&#xA;EhRFhMZEGwqRxpHGscahY0AVFGwAAoAMIFIJdNFHNE8Mg5RyKUdfFWFCMSLFJBp80xflN51udVur&#xA;K2sHEFvM8QvJ6QxMqMVDqW3YHr8IOcyNBlMiAOXV351uMRBJe2aX5e8xaZ+XjaEtxDPrEdrLb204&#xA;LLGpfkI/iIr8Ab+XtnQaXGYQEZb06TUzE5Ex6sO/Kn8pNd8s+ZJNW1hrdkS3eO2WB2ciRyoLGqr+&#xA;wGH05lSlbiwgQXruQbXYq7FXYq7FXYq7FXYq7FXjP53+Wb0ajD5ghQyWckaw3TDf03QniW8AwNPm&#xA;PcZqtfiIPEOTZEvKs1zN6X+Sflm7uNcOvSIUs7JHSGQjZ5pFKEL48VY1+jM/QYiZcXQMJl7hm3a3&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVskccsb&#xA;RyKHjcFXRgCCDsQQcSFY6fy48jm49c6PBzrWgDBP+RYPD8Mo/K47uk8RZDBBDBCkMEaxQxgLHGgC&#xA;qoHQADYDLgK5IX4VdirsVdirsVY3+Yfmm58r+VbrWbeOOSS3aMcZQxXi7hWJClSaA164YiyxkaDx&#xA;4f8AOTV4SAosmY7Bfq1yKnwqZss4A0+KXof5Z/mrJ5zuZrf9HSIkEZka/jSRbflUD0zzFAxrUUc/&#xA;LISjTZCZL0LItjsVdirsVdirsVdirHrn8wfJlrM8NzqsUEiOY3EgdQHU0I5FadvHDwljxhp/zF8i&#xA;pH6ra7Z+lvykEqlVp/ORUL125dceErxhjf5gfmN5Z/w9z0XzRYi8E0ZpbXkJkKEEEUV+VN98lEbs&#xA;Mkttilf5cfmTpH1bU5db8y2ruvp/Vorq8hUmgctw9Rx12wyixxy52mlp+dOizTxLLDHFayOqveC7&#xA;hkiUE0JDL8LcetAa4OBIy7pjc/nJ+XcLiNNU+sTMeKxwwzNUk0+0VCdf8rBwlmcga/5W95U/kuv+&#xA;Ra/814eAsfGDNY3DorjowBHyO+QbW8VdirsVdirsVdirsVdirsVdirsVdirsVdirTojqVdQynqCK&#xA;j8cVUfqNl/yzxf8AAL/TFaV8VdirsVdiqGvNT02yMa3l3DbNLX0hNIsZbjSvHkRWlRjSCQFia1o0&#xA;leF/bvTrxlQ/qOGl4grJe2bgMk8bA9CHUj9eBbVsUvIfMP5J6trN7cSHUre3hmuJJwQryMAxYgcf&#xA;gH7XjlnG0eEbYl59/Jy58r+RdRvY9SOozO0KfV0tzH9qQAnl6j9K16YRK0Sx0LSiz/JfyBLaQSz+&#xA;d0hmkRGlh9BTwdgCVr6nY7Y2e5aj3q3/ACpL8uv+p8TrT/edf+qmPEe5eGPevg8g+W1Z9Ch8yxLp&#xA;9qv1iLVZIvgkckVj4h/hpzO9e2GywoXzQzfl5bW9zFNbeZtKuUjZXKmSWNyAQaBTGwr/ALLG0kDv&#xA;Tc6FSv8AuQstv+Lv+bcNsOF7VB548pJDGjapByUBTueoHyyrhLlcce9ePPflA0/3KQ7+5/pg4Svi&#xA;R73f488oUr+lIelep/pjwlfEj3u/x35Q3/3KQ7U7nv8ARjwlfEj3rl88+UWbiNVgrWm7UG2/UimP&#xA;CV8SPem9pd2t5bpc2sqzwSbpLGQymhoaEe4wMwVXFXYqoNf2KsVa4iVlNGUuoII7HfFWv0jp/wDy&#xA;1Rf8jF/ritu/SOn/APLVF/yMX+uK279I6f8A8tUX/Ixf64rapFc20xIhlSQr14MGp92KqmKuxV2K&#xA;uxV2KuxV2Kvn782fzB84ab561DTdO1OW0s7UQiOKPiBV4EkY9K9X75bGIponI2o6v+ZXly88p6An&#xA;maeefWFiuSZomp8XrFFMgEUtarGp7H78QN2MjYFsV/xn5N4xf6VKG39c8HIPhwHAfjkmumQeTtT/&#xA;AC71maeG81K9WaM8oYLS0uJ3ePuT6UMtOPfbvgJLKEQeb0zSfzl/KaztYdMttbYizjEYWS1vA4Cf&#xA;D8VYF3ysxLeJxGy+6/Pz8roEZl1OWd1NPSjtLoN/yUjRfxx4CnxA+dfOH5t/mD5ktrjS9R1FZNKn&#xA;YE20ECRKwRuSVYoJewqOVMsEaaZTJTjyV+aR0rRvqep2VldSRyUgeawjdlhCIqrWNUFAVPXfExRx&#xA;FN7785LCSyuI7fTNOjneN1iddOFVcqQpHIEVB8ceFPGfJgeieaSn+J59XJM+r6U9pD6cKohuPWhZ&#xA;CyRqiL8EbfFT9eJCAUug1PTX0m2sEtD+kBIv+khIqn95WnIJ6vQ0+1hW0yurbWRHWCF678uaydPa&#xA;mKECIdX4D045C9D6lfrNKe2KuaHVuFYo5COI9Qt9Z2avbFWpIdW39OOf0+S0P7+vTf38cVU2i1hY&#xA;1Z0mCAt8X74bfOuFW/Uu/WXmzCHsQ0/Lj279cVe4+UvIH5tXnlvT7rSvOR07Tpog9tZMj1jUk/Cd&#xA;vpyskW2xia5pv/yrX87v+p//AOEf+mCx3MuGXe2n5a/ncJEP/KweFCav6Rkpsf2GAVvp+eNjuXhl&#xA;3vC9R/Kn8y49QuUl0G+uJFlcPcJCzpIwY1dWWoIbrUZPiDUYFD/8qt/Mf/qW9R/6R5P6YeII4S7/&#xA;AJVb+Y//AFLeo/8ASPJ/THiC8Jd/yq38x/8AqW9R/wCkeT+mPEF4S9W/5xy8k+b9E84ahfavpVzp&#xA;9k2nvAJLhDGGleeJlADULfDG3Tp9OQmdmzHEgvofK25jvmDz55e0G9Wz1GR0mZBIvFKgqSR1r7ZI&#xA;RJYSmAjdP8y6ZqGiSazbF2solkdiVIYiIVai9+m2CkiQItKdN/M7ypqN/BY2s0j3Fw4jiXh3P04T&#xA;EsRkBZXkWx2KuxV8wfndGq/mRqTDq6W7N8/QRf1DLocnHyc2D+Z9PnXy3o1/+i0jheW7h/SKyBmu&#xA;GHAhWjUB19HehLGtfbD1Y9FnmryzpmmeUfKOq2vP61rNvdSXvJqqWhn4JxFPh+E0wAqRsHsn5Q/l&#xA;/wDml5Usm1HS30S6stbgguDDcy3SyKCvOP4kgNDST4huMhIgtsIkMa/MH8pPOH17UvOXmu+0pPrD&#xA;IfQsWnq0vwxxpGjxJX4V3JbxJyrPqY4ocRbMWmllnTB/qh/m/DNb/LQ/m/a5/wDI5/nfY9Rvfyl8&#xA;taT5Qv8AWNa1C7tr5JruKwt1CfF6EjxxKUKcpC6x8yysF4mvQcjuBIurMAA8Y1i9ls7iWyA4XUDt&#xA;FOCPsOjFWX51GWNSN/L921PzvoenX1J7O6vYYriEgKGRnAZarQ7+xwHkmI3fWf8Ayq38vj10K2+4&#xA;/wBcp4i5HAE7sNC0XT7aK2srGC3ggFIkSNQFpv4da98FppHYpdirsVdirAvzW8t+ddcTRovK10bO&#xA;SG5dr2b12gQRslBz41ZxXsFOSiQwmCeTxyx/JD8xL2/ubdrGHT2hDtHfXUiehI4YBeHo+s55V5Cq&#xA;AU677ZPiDUIFmll5N/5yZtrN7L/FOkPA6lA7tM0qAilUkNrzBHbfIWGypIzTNC/5yEstW02HUNXt&#xA;r/SIpYDdNAYuRX1QZS7yxxTN8Fa0PToK4bC1J7BkGx2KuxV2KuxV2KsM/NzzRqnlfyVca1pjhbi2&#xA;lhBVlVgyyOIyvxBqfar07ZKI3YTJA2fMHmD8y7nzBqB1DV7Jbm6YBeRlZAAooAFQKo6dhloFOOSS&#xA;n2l+arVf0VZDQdYb61Gh4281wGfm7AG1iBo69l8TXAyBYtYedotPvYb2z04Q3Vu4khlWaSoYf57j&#xA;DTHd9Ffkb+Ymv+dYtWn1V142LQpFGqoN5Q5LVVU/kyuQpvxyJ5vU8g2OxV5b5/8AycvvNfmltWTU&#xA;orO2eKOMqY2kcFAQTSqj8cmJUGuULKT+Zv8AnHC0u/L9pZaTqLDU4Zi89zdPJ6LIVYEJCnJUPLjv&#xA;StK748aDj2SPT/8AnFnU5owmr+YVRIlAt0t43mC8iWdf3hj4iprt13w8aPCe96Pp66bpFjpyuZVs&#xA;reK3EhFCwiQJypvSvHK20PE/z68xtda5baFE37jT0Es6jvPKKiv+rHSn+sc0Paua5iHc7rs7FUTL&#xA;vTL8lPI+k3+i3mr6tZpdi5kNtbw3EatH6cfFmkXkDuX+Go/ly7svAOEzI8mrtHMbEQ9MsPJflLT5&#xA;jPZaPaQSsjRs6QoCUcUZenRhsc3Nl1QiFObyD5Fnmknn8uaXLNKxeWV7K3ZmZjVmZilSSepxsrwh&#xA;da+RfJNpcxXVp5e023uYWDwzxWcCSIy7hlZUBBHiMbK8ITvAl2KuxV2KuxV2KuxV2KuxVoOpYqCC&#xA;ygErXcA9P1Yq3irsVdirsVdirsVea/8AORH/AJKvUv8AjLa/8n0yUObDJyfIeXOM9R0LzZ5et/MH&#xA;kq5mvVSDTLe0S/cq/wC7aOZ2cGi70DDpka2Zg7h5dkmD6L/5xQ/45/mP/jLa/wDEZcrm34nveVtr&#xA;sVdirsVdirsVeaeafyTtdd1651YavJbtduHliaIS0PGlFbmlBt4ZrM/ZoyTMuKrdhh15hERrkzry&#xA;9oltoei2mk2zM8NonBXenJiSWZjTbdiTmfhxCEREdHDy5DORkeqY5Y1uxV2KuxV2KuxV2KuxV2Ks&#xA;S138ydG0XXZNIvEZJI4Um9YsAjeoT8I6mopmLqNUMXMEshCwkw/O/wAuel6noSA+i83Dmtaoaen/&#xA;AKx7ZD86Lqjzpl4ZXn86/LYZl9JzxeJAQy7iWlW+SV3wfn49x6/YvhlIh+cHljSPNmrX9xFczwal&#xA;BZrAbVY3obf1Q/Lm8f8AvwUpXL9Nk8UGQFMMh4QGSQfnN5VnjEkUF4yMKhuMI/XLmVwFp8ULz+b/&#xA;AJaAJNtd7e0H/VbHgK+KEXZ/mp5OuFrJcS2rbUSaJyd/+MYkH44OApGWKf6b5g0PUyFsL6C4kKlv&#xA;SR1MgUGhJT7Q+kYCGYkCj8CXYq8+/PUQn8vbn1QHUTwUhb7Dnn9lqb0H2uvUZKHNrycnz55X0zRN&#xA;U8yaZpt3Ywx217dRW8rxqwcCVwnwklhXfuMtLQBZfT2mflt5L0/T7ezj0q2me2QpBeT28ElyoLFh&#xA;+8MfVeXw5TxFyRAB89/mf5S8teVvM36K02zSaAQRyu1wCzh3LVFU9MUoB2y2Jtx5xovQf+cbxbGL&#xA;XTDGluVa25xRAhTyElGNa7/CQN8jNsxPacrbnYq7FXYq7FXYq7FXYq7FXYq7FUFrGtabo9i97qE6&#xA;wQJsCerH+VR3P+fTIZMkYCykC3mOrfntAJCNNiiSFSQGnDyO3geMZUL97ZgT1eUn0R+bYMZS3S/z&#xA;q8wXNy6IkUqqtSZYqL1H8jqa5Tk1ebGLlwqcdM48vfmfpl/ItvqUf1C4agWWvKFjt1Y0KV99vfMr&#xA;DrhLaWx+xlk08oi+jNczmh2KsF80/lVYeY/MUmrXl9LCjQRwrDCqghkLVYs3LahG1Mxs2mGTmWYn&#xA;QpKf+VBeXqU/SV30YdI/2jt+z2yH5OPf+AnxC4/kF5f3/wByV3vx7R/snf8AZ74/ko9/f9q+IWPv&#xA;+SWn6l5l1LTItTmt4dMhtXSR41kZzc+oTWhjA4+nl+ngMdgNeSPEAm1h+QSWXIRa87I3VGtgRXxF&#xA;JBmTxtJwov8A5Un/ANrn/p2/6+48aPA80TafkvpqNW81KaZadIUWI1+bGXBxpGEMx0LyxomhxFNO&#xA;txG7gCSZiWkenix7ew2yJNtkYgck1wMnYq81/wCcgZvT8iIlaetewpTxokj0/wCEycObXl5PA/Kk&#xA;/oeaNHn5cfSvrZ+VK04zKa0ywtI5vsbKHKfMX54z+p+Y1+nKvoxW6Up0rCr0/wCHy6HJx8nNlX/O&#xA;Ns1L3XoK/bjtn4+PBpBX/h8jNlie55W3OxV2KuqK0rv1p3pirsVdirsVdirsVdiq2aaKGJ5pWCRR&#xA;qXkdtgFUVJPyGAmt1fMf5j+db3zHrctXZbGAlLeDsqg9x47fF7+wFNdE8Z4z8PIftcmEaCU6d5dk&#xA;njWW4cxo24QD4iPp6ZjZtZRqIspvegyC1tLe1i9OFAq9/EnxJzX5jIm5JyY5Rq+qEm17TYnKeoXI&#xA;6lASPvy/Hgy1y282UMsgK6PWPyk86x6pbvo8k3qvbJztWb7QjGxjNd/h/Z9q9hmz0OSQ/dz5jl7n&#xA;FnGno+bFg7FXYq7FXUFa9/HFXYq7FXYq7FXYq7FXk/8AzkZNTytpsNft3wfj3PCGQV/4fJw5tWXk&#xA;8EsZ/Qvbeflx9KVH5UrTiwNaZY0h9p5Q5b5V/N2f1vzG1p+XKksaVpT+7hRKfRxy6PJxp82U/wDO&#xA;Oc1PM+pw1+3Zc+PjwlQV/wCHwT5MsXN9A5U3uxVJPOt1rFn5Y1C90meG2u7SJrj1bhS6COIc5NhX&#xA;fip7H+IIRLk+Wbv8zvNd1qs2oDXbiO4nHFjDM0ahOZYIqqaBV5Ggy2gHHsktxfml5wSQMfMd2SjV&#xA;CtcOQaeIJxoI4inGo/nf5ou7RoE1aSBnpWRHRWFDXZkVWHTxx4QvHLvSb/lZ/m3/AKmW8/6SpP8A&#xA;mrDwheIoW6/N/wAz27cG8xag7dxHPIaV9+QGCgniL3j/AJxz1+fWvI13PNcTXHoalNDG07FmVfRh&#xA;k4ipO3KQn6crnzbcfJ6nkWxj/n+eWHyhqLxMVYqiEj+WSVUcfSrEZia6VYZJjzfPqeW0l1FrgcpV&#xA;ZjJ6IWvxE13p2rml/OEQ4eve38Wyd/UL7/lml/4Bv6Zj48kQ3YcsYcxupz6XfywyRehKvNSvII1R&#xA;UUr0wnMOIHuRmy8ZHkx2byXqkaM1Dt0DIy1+k5njtCPcw408/K6K+0zzZZTyJ6ZeeOAA0NRKfTbp&#xA;7Pln5iJyQ4T1+9jkNh9I5uXHdirsVczKqlmICgVJOwAGAmlYjrf5reSNGn9C91KGOX+RpI0Pzo7K&#xA;300zE/Og/RGUvcNk1XNK/wDle35c/wDV1g/5HRf81YPzUv8AU5/Jdu9Uh/PH8uZZVjGrW4LbCs0I&#xA;/W4x/Ny645/Jdu8Mz0zV9O1O3W4sZ1miYAgqex6ZkYs8cg9JUhF5ah2KuxV5L/zkFY3N7p+jRQsi&#xA;qJZmfnUbhVApQHxOWQacxeK/4Zv/APfkX3t/zTljRb7Atmd7eJnNXZFLEeJG+Y7mvmD8wdDv7rzt&#xA;rc/OOj3cvGpYHiDQdF8Bl0eTiTO5ZL+ROlXlj5zmkdoykljLGwUkn+8jbuB3XBPkzxHd79lTkOxV&#xA;j/5g263PkXzBA9x9USTT7kPcHoq+k3KvTYjY4RzRLk+Q9BtfQsVcj45vjPyP2fwznO1M/HlI6R2/&#xA;W7zs3DwYgest0l1yaOXVeLOIogyRSzBeXBa/G/EdeNc3PZmMxwjz3dP2jMSzHy2fQ15+RH5X3Ore&#xA;XrXTLqUpcRvNdRwz+q1zbJFUXPP4ggMhQVUBTy2pmZxFx+AJ9/0Lb+WP++Lv/pIb+mDjKfDCZW/5&#xA;CflREkYfQkuJIwB6s0szM3Hpyo4U/dg4iy4Ayzy75X8v+W7J7HQ7GPT7SSQzvDCCFMjKqltyd+KA&#xA;fRgSBSaYpedfm/rEcFtZ2DyBISWubrsQifCn0Grfdmp7UyGhAdWcA8Uv/wAw7/kYtNQW9uv2eoJ9&#xA;/hI/EnNZHAOrYl488+Ywai53+n+uS8GKtnz35mIobokfT/XHwIqvg8/+YomBMwcV6EsP1NicEVZD&#xA;pHnCPUpUYj6tqkJEkUiUBYqa1BFNx18fnlRgYGwgvpHSr0X2mWl6AF+swpKVBrQuoYj6K0zqcc+K&#xA;Il3hpKKyauxV41+Z/nXzS2qNolhItnp9HFzMg/eMFkZKcz02Wo40pmNirPxCXKMq99MMk+Dk8tl0&#xA;Dy3aB7ua0jdySzyy1kdmO9auSSxzOGMBx/EKTsfrl2Etoo7dHPBEQBFp70pU48MQyEpd5TW60bQL&#xA;Wxre20U7D9plHJm8Bh4Ax45IzyDruu+X7l59EYWdjyLPbMDJE3+SFYmlf2itP1ZTLTx4uL+IM45S&#xA;Nn09oWpS6jYC4lRUfkVIWtNqb75jaXOcsOIinJkKKYZkodiqB1TQ9J1VY11G1S5WIkxh6/CWpWlP&#xA;lhBQYg80B/gTyh/1aoPuP9ceIsfDj3J4qhVCqKKBQD2GBmk9z5N8r3VxJcXGnQyTysXkkYGrMdyT&#xA;vh4ixMArab5Y0DTLg3FhZR285UoZEBrxNCR19sSSoiByTPAydiryD/nIvzUbXQ7PytavS71t+V1x&#xA;PxLaQkM3T+dwB8gwyvNl8OBn3MoY+OYh3vEJHSGFnOyRqTT2UZycImcgOpL0s5CESegD2r8jfy08&#xA;tS+SIdZ1zSbXUNQ1d3uOV5Ck/CEMVjVBIGC8qc9utc7GuEADkHlR6tzzL1XStA0LSFdNJ02109JK&#xA;GRbWGOANTpURqtcFsgEfil2KuxV2KvKPzi8na95k1S0ttJMZkktqmOR+HMQSEsoJFK/vVP0ZrdXg&#xA;M8gI7m2I9N+byy4/Jn8yYGodHZxvRo5oHBp8pK/flB0uTuXiCDP5W/mEASdCuqDfZQT9wOR/Lz7k&#xA;8QUk/Lbz87BRoF6Cf5oWUfeaDB4E+4rxBER/lT+YjtxXQ7gE/wA3BR97MBh/LZO5eIJlYfk5+Ydu&#xA;4vrixSygtv38kss8WyJ8TfDGzt0HSmE6SdGxsmJBID6M8qWslr5b06CQ1dYFLU2pyHKm/hXNpp48&#xA;OOI8mqYolNcuYuxV5x+YH5banqdx+ktDlie4+IzWNyxQOSzOTHKA3FqtTiy09xkMWMQJI/iNljOP&#xA;E8T13yx54/SAtrzQ9QikB4xQx20s6Hx4y26yxN8w2ZHG0+EQ9W8jfkbo/wCgRN5otnfUrmrCASMh&#xA;gjNOKn0zT1KjkxrtsO1Tj5ICZs9G+AoPOPNvkDzNpWvNbXtne3tircbS7tbaW4WaP9j+5Vwjt+0r&#xA;UNa0qKHLoz2aZY99mT+Wfyy83assfqWX6D02lBLe09cr/kWyHkD/AMZGXEztY4u97npunQafaLbQ&#xA;lmUbl3ILEnqTQAfcMx8OGOOPDHk5BNorLUOxV2KuxVTS5t3kaJJUaRa8kVgWFDQ1AxVUxV2KuxV2&#xA;Kvmv87dH1mHz/qOv30M/6HENtBZ3joxgRfTHJBIBxX95yO/cnNd2lDJOAjAWOZczQShCZlI13PNd&#xA;Qu7a6gjtbe5i5XUqRc+QIUM32mp0GYfZ2kmMtyBAj3uV2hqoHFUSCS+1NK0630zS7PTbYUt7KCO3&#xA;hH+REgRfwGb11ICKxV2KuxV2KuxVKPMVtcenb6laKXutNkMwiXrJERxmjHuybj3AyrKDtIcw24iN&#xA;weRTGzu7e8tYrq2cSQTKGjcdwcsjIEWGuUSDRVsKHYq7FUj8wSG+li0GA1a6o9+w/wB12qn4q+8l&#xA;OA+nwyjKeL0Drz9zdiHD6j05e9PAABQbAdBl7S7FXYq7FXYq7FXYq7FXYq7FXYq7FWG+Zdbae4ms&#xA;kkC2sZMcq1pyI2YN7dqYEPMvNvkTSbqxk1DREXS9ds1aezu7KkDFlBPFvT4/apTl1H4Yq9E/KvzP&#xA;qfmby6Tqd0W1TTHWzv2iQRh5hEkhY1DfEPU4tSg5A7UphSzKJ5o7j0JX9RXUtFIQA3wkBlalB3FM&#xA;VROKuxV2KpPc+TfKF1cJc3Wh6fPcowdJpbWB3VgahgzKSDXG0UE4xS7FXYq7FXYq7FXYqxy/+s6F&#xA;dPd6dbS3NjKTLfWMSFipPWWCm3I0+JO/XbMeQMDcRY6hviRMVI79Cj/L/mbRPMFn9a0q5WdF2lj+&#xA;zJG38siH4lP+Yy6MgeTTKJHNNMkhKL7XHed9P0hBd6gNpHJ/cW9f2pnHf/IG5ymWTeo7n7m2OPa5&#xA;bD70TpGkx6fC9Xae7nb1Lu6f7cj+Pso6Ko2AyWPHwjzYznxe5JvzC89W3k3Q11KW2a7llkENvbqe&#xA;HJipapajUAC+GWgW1SlSl+XHn+386aNJfJatZXFvIIri3ZuYBKhlZWoux8KbfjjIUsZWyzAyUWvb&#xA;NWKtPGGBoQXUEEfTirX16y/5aIv+DX+uK2p3Or6XawPcT3cUcMY5O5cUA+jGkEu0/VtM1GBJ7G5j&#xA;uIpK8GRga8SQduvUY0oNpT5j886NoF/b2V6JWkuFEhaNQVRCxUM1SO6npkhG2MsgBZDkWbsVdiri&#xA;abnpiryfXbeSfUdQeKjpLO7xsCKFSRvmIddhH8SeEoVLOf03Wgq0JjG4+0VYfxwfn8P85eAo38kY&#xA;J9HtNa07ULSS11ZbiC4v7ROEqo01unF0aFnVkl4FhToar2zLBsWEPTIhLLcCd0MaIpWNGpyPIirG&#xA;nTpthVE4q7FXYqpXF1a20ZkuZkgjHV5GCL97EYCQOapDc/mN5Itplhk1iAux4gxlpVqfF4wyj5k5&#xA;SdVjHVPCU9tLy0vIFuLSeO4gf7MsTB1PyZSRlwkCLCEo1Tz15R0u5FtfapDHOTQxrykKn/L9MNw/&#xA;2VMqnqIRNEpoo3TvMWg6lT6hqNvcsf2I5UZvpUHkPuyccsZciFpMMmh2KuxV2KpLd+UdFm1F9Ugj&#xA;ax1WReD39q3pSMK1+MD4Hr35KcrljB8izjkI82zoF7P8F/q1zcW46wxiO35DwdogHNfYjI+ETzkf&#xA;uZ+KByATOzsrSzgW3tIUghT7MaAAfPbvlkYgCg1SkSbKtkkPn389/Omg61exaJp87SXuh3EseoIV&#xA;ZVDuq04k/aoVZT75ZANOQ28la8voDxt2dVO7cSRv9BGTal8OpamzESTSKKbfEw/42OK21hV2KGmh&#xA;uJAPRYLRhyLCtV7jMTUazHhIEurlYNJPKCY9EXFDJGQySFH8VqD94zWz7a39MdnYw7I23luudJnN&#xA;Xmdj0qxJ/Wch/LR/m/ay/kcfzvsZd5J/Pf8AMqHlptnobeZYbCFIILK0ik9aOOOiLK7RJKzUChTU&#xA;dTm6G4B73U8RBI7mZ2H52/mlcX1tbzflnqMEM0qRyTtHd0RWYAua24Hwg1xoJ4j3Pbci2JB5wvpI&#xA;LFLeM8WuSQxH8i0qPpqM1famYxgIj+JnAbsKznW12KrNBvm0z8w9NmdqWutW0mly70Hrwk3NsT/s&#xA;RMo+eb7snMTEwPRrmHq+bhrdirsVdir5I8w+ZtT1nXbu+vbY200zcmhbn8HQcRyoc0fD4kzbkQih&#xA;IZ3eTiQKUrUfPMHHK3J1WAY6pFxXNxCrrFK8ayCjhWKhh4GnXLASHFUZXKRswFSoqBikc0LJeSqp&#xA;IUEjtvksI44Eno5Wo08YHZ9Cfkj5h1HVvKrQXluYV09xFBM3ImVWq5areBNNs3OjmTCu518hu9Dz&#xA;LYuxV2KuxV2KuxVSu3dLSZ0NHWNmU+BAJHXFXw9e2lhq2qazqWva19VuWUXSIIfWnup5nI9ONFaP&#xA;4iRUkniPbLjs4w3Z55V/5xd80atpUd/qt9HozzgPFZyI8swQio9UBkCN/k1JHeh2yJkyGMsltf8A&#xA;nGbStAsdQ1bW/MDTR2lrM8Qhh9JY3WMlZGZmlLcT+zx3wcSfD73gn6Y1L/f3/Cr/AEyxqe6/lH+W&#xA;9jros7zXbKafTL7S1uLW5jLpF9ZS6ljmWR0I4vwCFV6Ee9cgZNsIAs/8o/lT+X17pDXcmnm4El1e&#xA;LBL684DQR3cscBXg6ggxKtD365i59PDKbmLpysGaWMek1adf8qe/Ln/q0f8ATxdf9Vco/k7D/N+0&#xA;/rb/AM9l7/sDv+VPflz/ANWj/p4uv+quP8nYf5v2n9a/nsvf9gZbaWttZ2sNpbRiK2t41igiXZUR&#xA;AFVR7ACmZgFCnFJtVwodirzP877a+j02w1S1JVbeRobkgA/DKAUJqDQBlI+nNZ2jiBAlXJnAvHf0&#xA;zqX+/v8AhV/pmp4I9zY79M6l/v7/AIVf6Y8Ee5Xpv5LadNqVze6pqEazwWhRLRpI1IE9eRdDTZkA&#xA;G/vmz7OwgEyphMvYc2zW7FXYq7FXy9+aN6LbzxqwKcuU7d6dAM0OoF5JN0eTFP0wv++j9/8AZlPC&#xA;l36YX/fR+/8Asx4Vd+mF/wB9H7/7MeFV8WqLJKqemRyIFa+P0YmKvqD8r/8AlA9I/wCMb/8AJ183&#xA;mk/uw1S5spzIYuxV2KsV86a9qWl6t5VgtJRHDqeqC0vVKq3OJoJG41YEr8Sg1XfCAxkeTKsDJ2Ku&#xA;IBBBFQdiD0pir59/If8ALHTb/V5/OWqATy6dMbTT7Nlqsc8aq7TN2Yr6lE8Dv1pSyZaccer6Cytu&#xA;S3zLp0GpeXtSsLgsIbm2ljkKEBgGQioJB3whBGz4Ey5xX15+TPlPy3fflfoc95p8NxLNDL6rSLy5&#xA;fvpBRgdjtlUju5EBs9PhhhhhSGFFihiUJHGgCqqqKBVA2AAyLNBa1rulaJZi91Sf6vbFxGJOLv8A&#xA;E1aCiBj2yE8giLLOEDI0ETZ3lre2sV1aSrPbTLyilQ1VgfDJCQIsMSCDRburqC0tpbm4f04IEMkr&#xA;7miqKk0FSfoxlIAWViCTQUNL1fTdVtvrOnzrPCDxLCoIPgVYBh9IyMMkZCwWU4GJoozJsFC/sLTU&#xA;LOayvIhNbTqUljboVORlESFFXjuv/kZqkdw8mh3UU9qTVYbglJVHhyAKt89s1eTs836Ts2Cajo35&#xA;Ga9NcKdWuobS2B+MREyykeA2CD51+jBDs+RPqNKZvYtG0bT9G02HTtPi9K2gFFHUkncsx7knrm0h&#xA;ARFBrJRuTV2KuxV2KvmD8zrqGDzxqwkBPK4alBXoBmh1IvJJujyYt+k7P+VvuH9cp4Sl36Ts/wCV&#xA;vuH9ceEq79J2f8rfcP648JVdHqFq8ioqnkxoNhg4Sr6d/K//AJQPSP8AjG//ACdfN7pP7sNUubKc&#xA;yGLsVdirzH84JfS8x/l61OVdehSnT7bItforko9WE+YenZFm7FXYqlfl3y3pugWtxa6epS3uLiS6&#xA;4E14tLSqr/kim2Em0AUmmBLToroyOAysCGU9CD1xV8pfnJ+V/lzQPNkdvo3qWlpc2qXJty3qKjtJ&#xA;IhCFviC0jBoScwNX2icMuGr2crT9njLG7rd73+TdqLX8tNDtw3MRxSANSnWeQ5lYM3iQEqq2nLi8&#xA;ORjzpmeWtbyP/nIXzLBpdhoenz2080d9cTTGSJQyJ9WjC0ckrTl6/wAPyzF1cDKNAuVpcgjKyCxj&#xA;yl+YGtaRpccWmsv1KUmZIJ05ULjfoajxpXNfDPPH6Q7Genhk9RTTXfze1iXQ7yK809JYZECSGyRz&#xA;IoZ1WtGdhTffL46iWW47Bx56eGKpbndb5P8ANc9tFNdaUGhSVvTmjmUEEpuDSp6csojOWI7N5hDK&#xA;NwzLS/P+s3N9bWskNuRPKkRYB1PxsFr9o+PhmRj1kyQKDRk0UBEmzsz/ADZOsdirsVdirsVdirsV&#xA;UL6+tLCzmvLuQRW1uhklkboFHywSkALKvlfzdrFjqvmC+1KVQqXUzyQq4qQhPw1pXfjSuc9knxSJ&#xA;HVuASb1NK8E/4E/0yO6XeppXgn/An+mO6u9TSvBP+BP9Md1XRvppkURhOdfhoO/3YN1fQf5MeZLK&#xA;98uJoxcC/wBO5kxHq0LyFg48QC/E+G3jm30OUGHD1DVIPQ8zmLsVdirx7/nIC8FvqnkUkHiurrMW&#xA;XqPSeLp/wWTi15Oj2HINjsVdirsVdirsVYZ50/K7SPNmqRajeXdxBLFAtuqQ8OJVXd6/ErGtZMwt&#xA;ToY5ZcRJ5OXg1cscaAZD5c0O30HRbXSbeR5YbVSqSSU5HkxbegA/azIw4hjiIjo0ZchnIyPVMsta&#xA;3zd/zkndNP570mzWKWQWmnGVXhuAtHnmcFGh4sa8Yg3Lv9GY+c7fsb8A3/al9shjtoozUlEVasat&#xA;sKbnxzSyO7vIigl/mBGe2t1WOSQG4SvpTrCwADGpBDFxtuoGZWl6ny7nD1n8I8++mWeXY3TSIeYk&#xA;Vm5NxlbkwBY03oO2VZT6m/CPSyryhbrP5ksUbormT6Y1Lj8VyemF5Aw1RrGXrebp0jsVSvWfNHl/&#xA;RGiXVb6OzacExCQkcgtK0oD0rlWTPCH1GmzHhlP6RaW/8rL8h/8AV6t/vP8ATKvzuL+cGz8pl/ml&#xA;k2ZTjuxV2KvC/wDnIS5tpNd0KKOVHlt0n+sRqwLR8/TZeYG68huK5rNfvVNuMEvMLiOzmI9VlqvT&#xA;4qdc1kT3NkomPMUpfU9N8V/4P+3JWWLvqem+K/8AB/242Vd9T03xX/g/7cbKtpbacjh1ZQymo+P+&#xA;3BZVFQyRjUNOYsOKXcLO1RQKG3J9snh3lsylCQG4fXoIYAg1B3BHSmdE4zsVdir5w/5yW832t1r2&#xA;i6TpMnrahocsk9/8LFY3k9JolDDqaKS3htlkA05C1rf/ADkNf3PnPSb/AE5r+w8sW4Qarp7QQPJI&#xA;VdmdlJJ+0hVftClK48GynJu+htJ1Sx1bTLXU7CUTWV5Gs1vKKiqOKjY7g+IOVtwKKxV2KuxV2Kux&#xA;V2KtO6IjO7BUUEsxNAAOpJxV8i+adSi85/mDqeuwwWt7pcswtrS8t3kV/q0HwK0isV+1x5fYzA1O&#xA;WtrIc7S4r3oEJ9mrdsktwp1PWBFbw218tip5xF2WdJX68aMgK8fCu+Z2IcELNji+VOBmPHkoUeH5&#xA;2z6zt47a1igjXikagBa1p9OYkjZtzIihTLvy6gWTXndhvDA7qf8AKLKv6mOZeiFz+Dia41D4vS82&#xA;rqUk86+Z4fLHlm+1uWP1haICsVacizBRvQ7Ctchknwjbmr571Xzp5g/M+4tDa6R6klmrqFtSwoHK&#xA;k+oXDAfZ8cxdToDloykBTdptccdgC7S/VPJvmfTLVrq60iYWyEh5Y5FkVeJoeXBTTcZi/wAjD+c5&#xA;J7WkP4Xsn5Yfm3debdVn0y+sY7adIjPFJCzFSqsFIIap/azaeoSqTroyBel5Nk7FXz3+e2gQ2PnC&#xA;DU0lZ5NbWssZA4x/Vo44hx8agVzWawcJJ/nByMOThedy6Ykjci5BApsM1eMcIptz5vEN1Sz9Dx/7&#xA;8P3DJ8TS79Dx/wC/D9wx4ld+h4/9+H7hjxK79Dx/78P3DHiVXSxV7i1tmc8bmZICwG4Eh41w6f0k&#xA;j+c5OXU8YArk+wYYhFDHEDURqFB+QpnRh16/FXYq+YtaQH8wvN8MUSmRr/l6rDkFDLU9ffoM1Xat&#xA;jhN96MXMoPVZLW1s5LaGNWlZG5MQDSo6n3Oa7AZSmCT1DbIbF7h+R/8A5Kvy/wD8Ypf+T8mdRLm0&#xA;Q5M5yLN2KuxVxIAqdgOpxVKJfOHlOLkJNZsgVNGX6xEWB6UoGrlZzQ7w2DDPuKUap+avkqwQlb76&#xA;5KPsw2qmQn/ZGif8NlU9XjHW2yOlmelPF/zR8+ecvNk0ek2SS6b5ZukVZVtuTXBlV6hpZUpSPp8P&#xA;z65T+cBBbToyCO5I/L/lv9HxiSSNRdspR2SoWhavQ03PfbMHLl4vc7DDiEfejNdstWSxSa0p6XML&#xA;dAV5+kwoeBG4Ne9MlgEb9XwY6gzr0/FG+XPKkdlxmuT6rxlWtpW5CUjjSste42+XyyWXPxcmOHT8&#xA;PP8AHvZNmO5TOPyyiQyahKR8aiJFPs3In/iIzYaAcy67XnkGd5sXWsA/Pb/yV+s/6i/8SGVZen9a&#xA;P3qeRY75fifyP5Q05NJsEvoBEk2qelVbkyMvJ33BEg326U9xjqMs4bgcUftZafHGQq6l9id+VPPn&#xA;l/XllhtZuDxtI81tMtJCsjsRRRyBUcviIPXJY58cRIdUTjwyMT0SHyRotnpP5zahDZDjaT2D3EKA&#xA;UCiR0qoHgGByUzvH4tUBRL2TC2OxV49+feh6ve3Wj6ha2rzWVhHObydacYwzJTl86Zr9fAkAjozg&#xA;Xjd7aSXBQq/HjWvXvmqBpsQ36Kn/AN+j8cPErv0VP/v0fjjxK79FT/79H448Sr4dNmjlRzICFIJG&#xA;+JkqfaJomq6tq9lFpts91JbzxTzLGK8YkcBnPsKjLMEDKWyCX1bnQNLsVdir5O/PXTH0n8yNVazl&#xA;fjqFtHfsnULKwKEdGrvGT9ORyZOHh99MY4+Iy91vLf0hrjAhjJSlWolKA99htlvix7w1eFLuL7e/&#xA;LXS4NL8gaBZwEsi2UMpZupaZfVf/AIZzTInm2xGzJcDJ2KuxVhv5uXlza+Sbr0HMZneOGRhseDN8&#xA;Q+mlD7ZjauRGMuTpADMPnrNM7dUt1DzxqejMoPyJxVkgAAoOmKuxVsEjpiqpHPOrDi569CajFU3w&#xA;s2a/lm7C6vkB+FkRiPdSQP8AiRzP0B3Lr9eNgz7Nk6xgH57f+Sv1n/UX/iQyrL0/rR+9TyLGvyl/&#xA;MnR/Mflyz0u7u0ttYso1hngdgplSMcVZCetRStN8yJBqhLakx1zQvIOnxfp3UXj0e4tpJ3S8tn+r&#xA;yn94/EqEoHbwqpqNumRroysDcsc/KfzXH5p/NW/1aIn0XspI4Q1AwSNo1XkBTc9Tkcgox+KMZskv&#xA;dsLY7FUPqFhbahYXFjcryt7qNopQOvFxQ09/DIyiJCir5u85flf500i9KWtrLeWQJ9O6tlZwyn7P&#xA;NVqyH5/RXNLk0soHlYbRIMb/AMJed/8Aq3Xv/IqX/mnK/DPcfkm3f4S87/8AVuvf+RUv/NOPhnuP&#xA;yW3f4S87/wDVuvf+RUv/ADTj4Z7j8ltXsvJnnma6jRdMvXqwqPSkpT3JFAPnj4UjyB+S2Hvn5XeQ&#xA;p/LVlNd6hT9KXgUPGpDCKNdwnIbFid2pt0zaaTTnGLPMtcjbOszGLsVdir52/Pry9r1x57+u22nX&#xA;NzaT6bHFFPBC8q+ojvyU+mslCOQ65i6vHKQjQ5S/HUN2nmImV9Y/joXnn+EPN88cpg0HUpQ0IjDJ&#xA;ZXDDnQ7VEHvmJj02QEbcp38Nv6TkzzwIO/OFff8A0X1r5Os72y8o6HZ3yGO+ttPtYbpCQSsscKq4&#xA;JFQaMD0zbF145JvgS7FXYq8z/wCcgLPV7zyZZwaXBcXE7ajFzitld2KejN1CAnjy4/TTMDtGMjjF&#xA;d/63M0JAmb7nhH+BPzE+uPZ/ojUPrCLzZeD0pQHZvsnr2Oaj8vluqLtPHx1dhZbeUfPSxLfNpeoL&#xA;axyBGkaKUUPX7JHKnvSmROHJV0UjLC6sJsfL/nMSRRHT9QEk4DQr6U1WB6EbZX4WXul9rZ4uPvCk&#xA;+k+a0dkayvw6Eh19Kaq06122weHk7pfanxId4Xtofm9Y4pGsL8JOSIW9KajEGm22PhZe6X2o8XH3&#xA;hc+g+co5WjbT9QWSM0ZfSmqD18MTiyjpL7VGXH3hXHl7z41q10LHUfRVuDNwmry6/Z+1360w+Dlq&#xA;6kvjY7qw9C/JnSPNWn+a7j9L213Bbzaczxm4DhCxmi4/a25Urt1zY9m48kch4gR6f1OBr8kJQHCQ&#xA;d3s+bt1KD1nR7DWdMuNN1CP1bS5XjKladCCCD4giuRnASFFXz9+Zf5N6LoNzYf4d0u6uhOsjXDAS&#xA;S8WUrxp6YHHqc12tyZsdcBkft/Q5mkwYpg8f3sMl8jatLT1dCvJKdOUVyf15g/m9V/S+X7HM/J6b&#xA;y+b6U8l/lf5R8nTTT6NA6zzrweWV+bBagkDYdaDN6MdGySS6cCuTLMsV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:52ea1af8-d080-2a4a-81e4-6996edebf084</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:52ea1af8-d080-2a4a-81e4-6996edebf084</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:5579f0c4-f7ac-4543-b691-96827fd1008c</stRef:instanceID>
            <stRef:documentID>xmp.did:5579f0c4-f7ac-4543-b691-96827fd1008c</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a613b13b-ad44-5047-9dbf-0017b945326e</stEvt:instanceID>
                  <stEvt:when>2016-03-03T19:26:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:baa8e3d8-32e8-264e-85e2-479b96a27290</stEvt:instanceID>
                  <stEvt:when>2016-03-06T20:07:54+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ce46f36d-f392-8f4f-b963-3b49e15db26a</stEvt:instanceID>
                  <stEvt:when>2016-05-05T19:09:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e8f4e6ec-c085-cd44-8c60-aa4a5070d376</stEvt:instanceID>
                  <stEvt:when>2016-05-05T19:17:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e833b2f7-6e68-d940-9cfc-7b7fb2f29f6a</stEvt:instanceID>
                  <stEvt:when>2016-05-25T15:14:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fe8c5873-d99f-b24f-8711-1324b234b20c</stEvt:instanceID>
                  <stEvt:when>2016-05-25T16:15:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:52ea1af8-d080-2a4a-81e4-6996edebf084</stEvt:instanceID>
                  <stEvt:when>2016-05-26T14:15:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
69.7512 228.313 mo
69.7512 233.78 li
53.2153 233.78 li
53.2153 228.313 li
31.612 228.313 li
26.9068 238.164 li
87.217 238.164 li
102.944 235.093 li
103.376 234.15 li
103.376 228.313 li
69.7512 228.313 li
cp
.172549 .247059 .27451 rgb
f
59.4953 253.532 mo
57.0239 252.817 55.2096 250.568 55.2096 247.865 cv
55.2096 245.162 57.0239 242.913 59.4953 242.198 cv
59.4953 241.92 li
53.1997 241.92 li
49.9162 241.92 47.2545 244.581 47.2545 247.865 cv
47.2545 251.148 49.9162 253.81 53.1997 253.81 cv
59.4953 253.81 li
59.4953 253.532 li
cp
.109804 .172549 .188235 rgb
f
53.8851 229.832 mo
53.8851 232.065 55.7029 233.884 57.9376 233.884 cv
63.8794 233.884 li
66.114 233.884 67.9321 232.065 67.9321 229.832 cv
67.9321 228.319 li
53.8851 228.319 li
53.8851 229.832 li
cp
.462745 .560784 .580392 rgb
f
92.2033 234.15 mo
91.6267 234.15 89.8559 234.732 88.2826 235.681 cv
86.9544 237.222 li
86.9655 237.887 li
86.9655 241.775 li
103.376 241.643 li
103.376 234.15 li
92.2033 234.15 li
cp
.109804 .172549 .188235 rgb
f
36.8111 280.325 mo
35.4623 280.294 li
35.6938 278.98 li
23.5105 277.676 li
23.1191 278.835 22.9875 280.071 24.0251 280.38 cv
26.1023 280.998 36.3107 282.722 38.5647 282.855 cv
40.7441 282.983 43.0332 281.331 40.7858 278.585 cv
39.6338 280.097 38.0424 280.325 36.8111 280.325 cv
cp
f
25.5492 232.103 mo
25.0722 232.103 24.6856 231.716 24.6856 231.239 cv
24.6856 230.762 25.0722 230.376 25.5492 230.376 cv
26.0263 230.376 26.4129 230.762 26.4129 231.239 cv
26.4129 231.716 26.0263 232.103 25.5492 232.103 cv
cp
101.771 227.425 mo
101.951 226.907 101.846 226.31 101.432 225.896 cv
100.855 225.319 99.9189 225.319 99.3417 225.896 cv
97.8128 227.425 li
91.1085 227.425 79.198 227.425 66.8449 227.425 cv
66.8449 228.998 li
66.8449 231.11 65.1328 232.822 63.0209 232.822 cv
58.7963 232.822 li
56.6844 232.822 54.9723 231.11 54.9723 228.998 cv
54.9723 227.425 li
48.1241 227.425 41.6503 227.425 36.4059 227.425 cv
36.2646 226.784 35.821 226.288 35.2451 226.117 cv
35.2451 224.654 li
34.3619 224.654 li
34.3619 226.129 li
33.8142 226.316 33.3967 226.805 33.26 227.425 cv
32.5849 227.425 31.9233 227.425 31.31 227.425 cv
30.4357 227.425 29.672 228.554 29.0395 230.036 cv
27.5036 230.559 26.9686 229.119 25.824 229.119 cv
24.6099 229.119 23.6257 230.103 23.6257 231.318 cv
23.6257 232.532 24.6099 233.516 25.824 233.516 cv
26.138 233.516 27.6691 233.28 27.2857 236.117 cv
27.2853 236.119 27.2858 236.119 27.2855 236.121 cv
27.1504 236.787 27.0757 237.222 27.0757 237.222 cv
34.2158 237.222 li
34.2158 229.21 li
34.2158 229.05 34.3459 228.919 34.5064 228.919 cv
34.6671 228.919 34.7971 229.05 34.7971 229.21 cv
34.7971 237.222 li
35.2952 237.222 li
35.2952 229.21 li
35.2952 229.05 35.4253 228.919 35.5858 228.919 cv
35.7463 228.919 35.8764 229.05 35.8764 229.21 cv
35.8764 237.222 li
36.3746 237.222 li
36.3746 229.21 li
36.3746 229.05 36.5047 228.919 36.6652 228.919 cv
36.8257 228.919 36.9558 229.05 36.9558 229.21 cv
36.9558 237.222 li
37.454 237.222 li
37.454 229.21 li
37.454 229.05 37.584 228.919 37.7444 228.919 cv
37.905 228.919 38.035 229.05 38.035 229.21 cv
38.035 237.222 li
38.5333 237.222 li
38.5333 229.21 li
38.5333 229.05 38.6632 228.919 38.8238 228.919 cv
38.9843 228.919 39.1144 229.05 39.1144 229.21 cv
39.1144 237.222 li
39.6125 237.222 li
39.6125 229.21 li
39.6125 229.05 39.7426 228.919 39.9031 228.919 cv
40.0636 228.919 40.1937 229.05 40.1937 229.21 cv
40.1937 237.222 li
40.6919 237.222 li
40.6919 229.21 li
40.6919 229.05 40.822 228.919 40.9825 228.919 cv
41.143 228.919 41.2731 229.05 41.2731 229.21 cv
41.2731 237.222 li
41.7712 237.222 li
41.7712 229.21 li
41.7712 229.05 41.9013 228.919 42.0618 228.919 cv
42.2224 228.919 42.3525 229.05 42.3525 229.21 cv
42.3525 237.222 li
42.8504 237.222 li
42.8504 229.21 li
42.8504 229.05 42.9807 228.919 43.1411 228.919 cv
43.3017 228.919 43.4317 229.05 43.4317 229.21 cv
43.4317 237.222 li
43.93 237.222 li
43.93 229.21 li
43.93 229.05 44.0601 228.919 44.2204 228.919 cv
44.3809 228.919 44.511 229.05 44.511 229.21 cv
44.511 237.222 li
45.0092 237.222 li
45.0092 229.21 li
45.0092 229.05 45.1393 228.919 45.2998 228.919 cv
45.4603 228.919 45.5904 229.05 45.5904 229.21 cv
45.5904 237.222 li
46.0886 237.222 li
46.0886 229.21 li
46.0886 229.05 46.2187 228.919 46.379 228.919 cv
46.5397 228.919 46.6696 229.05 46.6696 229.21 cv
46.6696 237.222 li
47.1679 237.222 li
47.1679 229.21 li
47.1679 229.05 47.298 228.919 47.4585 228.919 cv
47.6189 228.919 47.7491 229.05 47.7491 229.21 cv
47.7491 237.222 li
86.9544 237.222 li
89.6676 235.584 li
90.9795 234.792 92.6852 234.15 93.477 234.15 cv
103.376 234.15 li
103.376 227.425 li
103.376 227.425 102.793 227.425 101.771 227.425 cv
cp
.301961 .376471 .403922 rgb
f
59.8334 253.28 mo
56.7272 253.28 li
53.7365 253.28 51.3121 250.855 51.3121 247.865 cv
51.3121 244.874 53.7365 242.45 56.7272 242.45 cv
59.8334 242.45 li
62.8241 242.45 65.2485 244.874 65.2485 247.865 cv
65.2485 250.855 62.8241 253.28 59.8334 253.28 cv
cp
55.6328 237.222 mo
43.9402 237.222 li
27.0757 237.222 li
25.7898 244.297 li
25.7898 244.297 26.3536 245.218 27.0491 246.354 cv
27.7446 247.49 27.6107 249.947 26.7501 251.842 cv
17.8981 271.33 li
18.4017 278.382 li
18.4017 278.382 18.6056 278.413 18.929 278.461 cv
36.5799 280.887 li
38.5605 280.935 40.1223 280.403 40.9017 277.711 cv
41.5773 275.377 44.9937 264.057 46.7792 258.147 cv
47.3811 256.155 49.5571 254.539 51.6384 254.539 cv
59.0358 254.539 li
64.0731 254.539 65.8361 251.685 65.8361 249.082 cv
65.8361 246.89 li
65.8361 244.809 67.5234 243.121 69.6046 243.121 cv
87.0026 243.121 li
87.0026 237.205 li
55.6328 237.222 li
cp
.172549 .247059 .27451 rgb
f
34.689 240.351 mo
34.689 240.351 40.6498 236.237 47.3662 240.771 cv
43.5882 254.12 35.8644 279.558 35.8644 279.558 cv
20.1649 277.879 li
34.689 240.351 li
cp
.607843 .360784 .0901961 rgb
f
142.042 56.2333 mo
166.864 56.2333 li
166.864 71.8665 li
142.042 71.8665 li
142.042 56.2333 li
cp
.172549 .247059 .27451 rgb
f
206.539 62.1014 mo
123.158 62.1014 li
123.158 44.2405 li
206.539 44.2405 li
206.539 62.1014 li
cp
.152941 .227451 .247059 rgb
f
128.712 62.5538 mo
128.712 55.2068 li
128.712 53.8172 127.586 52.6903 126.196 52.6903 cv
86.657 52.6903 li
85.2673 52.6903 83.2199 53.8172 82.0841 55.2068 cv
79.4055 58.4846 li
86.2729 65.3519 li
126.442 65.3519 li
127.175 64.3999 127.929 63.4643 128.712 62.5538 cv
cp
f
106.79 45.2536 mo
82.5197 45.2536 li
82.5197 36.1188 li
106.79 36.1188 li
106.79 45.2536 li
cp
f
75.2545 61.2771 mo
78.8405 61.2771 li
78.8405 42.9059 li
75.2545 42.9059 li
75.2545 61.2771 li
cp
f
125.272 66.5701 mo
109.641 70.2971 li
109.948 75.3327 111.34 86.6586 115.264 96.8077 cv
123.267 94.4286 130.62 91.545 130.62 91.545 cv
130.62 91.545 125.313 77.0208 125.272 66.5701 cv
cp
.607843 .360784 .0901961 rgb
f
207.741 61.6308 mo
207.741 70.3055 li
208.447 70.3055 li
209.547 70.3055 210.439 69.4135 210.439 68.3131 cv
210.439 61.6308 li
207.741 61.6308 li
cp
.172549 .247059 .27451 rgb
f
192.464 45.1869 mo
189.378 44.8535 li
189.378 42.6255 li
192.464 40.2873 li
192.464 45.1869 li
cp
f
213.344 51.7774 mo
209.009 51.7774 li
210.406 54.9963 li
213.344 54.9963 li
213.344 51.7774 li
cp
f
106.911 74.2056 mo
105.783 74.2056 li
105.783 69.8843 li
107.943 69.8843 li
106.911 74.2056 li
cp
.152941 .227451 .247059 rgb
f
68.694 58.7044 mo
62.53 58.7044 li
60.9629 58.7044 59.6923 57.4339 59.6923 55.8668 cv
59.6923 54.2995 60.9629 53.0291 62.53 53.0291 cv
68.694 53.0291 li
70.2613 53.0291 71.5317 54.2995 71.5317 55.8668 cv
71.5317 57.4339 70.2613 58.7044 68.694 58.7044 cv
cp
54.7066 59.4846 mo
38.1667 59.4846 33.8664 64.3363 28.0398 64.3363 cv
26.3682 64.3363 26.0375 64.4467 26.0375 58.3821 cv
26.0375 52.3173 25.4861 50.3327 29.2351 50.3327 cv
32.9842 50.3327 56.1401 50.2706 56.1401 50.2706 cv
58.5659 50.2706 58.1034 59.4846 54.7066 59.4846 cv
cp
63.8587 48.8992 mo
57.5736 48.8992 19.8625 49.1197 19.8625 49.1197 cv
19.8625 49.1197 19.8625 61.6899 19.8625 66.1005 cv
19.8625 70.5113 16.6649 81.4277 18.429 81.4277 cv
20.1933 81.4277 26.6991 81.4277 26.6991 81.4277 cv
26.6991 81.4277 30.2275 65.3287 45.775 63.2337 cv
61.3225 61.1387 69.1515 61.2489 75.6572 61.2489 cv
75.6572 54.192 75.6572 45.1501 75.6572 45.1501 cv
75.6572 45.1501 70.1439 48.8992 63.8587 48.8992 cv
cp
.301961 .376471 .403922 rgb
f
78.1505 49.7574 mo
76.0308 49.7574 li
76.0308 42.9059 li
78.1505 42.9059 li
78.1505 49.7574 li
cp
f
78.1505 61.2771 mo
76.0308 61.2771 li
76.0308 54.4254 li
78.1505 54.4254 li
78.1505 61.2771 li
cp
f
78.1505 53.6725 mo
76.0308 53.6725 li
76.0308 50.5857 li
78.1505 50.5857 li
78.1505 53.6725 li
cp
f
94.6529 55.9079 mo
86.9213 55.9079 li
85.988 55.9079 84.6133 56.6647 83.8506 57.5978 cv
82.0519 59.7988 li
86.6633 64.4102 li
96.3426 64.4102 li
96.3426 57.5978 li
96.3426 56.6647 95.5862 55.9079 94.6529 55.9079 cv
cp
.172549 .247059 .27451 rgb
f
84.0585 39.1962 mo
84.0585 43.3769 li
106.492 43.3769 li
106.492 39.1962 li
84.0585 39.1962 li
cp
.301961 .376471 .403922 rgb
f
87.4147 42.4937 mo
86.7643 42.4937 86.237 41.9664 86.237 41.3161 cv
86.237 40.6656 86.7643 40.1384 87.4147 40.1384 cv
88.065 40.1384 88.5923 40.6656 88.5923 41.3161 cv
88.5923 41.9664 88.065 42.4937 87.4147 42.4937 cv
cp
.172549 .247059 .27451 rgb
f
102.665 42.4937 mo
102.015 42.4937 101.488 41.9664 101.488 41.3161 cv
101.488 40.6656 102.015 40.1384 102.665 40.1384 cv
103.316 40.1384 103.843 40.6656 103.843 41.3161 cv
103.843 41.9664 103.316 42.4937 102.665 42.4937 cv
cp
f
211.59 55.955 mo
206.592 44.4369 li
153.716 44.4369 li
153.716 46.9099 li
137.111 46.9099 li
130.833 55.955 li
211.59 55.955 li
cp
.462745 .560784 .580392 rgb
f
171.773 51.2278 mo
168.397 51.2278 li
167.855 51.2278 167.416 50.7884 167.416 50.2464 cv
167.416 49.7044 167.855 49.2651 168.397 49.2651 cv
171.773 49.2651 li
172.315 49.2651 172.755 49.7044 172.755 50.2464 cv
172.755 50.7884 172.315 51.2278 171.773 51.2278 cv
cp
.172549 .247059 .27451 rgb
f
178.76 51.2278 mo
175.385 51.2278 li
174.843 51.2278 174.403 50.7884 174.403 50.2464 cv
174.403 49.7044 174.843 49.2651 175.385 49.2651 cv
178.76 49.2651 li
179.302 49.2651 179.742 49.7044 179.742 50.2464 cv
179.742 50.7884 179.302 51.2278 178.76 51.2278 cv
cp
f
185.748 51.2278 mo
182.372 51.2278 li
181.83 51.2278 181.391 50.7884 181.391 50.2464 cv
181.391 49.7044 181.83 49.2651 182.372 49.2651 cv
185.748 49.2651 li
186.29 49.2651 186.729 49.7044 186.729 50.2464 cv
186.729 50.7884 186.29 51.2278 185.748 51.2278 cv
cp
f
192.735 51.2278 mo
189.359 51.2278 li
188.817 51.2278 188.378 50.7884 188.378 50.2464 cv
188.378 49.7044 188.817 49.2651 189.359 49.2651 cv
192.735 49.2651 li
193.277 49.2651 193.716 49.7044 193.716 50.2464 cv
193.716 50.7884 193.277 51.2278 192.735 51.2278 cv
cp
f
199.723 51.2278 mo
196.347 51.2278 li
195.805 51.2278 195.365 50.7884 195.365 50.2464 cv
195.365 49.7044 195.805 49.2651 196.347 49.2651 cv
199.723 49.2651 li
200.264 49.2651 200.704 49.7044 200.704 50.2464 cv
200.704 50.7884 200.264 51.2278 199.723 51.2278 cv
cp
f
206.631 49.2651 mo
207.173 49.2651 207.613 49.7044 207.613 50.2464 cv
207.613 50.7884 207.173 51.2278 206.631 51.2278 cv
203.255 51.2278 li
202.713 51.2278 202.274 50.7884 202.274 50.2464 cv
202.274 49.7044 202.713 49.2651 203.255 49.2651 cv
206.631 49.2651 li
cp
f
199.33 46.0461 mo
202.706 46.0461 li
203.248 46.0461 203.687 46.4857 203.687 47.0277 cv
203.687 47.5697 203.248 48.0089 202.706 48.0089 cv
199.33 48.0089 li
198.788 48.0089 198.349 47.5697 198.349 47.0277 cv
198.349 46.4857 198.788 46.0461 199.33 46.0461 cv
cp
f
192.343 46.0461 mo
195.719 46.0461 li
196.26 46.0461 196.7 46.4857 196.7 47.0277 cv
196.7 47.5697 196.26 48.0089 195.719 48.0089 cv
192.343 48.0089 li
191.801 48.0089 191.361 47.5697 191.361 47.0277 cv
191.361 46.4857 191.801 46.0461 192.343 46.0461 cv
cp
f
185.355 46.0461 mo
188.731 46.0461 li
189.273 46.0461 189.713 46.4857 189.713 47.0277 cv
189.713 47.5697 189.273 48.0089 188.731 48.0089 cv
185.355 48.0089 li
184.813 48.0089 184.374 47.5697 184.374 47.0277 cv
184.374 46.4857 184.813 46.0461 185.355 46.0461 cv
cp
f
178.368 46.0461 mo
181.744 46.0461 li
182.286 46.0461 182.725 46.4857 182.725 47.0277 cv
182.725 47.5697 182.286 48.0089 181.744 48.0089 cv
178.368 48.0089 li
177.826 48.0089 177.387 47.5697 177.387 47.0277 cv
177.387 46.4857 177.826 46.0461 178.368 46.0461 cv
cp
f
171.381 46.0461 mo
174.756 46.0461 li
175.298 46.0461 175.738 46.4857 175.738 47.0277 cv
175.738 47.5697 175.298 48.0089 174.756 48.0089 cv
171.381 48.0089 li
170.839 48.0089 170.399 47.5697 170.399 47.0277 cv
170.399 46.4857 170.839 46.0461 171.381 46.0461 cv
cp
f
164.393 46.0461 mo
167.769 46.0461 li
168.311 46.0461 168.751 46.4857 168.751 47.0277 cv
168.751 47.5697 168.311 48.0089 167.769 48.0089 cv
164.393 48.0089 li
163.851 48.0089 163.412 47.5697 163.412 47.0277 cv
163.412 46.4857 163.851 46.0461 164.393 46.0461 cv
cp
f
161.41 49.2651 mo
164.786 49.2651 li
165.328 49.2651 165.767 49.7044 165.767 50.2464 cv
165.767 50.7884 165.328 51.2278 164.786 51.2278 cv
161.41 51.2278 li
160.868 51.2278 160.428 50.7884 160.428 50.2464 cv
160.428 49.7044 160.868 49.2651 161.41 49.2651 cv
cp
f
109.201 58.3329 mo
108.16 58.3329 107.317 59.1766 107.317 60.2172 cv
107.317 60.5667 li
106.369 60.5667 li
105.328 60.5667 104.485 61.4102 104.485 62.4508 cv
104.485 71.3652 li
108.052 71.3652 li
126.159 67.0476 li
128.75 63.0436 li
128.75 58.3329 li
109.201 58.3329 li
cp
.301961 .376471 .403922 rgb
f
151.222 81.4728 mo
157.645 82.0419 li
157.648 73.8475 li
151.697 74.1426 li
151.222 81.4728 li
cp
.152941 .227451 .247059 rgb
f
130.163 56.9198 mo
130.163 62.1014 li
136.029 62.1014 li
136.029 60.4352 li
136.029 58.8767 137.297 57.6088 138.856 57.6088 cv
147.334 57.6088 li
147.298 58.7064 li
147.286 58.7488 li
147.286 69.2833 li
147.286 69.803 147.708 70.2253 148.228 70.2253 cv
167.141 70.2253 li
167.364 70.3578 li
167.894 70.6745 168.253 71.1266 168.446 71.6403 cv
207.887 71.6403 li
207.887 62.1014 li
212.009 62.1014 li
212.009 56.9198 li
130.163 56.9198 li
cp
.294118 .368627 .396078 rgb
f
196.935 65.0455 mo
196.935 66.0861 195.967 66.9298 194.773 66.9298 cv
151.521 66.9298 li
150.327 66.9298 149.359 66.0861 149.359 65.0455 cv
149.359 63.9856 li
149.359 62.945 150.327 62.1014 151.521 62.1014 cv
194.773 62.1014 li
195.967 62.1014 196.935 62.945 196.935 63.9856 cv
196.935 65.0455 li
cp
.172549 .247059 .27451 rgb
f
148.745 33.4539 mo
147.133 32.1377 144.139 31.0705 142.057 31.0705 cv
104.078 31.0705 li
98.9556 32.3071 li
82.1863 32.3071 li
81.9862 38.7841 li
106.787 38.7841 li
106.787 38.7841 106.787 37.6637 106.787 36.2817 cv
106.787 34.8995 108.474 33.7791 110.555 33.7791 cv
139.906 33.7791 li
141.988 33.7791 144.833 35.0063 146.261 36.52 cv
154.431 45.2609 li
162.631 45.2609 li
148.745 33.4539 li
cp
.462745 .560784 .580392 rgb
f
222.075 55.5459 mo
213.206 55.5459 li
213.206 51.2278 li
222.075 51.2278 li
222.075 55.5459 li
cp
.294118 .368627 .396078 rgb
f
221.901 51.7774 mo
221.901 54.9963 li
238.81 54.9963 li
238.81 51.7774 li
221.901 51.7774 li
cp
.172549 .247059 .27451 rgb
f
251.691 55.5459 mo
238.589 55.5459 li
238.589 51.2278 li
251.691 51.2278 li
251.691 55.5459 li
cp
.294118 .368627 .396078 rgb
f
107.435 44.2405 mo
107.435 44.3191 li
83.1162 44.3191 li
83.1162 42.9059 li
78.8405 42.9059 li
78.8405 61.2771 li
80.7831 59.8621 li
83.1209 57.0017 li
84.0703 55.8405 85.7033 54.9657 86.9216 54.9657 cv
94.6526 54.9657 li
96.1043 54.9657 97.2848 56.146 97.2848 57.5978 cv
97.2848 64.4102 li
103.543 64.4102 li
103.543 62.451 li
103.543 60.8925 104.811 59.6247 106.369 59.6247 cv
106.437 59.6247 li
106.711 58.3496 107.846 57.3909 109.201 57.3909 cv
128.721 57.3909 li
129.67 55.9777 li
136.618 45.9677 li
146.768 45.9677 li
146.768 44.2405 li
107.435 44.2405 li
cp
.462745 .560784 .580392 rgb
f
125.413 53.7402 mo
106.178 53.7402 li
106.178 55.4674 li
102.096 55.4674 li
102.096 48.5585 li
106.178 48.5585 li
106.178 50.4428 li
125.413 50.4428 li
125.413 53.7402 li
cp
.152941 .227451 .247059 rgb
f
104.174 71.6121 mo
95.5066 71.6121 li
91.688 69.158 li
91.4534 69.3898 91.1848 69.5832 90.9264 69.7885 cv
95.2298 72.5539 li
104.451 72.5539 li
107.097 68.0748 li
106.917 67.7885 106.756 67.4908 106.609 67.1847 cv
104.174 71.6121 li
cp
.301961 .376471 .403922 rgb
f
94.7161 67.0494 mo
94.7161 66.2146 94.9822 65.4447 95.4279 64.8096 cv
97.5401 64.8096 li
96.9593 65.4871 96.6002 66.3592 96.6002 67.3243 cv
96.6002 68.6342 97.2615 69.7691 98.2501 70.4788 cv
96.783 70.4788 li
95.5582 69.8182 94.7161 68.5388 94.7161 67.0494 cv
cp
.152941 .227451 .247059 rgb
f
82.5838 32.3071 mo
81.8986 32.3071 li
80.8579 32.3071 80.0143 33.1506 80.0143 34.1913 cv
80.0143 37.811 li
80.0143 38.8515 80.8579 39.6952 81.8986 39.6952 cv
82.5838 39.6952 li
82.5838 32.3071 li
cp
.301961 .376471 .403922 rgb
f
83.0142 61.4659 mo
83.4595 64.0818 li
83.6341 65.1077 83.3317 66.6565 82.7838 67.5412 cv
75.5262 79.2615 li
74.9782 80.1461 75.2504 81.309 76.1339 81.8588 cv
82.2846 85.6861 li
86.0759 87.845 84.8316 84.7349 85.2869 83.7993 cv
94.4574 64.9519 li
86.4062 64.9519 li
83.0142 61.4659 li
cp
.607843 .360784 .0901961 rgb
f
165.708 77.2379 mo
165.036 81.2482 li
164.893 81.8508 164.162 82.3227 163.373 82.3227 cv
163.196 82.3144 li
151.602 81.2831 li
157.648 73.8475 li
164.629 75.928 li
165.034 76.0493 165.377 76.2792 165.572 76.5596 cv
165.724 76.7806 165.772 77.0157 165.708 77.2379 cv
cp
166.881 71.1674 mo
154.276 71.1674 li
148.228 71.1674 li
147.187 71.1674 146.344 70.3239 146.344 69.2833 cv
146.344 58.6328 li
146.344 58.6039 146.359 58.5797 146.36 58.551 cv
138.856 58.551 li
137.815 58.551 136.972 59.3947 136.972 60.4352 cv
136.972 69.2833 li
143.172 75.8536 li
138.055 93.4444 li
148.29 93.4444 li
151.264 81.7988 li
163.145 82.8778 li
164.264 82.9796 165.363 82.3144 165.587 81.3786 cv
167.623 72.8339 li
167.794 72.12 167.465 71.5151 166.881 71.1674 cv
cp
.294118 .368627 .396078 rgb
f
166.122 139.277 mo
166.122 141.661 li
255.395 141.661 li
255.395 139.277 li
166.122 139.277 li
cp
.301961 .376471 .403922 rgb
f
123.644 157.471 mo
115.997 165.118 li
114.007 165.118 li
114.007 170.19 li
138.068 170.19 li
138.068 157.471 li
123.644 157.471 li
cp
.172549 .247059 .27451 rgb
f
112.779 162.311 mo
111.637 164.703 111.088 167.145 111.13 169.334 cv
111.798 169.685 li
111.917 167.567 112.507 165.277 113.679 163.044 cv
113.718 162.971 113.761 162.903 113.801 162.831 cv
113.45 162.675 113.105 162.509 112.779 162.311 cv
cp
.109804 .172549 .188235 rgb
f
106.136 158.924 mo
105.801 158.853 105.456 158.808 105.099 158.808 cv
102.215 158.808 99.8778 161.146 99.8778 164.029 cv
99.8778 165.285 100.33 166.428 101.071 167.324 cv
101.71 167.324 li
101.265 166.564 100.985 165.697 100.985 164.751 cv
100.985 161.867 103.322 159.53 106.205 159.53 cv
106.235 159.53 106.261 159.54 106.291 159.54 cv
106.229 159.337 106.184 159.13 106.136 158.924 cv
cp
f
85.6037 153.108 mo
85.6037 163.063 li
98.3228 163.063 li
98.3228 163.063 98.3228 162.336 98.3228 161.438 cv
98.3228 160.541 100.01 159.814 102.091 159.814 cv
108.09 159.814 li
110.171 159.814 111.859 161.089 111.859 162.661 cv
111.859 163.582 li
106.495 168.945 li
95.8554 168.945 li
94.7391 167.829 li
94.527 168.199 94.2731 168.543 94.0065 168.877 cv
95.9517 170.822 li
106.592 170.822 li
111.904 165.509 li
116.274 165.509 li
123.921 157.862 li
139.694 157.862 li
139.694 156.934 li
156.011 156.934 li
159.837 153.108 li
85.6037 153.108 li
cp
.301961 .376471 .403922 rgb
f
103.355 149.948 mo
99.174 149.948 li
99.174 145.12 li
103.355 145.12 li
103.355 149.948 li
cp
.109804 .172549 .188235 rgb
f
141.082 150.397 mo
116.086 150.397 li
116.086 145.818 li
141.082 145.818 li
141.082 150.397 li
cp
.462745 .560784 .580392 rgb
f
78.5077 151.525 mo
78.5077 154.538 li
78.5077 159.768 li
78.5077 162.781 li
85.7754 162.781 li
85.7754 151.525 li
78.5077 151.525 li
cp
.301961 .376471 .403922 rgb
f
262.834 159.92 mo
250.59 160.2 li
250.59 157.249 li
255.458 157.249 li
262.834 159.92 li
cp
f
251.487 157.544 mo
240.338 157.544 li
240.338 155.66 li
251.487 155.66 li
251.487 157.544 li
cp
.109804 .172549 .188235 rgb
f
240.221 164.296 mo
240.221 162.962 li
247.836 162.962 li
247.836 162.962 247.836 163.559 247.836 164.296 cv
247.836 165.034 246.149 165.631 244.068 165.631 cv
243.989 165.631 li
241.908 165.631 240.221 165.034 240.221 164.296 cv
cp
.172549 .247059 .27451 rgb
f
265.802 163.138 mo
250.729 163.138 li
250.729 159.448 li
265.802 159.448 li
265.802 163.138 li
cp
.109804 .172549 .188235 rgb
f
270.237 163.373 mo
265.37 163.373 li
265.37 157.72 li
270.237 157.72 li
270.237 163.373 li
cp
.172549 .247059 .27451 rgb
f
272.76 162.981 mo
270.012 162.981 li
270.012 159.291 li
272.76 159.291 li
272.76 162.981 li
cp
.109804 .172549 .188235 rgb
f
277.087 164.151 mo
272.376 164.151 li
272.376 158.42 li
277.087 158.42 li
277.087 164.151 li
cp
.172549 .247059 .27451 rgb
f
278.289 165.093 mo
276.955 165.093 li
276.955 157.477 li
276.955 157.477 277.552 157.477 278.289 157.477 cv
279.026 157.477 279.624 159.165 279.624 161.246 cv
279.624 161.324 li
279.624 163.406 279.026 165.093 278.289 165.093 cv
cp
.301961 .376471 .403922 rgb
f
253.371 155.723 mo
239.789 155.723 li
237.198 153.76 li
253.371 153.76 li
253.371 155.723 li
cp
.172549 .247059 .27451 rgb
f
296.696 147.714 mo
290.446 147.714 li
290.446 144.057 li
296.696 144.057 li
296.696 147.714 li
cp
.109804 .172549 .188235 rgb
f
132.82 125.403 mo
122.573 125.403 li
122.573 117.864 li
132.82 117.864 li
132.82 125.403 li
cp
.462745 .560784 .580392 rgb
f
148.769 133.232 mo
168.105 135.745 li
168.105 122.45 li
148.769 124.964 li
148.769 133.232 li
cp
.301961 .376471 .403922 rgb
f
105.373 133.232 mo
92.2903 134.174 li
92.2903 124.022 li
105.373 124.964 li
105.373 133.232 li
cp
f
167.913 122.156 mo
167.913 136.039 li
183.225 136.039 li
183.225 122.156 li
167.913 122.156 li
cp
.462745 .560784 .580392 rgb
f
113.049 139.302 mo
108.758 139.302 li
108.758 124.754 li
113.049 124.754 li
113.049 139.302 li
cp
.172549 .247059 .27451 rgb
f
145.593 133.023 mo
112.097 133.023 li
112.097 125.173 li
145.593 125.173 li
145.593 133.023 li
cp
f
109.419 132.644 mo
109.419 133.138 109.019 133.538 108.526 133.538 cv
106.06 133.538 li
105.567 133.538 105.166 133.138 105.166 132.644 cv
105.166 124.816 li
105.166 124.322 105.567 123.922 106.06 123.922 cv
108.526 123.922 li
109.019 123.922 109.419 124.322 109.419 124.816 cv
109.419 132.644 li
cp
.462745 .560784 .580392 rgb
f
133.408 118.682 mo
121.75 118.682 li
121.75 115.065 li
133.408 115.065 li
133.408 118.682 li
cp
f
36.3871 156.732 mo
30.7241 156.732 li
30.7241 154.01 li
36.3871 154.01 li
36.3871 156.732 li
cp
.172549 .247059 .27451 rgb
f
36.8227 164.791 mo
31.1597 164.791 li
31.1597 162.068 li
36.8227 162.068 li
36.8227 164.791 li
cp
f
37.0405 172.632 mo
31.3777 172.632 li
31.3777 169.909 li
37.0405 169.909 li
37.0405 172.632 li
cp
f
49.4337 174.631 mo
37.2495 174.631 li
37.2495 175.794 li
37.702 175.794 li
37.702 176.667 li
38.93 176.667 li
38.93 175.794 li
40.1581 175.794 li
40.1581 176.667 li
41.3863 176.667 li
41.3863 175.794 li
42.6144 175.794 li
42.6144 176.667 li
43.8425 176.667 li
43.8425 175.794 li
45.0707 175.794 li
45.0707 176.667 li
46.2989 176.667 li
46.2989 175.794 li
47.5269 175.794 li
47.5269 176.667 li
48.7551 176.667 li
48.7551 175.794 li
49.4337 175.794 li
49.4337 174.631 li
cp
.109804 .172549 .188235 rgb
f
58.3126 148.316 mo
53.1278 148.316 li
53.1278 146.814 li
54.813 146.854 56.5497 146.856 58.3126 146.807 cv
58.3126 148.316 li
cp
44.6637 146.313 mo
46.2621 146.462 48.0046 146.594 49.8484 146.69 cv
49.8484 148.316 li
44.6637 148.316 li
44.6637 146.313 li
cp
72.2272 145.073 mo
72.2272 143.02 72.2272 140.73 72.2272 140.73 cv
35.269 139.135 li
35.269 145.073 li
35.269 145.073 37.6418 145.52 41.3845 145.965 cv
41.3845 148.316 li
34.4682 148.316 li
34.4682 151.8 li
63.218 151.8 li
62.129 148.316 li
61.5918 148.316 li
61.5918 146.652 li
65.2045 146.412 68.8353 145.926 72.2272 145.073 cv
cp
.462745 .560784 .580392 rgb
f
73.8292 158.701 mo
70.5349 160.938 li
65.8761 160.938 li
62.5818 158.701 li
62.5818 155.538 li
65.8761 153.301 li
70.5349 153.301 li
73.8292 155.538 li
73.8292 158.701 li
cp
48.9106 169.038 mo
48.9106 170.06 48.0817 170.889 47.0591 170.889 cv
46.0369 170.889 45.208 170.06 45.208 169.038 cv
45.208 159.999 li
45.208 158.977 46.0369 158.148 47.0591 158.148 cv
48.0817 158.148 48.9106 158.977 48.9106 159.999 cv
48.9106 169.038 li
cp
40.253 160.979 mo
39.5613 160.979 39.0006 160.419 39.0006 159.727 cv
39.0006 159.035 39.5613 158.475 40.253 158.475 cv
40.9446 158.475 41.5053 159.035 41.5053 159.727 cv
41.5053 160.419 40.9446 160.979 40.253 160.979 cv
cp
40.3619 169.147 mo
39.7905 169.147 39.3274 168.684 39.3274 168.112 cv
39.3274 167.541 39.7905 167.078 40.3619 167.078 cv
40.9332 167.078 41.3963 167.541 41.3963 168.112 cv
41.3963 168.684 40.9332 169.147 40.3619 169.147 cv
cp
78.9618 155.05 mo
78.9618 151.505 li
34.209 151.505 li
36.9315 174.919 li
57.5137 174.919 li
57.5137 163.115 li
78.9618 163.115 li
78.9618 158.595 li
83.1274 158.595 li
83.1274 155.05 li
78.9618 155.05 li
cp
.172549 .247059 .27451 rgb
f
255.395 138.776 mo
108.758 138.776 li
108.758 140.817 li
255.395 140.817 li
255.395 138.776 li
cp
.462745 .560784 .580392 rgb
f
114.847 139.504 mo
113.555 139.504 li
113.555 138.116 li
114.847 138.116 li
114.847 139.504 li
cp
f
117.288 139.504 mo
115.996 139.504 li
115.996 138.116 li
117.288 138.116 li
117.288 139.504 li
cp
f
119.729 139.504 mo
118.437 139.504 li
118.437 138.116 li
119.729 138.116 li
119.729 139.504 li
cp
f
122.169 139.504 mo
120.877 139.504 li
120.877 138.116 li
122.169 138.116 li
122.169 139.504 li
cp
f
124.61 139.504 mo
123.318 139.504 li
123.318 138.116 li
124.61 138.116 li
124.61 139.504 li
cp
f
127.05 139.504 mo
125.758 139.504 li
125.758 138.116 li
127.05 138.116 li
127.05 139.504 li
cp
f
129.491 139.504 mo
128.199 139.504 li
128.199 138.116 li
129.491 138.116 li
129.491 139.504 li
cp
f
131.932 139.504 mo
130.639 139.504 li
130.639 138.116 li
131.932 138.116 li
131.932 139.504 li
cp
f
134.372 139.504 mo
133.08 139.504 li
133.08 138.116 li
134.372 138.116 li
134.372 139.504 li
cp
f
136.813 139.504 mo
135.521 139.504 li
135.521 138.116 li
136.813 138.116 li
136.813 139.504 li
cp
f
139.253 139.504 mo
137.961 139.504 li
137.961 138.116 li
139.253 138.116 li
139.253 139.504 li
cp
f
141.694 139.504 mo
140.402 139.504 li
140.402 138.116 li
141.694 138.116 li
141.694 139.504 li
cp
f
144.135 139.504 mo
142.842 139.504 li
142.842 138.116 li
144.135 138.116 li
144.135 139.504 li
cp
f
146.575 139.504 mo
145.283 139.504 li
145.283 138.116 li
146.575 138.116 li
146.575 139.504 li
cp
f
149.016 139.504 mo
147.724 139.504 li
147.724 138.116 li
149.016 138.116 li
149.016 139.504 li
cp
f
151.456 139.504 mo
150.164 139.504 li
150.164 138.116 li
151.456 138.116 li
151.456 139.504 li
cp
f
153.897 139.504 mo
152.605 139.504 li
152.605 138.116 li
153.897 138.116 li
153.897 139.504 li
cp
f
156.337 139.504 mo
155.045 139.504 li
155.045 138.116 li
156.337 138.116 li
156.337 139.504 li
cp
f
158.778 139.504 mo
157.486 139.504 li
157.486 138.116 li
158.778 138.116 li
158.778 139.504 li
cp
f
161.218 139.504 mo
159.926 139.504 li
159.926 138.116 li
161.218 138.116 li
161.218 139.504 li
cp
f
163.659 139.504 mo
162.367 139.504 li
162.367 138.116 li
163.659 138.116 li
163.659 139.504 li
cp
f
166.1 139.504 mo
164.808 139.504 li
164.808 138.116 li
166.1 138.116 li
166.1 139.504 li
cp
f
168.54 139.504 mo
167.248 139.504 li
167.248 138.116 li
168.54 138.116 li
168.54 139.504 li
cp
f
170.981 139.504 mo
169.689 139.504 li
169.689 138.116 li
170.981 138.116 li
170.981 139.504 li
cp
f
173.421 139.504 mo
172.129 139.504 li
172.129 138.116 li
173.421 138.116 li
173.421 139.504 li
cp
f
175.862 139.504 mo
174.57 139.504 li
174.57 138.116 li
175.862 138.116 li
175.862 139.504 li
cp
f
178.303 139.504 mo
177.01 139.504 li
177.01 138.116 li
178.303 138.116 li
178.303 139.504 li
cp
f
180.743 139.504 mo
179.451 139.504 li
179.451 138.116 li
180.743 138.116 li
180.743 139.504 li
cp
f
183.184 139.504 mo
181.892 139.504 li
181.892 138.116 li
183.184 138.116 li
183.184 139.504 li
cp
f
185.624 139.504 mo
184.332 139.504 li
184.332 138.116 li
185.624 138.116 li
185.624 139.504 li
cp
f
188.065 139.504 mo
186.773 139.504 li
186.773 138.116 li
188.065 138.116 li
188.065 139.504 li
cp
f
190.506 139.504 mo
189.213 139.504 li
189.213 138.116 li
190.506 138.116 li
190.506 139.504 li
cp
f
192.946 139.504 mo
191.654 139.504 li
191.654 138.116 li
192.946 138.116 li
192.946 139.504 li
cp
f
195.387 139.504 mo
194.095 139.504 li
194.095 138.116 li
195.387 138.116 li
195.387 139.504 li
cp
f
197.827 139.504 mo
196.535 139.504 li
196.535 138.116 li
197.827 138.116 li
197.827 139.504 li
cp
f
200.268 139.504 mo
198.976 139.504 li
198.976 138.116 li
200.268 138.116 li
200.268 139.504 li
cp
f
202.708 139.504 mo
201.416 139.504 li
201.416 138.116 li
202.708 138.116 li
202.708 139.504 li
cp
f
205.149 139.504 mo
203.857 139.504 li
203.857 138.116 li
205.149 138.116 li
205.149 139.504 li
cp
f
207.59 139.504 mo
206.297 139.504 li
206.297 138.116 li
207.59 138.116 li
207.59 139.504 li
cp
f
210.03 139.504 mo
208.738 139.504 li
208.738 138.116 li
210.03 138.116 li
210.03 139.504 li
cp
f
212.471 139.504 mo
211.179 139.504 li
211.179 138.116 li
212.471 138.116 li
212.471 139.504 li
cp
f
214.911 139.504 mo
213.619 139.504 li
213.619 138.116 li
214.911 138.116 li
214.911 139.504 li
cp
f
217.352 139.504 mo
216.06 139.504 li
216.06 138.116 li
217.352 138.116 li
217.352 139.504 li
cp
f
219.792 139.504 mo
218.5 139.504 li
218.5 138.116 li
219.792 138.116 li
219.792 139.504 li
cp
f
222.233 139.504 mo
220.941 139.504 li
220.941 138.116 li
222.233 138.116 li
222.233 139.504 li
cp
f
224.673 139.504 mo
223.381 139.504 li
223.381 138.116 li
224.673 138.116 li
224.673 139.504 li
cp
f
227.114 139.504 mo
225.822 139.504 li
225.822 138.116 li
227.114 138.116 li
227.114 139.504 li
cp
f
229.555 139.504 mo
228.263 139.504 li
228.263 138.116 li
229.555 138.116 li
229.555 139.504 li
cp
f
231.995 139.504 mo
230.703 139.504 li
230.703 138.116 li
231.995 138.116 li
231.995 139.504 li
cp
f
234.436 139.504 mo
233.144 139.504 li
233.144 138.116 li
234.436 138.116 li
234.436 139.504 li
cp
f
236.876 139.504 mo
235.584 139.504 li
235.584 138.116 li
236.876 138.116 li
236.876 139.504 li
cp
f
239.317 139.504 mo
238.025 139.504 li
238.025 138.116 li
239.317 138.116 li
239.317 139.504 li
cp
f
241.758 139.504 mo
240.466 139.504 li
240.466 138.116 li
241.758 138.116 li
241.758 139.504 li
cp
f
244.198 139.504 mo
242.906 139.504 li
242.906 138.116 li
244.198 138.116 li
244.198 139.504 li
cp
f
246.639 139.504 mo
245.347 139.504 li
245.347 138.116 li
246.639 138.116 li
246.639 139.504 li
cp
f
249.079 139.504 mo
247.787 139.504 li
247.787 138.116 li
249.079 138.116 li
249.079 139.504 li
cp
f
117.67 152.455 mo
107.905 152.455 li
107.905 143.775 li
117.67 143.775 li
117.67 152.455 li
cp
.172549 .247059 .27451 rgb
f
149.133 152.455 mo
139.369 152.455 li
139.369 143.775 li
149.133 143.775 li
149.133 152.455 li
cp
f
155.173 150.342 mo
105.241 150.342 li
105.241 153.597 li
155.173 153.597 li
155.173 150.342 li
cp
f
111.401 152.455 mo
102.963 152.455 li
102.963 144.378 li
111.401 144.378 li
111.401 152.455 li
cp
f
98.2615 162.453 mo
82.9516 162.453 li
82.9516 162.453 73.9104 177.521 73.0666 186.804 cv
72.7555 190.225 86.5762 190.352 86.8092 186.924 cv
87.1945 181.255 88.9977 180.549 89.3013 180.022 cv
89.4835 179.705 89.5587 179.346 89.4613 178.968 cv
88.5239 175.33 91.8722 173.962 91.8722 172.82 cv
91.8722 172.427 92.4854 169.488 94.7523 169.488 cv
98.2615 169.488 li
98.2615 162.453 li
cp
.607843 .360784 .0901961 rgb
f
109.856 153.481 mo
86.715 153.481 li
95.4294 150.714 li
109.856 150.714 li
109.856 153.481 li
cp
.172549 .247059 .27451 rgb
f
113.181 148.748 mo
113.181 143.102 li
113.181 142.102 113.84 141.292 114.652 141.292 cv
143.242 141.292 li
144.055 141.292 144.714 142.102 144.714 143.102 cv
144.714 148.748 li
149.133 148.748 li
149.133 142.362 li
149.133 141.321 148.29 140.478 147.249 140.478 cv
110.645 140.478 li
109.605 140.478 108.761 141.321 108.761 142.362 cv
108.761 148.748 li
113.181 148.748 li
cp
f
160.435 152.511 mo
161.195 151.751 li
114.184 151.751 li
114.184 151.509 li
97.0193 151.509 li
97.0193 151.611 li
85.6037 151.611 li
85.6037 152.511 li
160.435 152.511 li
cp
f
291.572 148.123 mo
254.773 148.123 li
254.773 143.648 li
291.572 143.648 li
291.572 148.123 li
cp
f
360.304 150.185 mo
360.304 151.226 359.46 152.069 358.419 152.069 cv
297.822 152.069 li
296.782 152.069 295.938 151.226 295.938 149.785 cv
295.938 141.72 li
295.938 141.08 296.782 140.236 297.822 140.236 cv
358.419 140.236 li
359.46 140.236 360.304 141.08 360.304 142.121 cv
360.304 150.185 li
cp
f
255.395 141.434 mo
166.514 141.434 li
166.514 154.004 li
255.395 154.004 li
255.395 141.434 li
cp
.301961 .376471 .403922 rgb
f
231.957 142.564 mo
241.315 142.564 li
241.648 142.564 241.919 142.834 241.919 143.167 cv
241.919 143.501 241.648 143.771 241.315 143.771 cv
231.957 143.771 li
231.624 143.771 231.353 143.501 231.353 143.167 cv
231.353 142.834 231.624 142.564 231.957 142.564 cv
cp
.172549 .247059 .27451 rgb
f
248.993 146.081 mo
249.988 146.081 250.794 146.887 250.794 147.882 cv
250.794 148.876 249.988 149.682 248.993 149.682 cv
241.893 149.682 li
240.898 149.682 240.092 148.876 240.092 147.882 cv
240.092 146.887 240.898 146.081 241.893 146.081 cv
248.993 146.081 li
cp
f
238.24 145.823 mo
238.24 149.837 li
238.24 150.263 237.894 150.609 237.468 150.609 cv
237.041 150.609 236.696 150.263 236.696 149.837 cv
236.696 145.823 li
236.696 145.397 237.041 145.052 237.468 145.052 cv
237.894 145.052 238.24 145.397 238.24 145.823 cv
cp
f
235.77 145.823 mo
235.77 149.837 li
235.77 150.263 235.424 150.609 234.998 150.609 cv
234.572 150.609 234.226 150.263 234.226 149.837 cv
234.226 145.823 li
234.226 145.397 234.572 145.052 234.998 145.052 cv
235.424 145.052 235.77 145.397 235.77 145.823 cv
cp
f
233.3 145.823 mo
233.3 149.837 li
233.3 150.263 232.954 150.609 232.528 150.609 cv
232.102 150.609 231.756 150.263 231.756 149.837 cv
231.756 145.823 li
231.756 145.397 232.102 145.052 232.528 145.052 cv
232.954 145.052 233.3 145.397 233.3 145.823 cv
cp
f
219.581 142.564 mo
228.938 142.564 li
229.272 142.564 229.542 142.834 229.542 143.167 cv
229.542 143.501 229.272 143.771 228.938 143.771 cv
219.581 143.771 li
219.247 143.771 218.977 143.501 218.977 143.167 cv
218.977 142.834 219.247 142.564 219.581 142.564 cv
cp
f
228.361 145.823 mo
228.361 149.837 li
228.361 150.263 228.015 150.609 227.589 150.609 cv
227.162 150.609 226.817 150.263 226.817 149.837 cv
226.817 145.823 li
226.817 145.397 227.162 145.052 227.589 145.052 cv
228.015 145.052 228.361 145.397 228.361 145.823 cv
cp
f
225.891 145.823 mo
225.891 149.837 li
225.891 150.263 225.545 150.609 225.119 150.609 cv
224.693 150.609 224.347 150.263 224.347 149.837 cv
224.347 145.823 li
224.347 145.397 224.693 145.052 225.119 145.052 cv
225.545 145.052 225.891 145.397 225.891 145.823 cv
cp
f
223.421 145.823 mo
223.421 149.837 li
223.421 150.263 223.076 150.609 222.649 150.609 cv
222.223 150.609 221.877 150.263 221.877 149.837 cv
221.877 145.823 li
221.877 145.397 222.223 145.052 222.649 145.052 cv
223.076 145.052 223.421 145.397 223.421 145.823 cv
cp
f
220.951 145.823 mo
220.951 149.837 li
220.951 150.263 220.606 150.609 220.18 150.609 cv
219.753 150.609 219.408 150.263 219.408 149.837 cv
219.408 145.823 li
219.408 145.397 219.753 145.052 220.18 145.052 cv
220.606 145.052 220.951 145.397 220.951 145.823 cv
cp
f
207.204 142.564 mo
216.562 142.564 li
216.895 142.564 217.166 142.834 217.166 143.167 cv
217.166 143.501 216.895 143.771 216.562 143.771 cv
207.204 143.771 li
206.871 143.771 206.6 143.501 206.6 143.167 cv
206.6 142.834 206.871 142.564 207.204 142.564 cv
cp
f
216.012 145.823 mo
216.012 149.837 li
216.012 150.263 215.666 150.609 215.24 150.609 cv
214.814 150.609 214.468 150.263 214.468 149.837 cv
214.468 145.823 li
214.468 145.397 214.814 145.052 215.24 145.052 cv
215.666 145.052 216.012 145.397 216.012 145.823 cv
cp
f
212.204 147.882 mo
212.204 148.876 211.398 149.682 210.403 149.682 cv
203.303 149.682 li
202.308 149.682 201.502 148.876 201.502 147.882 cv
201.502 146.887 202.308 146.081 203.303 146.081 cv
210.403 146.081 li
211.398 146.081 212.204 146.887 212.204 147.882 cv
cp
f
194.827 142.564 mo
204.185 142.564 li
204.519 142.564 204.789 142.834 204.789 143.167 cv
204.789 143.501 204.519 143.771 204.185 143.771 cv
194.827 143.771 li
194.494 143.771 194.224 143.501 194.224 143.167 cv
194.224 142.834 194.494 142.564 194.827 142.564 cv
cp
f
199.65 147.882 mo
199.65 148.876 198.843 149.682 197.849 149.682 cv
190.748 149.682 li
189.754 149.682 188.948 148.876 188.948 147.882 cv
188.948 146.887 189.754 146.081 190.748 146.081 cv
197.849 146.081 li
198.843 146.081 199.65 146.887 199.65 147.882 cv
cp
f
182.451 142.564 mo
191.809 142.564 li
192.142 142.564 192.413 142.834 192.413 143.167 cv
192.413 143.501 192.142 143.771 191.809 143.771 cv
182.451 143.771 li
182.117 143.771 181.847 143.501 181.847 143.167 cv
181.847 142.834 182.117 142.564 182.451 142.564 cv
cp
f
176.393 147.882 mo
176.393 146.887 177.199 146.081 178.194 146.081 cv
185.294 146.081 li
186.289 146.081 187.095 146.887 187.095 147.882 cv
187.095 148.876 186.289 149.682 185.294 149.682 cv
178.194 149.682 li
177.199 149.682 176.393 148.876 176.393 147.882 cv
cp
f
191.809 153.078 mo
182.451 153.078 li
182.117 153.078 181.847 152.808 181.847 152.475 cv
181.847 152.141 182.117 151.871 182.451 151.871 cv
191.809 151.871 li
192.142 151.871 192.413 152.141 192.413 152.475 cv
192.413 152.808 192.142 153.078 191.809 153.078 cv
cp
f
204.185 153.078 mo
194.827 153.078 li
194.494 153.078 194.224 152.808 194.224 152.475 cv
194.224 152.141 194.494 151.871 194.827 151.871 cv
204.185 151.871 li
204.519 151.871 204.789 152.141 204.789 152.475 cv
204.789 152.808 204.519 153.078 204.185 153.078 cv
cp
f
216.562 153.078 mo
207.204 153.078 li
206.871 153.078 206.6 152.808 206.6 152.475 cv
206.6 152.141 206.871 151.871 207.204 151.871 cv
216.562 151.871 li
216.895 151.871 217.166 152.141 217.166 152.475 cv
217.166 152.808 216.895 153.078 216.562 153.078 cv
cp
f
218.482 149.837 mo
218.482 150.263 218.136 150.609 217.71 150.609 cv
217.283 150.609 216.938 150.263 216.938 149.837 cv
216.938 145.823 li
216.938 145.397 217.283 145.052 217.71 145.052 cv
218.136 145.052 218.482 145.397 218.482 145.823 cv
218.482 149.837 li
cp
f
228.938 153.078 mo
219.581 153.078 li
219.247 153.078 218.977 152.808 218.977 152.475 cv
218.977 152.141 219.247 151.871 219.581 151.871 cv
228.938 151.871 li
229.272 151.871 229.542 152.141 229.542 152.475 cv
229.542 152.808 229.272 153.078 228.938 153.078 cv
cp
f
230.83 149.837 mo
230.83 150.263 230.485 150.609 230.058 150.609 cv
229.632 150.609 229.287 150.263 229.287 149.837 cv
229.287 145.823 li
229.287 145.397 229.632 145.052 230.058 145.052 cv
230.485 145.052 230.83 145.397 230.83 145.823 cv
230.83 149.837 li
cp
f
241.315 153.078 mo
231.957 153.078 li
231.624 153.078 231.353 152.808 231.353 152.475 cv
231.353 152.141 231.624 151.871 231.957 151.871 cv
241.315 151.871 li
241.648 151.871 241.919 152.141 241.919 152.475 cv
241.919 152.808 241.648 153.078 241.315 153.078 cv
cp
f
253.692 153.078 mo
244.334 153.078 li
244 153.078 243.73 152.808 243.73 152.475 cv
243.73 152.141 244 151.871 244.334 151.871 cv
253.692 151.871 li
254.025 151.871 254.295 152.141 254.295 152.475 cv
254.295 152.808 254.025 153.078 253.692 153.078 cv
cp
f
253.692 143.771 mo
244.334 143.771 li
244 143.771 243.73 143.501 243.73 143.167 cv
243.73 142.834 244 142.564 244.334 142.564 cv
253.692 142.564 li
254.025 142.564 254.295 142.834 254.295 143.167 cv
254.295 143.501 254.025 143.771 253.692 143.771 cv
cp
f
92.8938 134.697 mo
85.8013 134.697 li
85.8013 123.498 li
92.8938 123.498 li
92.8938 134.697 li
cp
.462745 .560784 .580392 rgb
f
151.57 120.834 mo
151.57 120.102 li
149.897 120.102 li
149.897 120.834 li
148.641 120.834 li
148.641 120.102 li
145.396 120.102 li
145.396 120.834 li
144.141 120.834 li
144.141 120.102 li
140.896 120.102 li
140.896 120.834 li
139.849 120.834 li
139.849 123.765 li
144.873 123.765 li
144.873 139.504 li
149.164 139.504 li
149.164 123.765 li
152.503 123.765 li
152.503 120.834 li
151.57 120.834 li
cp
f
18.963 143.773 mo
16.5671 143.773 18.963 176.77 18.963 176.77 cv
18.963 176.77 32.1399 175.79 32.1399 173.067 cv
32.1399 170.345 32.1399 156.732 32.1399 154.881 cv
32.1399 153.03 31.0509 143.337 29.7441 143.337 cv
28.4372 143.337 20.0519 143.773 18.963 143.773 cv
cp
.301961 .376471 .403922 rgb
f
251.565 163.452 mo
235.863 163.452 li
235.863 157.249 li
251.565 157.249 li
251.565 163.452 li
cp
f
236.302 164.737 mo
233.083 164.737 li
233.083 156.258 li
236.302 156.258 li
236.302 164.737 li
cp
.172549 .247059 .27451 rgb
f
164.65 141.802 mo
158.215 141.802 li
157.778 141.802 157.423 141.637 157.423 141.434 cv
157.423 141.231 157.778 141.066 158.215 141.066 cv
164.65 141.066 li
165.088 141.066 165.443 141.231 165.443 141.434 cv
165.443 141.637 165.088 141.802 164.65 141.802 cv
cp
164.65 144.786 mo
158.215 144.786 li
157.778 144.786 157.423 144.432 157.423 143.994 cv
157.423 143.556 157.778 143.201 158.215 143.201 cv
164.65 143.201 li
165.088 143.201 165.443 143.556 165.443 143.994 cv
165.443 144.432 165.088 144.786 164.65 144.786 cv
cp
164.65 148.33 mo
158.215 148.33 li
157.778 148.33 157.423 147.975 157.423 147.538 cv
157.423 147.1 157.778 146.745 158.215 146.745 cv
164.65 146.745 li
165.088 146.745 165.443 147.1 165.443 147.538 cv
165.443 147.975 165.088 148.33 164.65 148.33 cv
cp
152.201 140.31 mo
152.201 155.045 li
167.028 155.045 li
167.028 140.31 li
152.201 140.31 li
cp
f
213.445 316.006 mo
213.445 311.324 li
210.478 314.058 li
211.596 339.182 li
211.596 339.182 213.941 343.871 214.722 343.425 cv
215.298 343.096 216.961 325.354 217.799 316.006 cv
213.445 316.006 li
cp
.301961 .376471 .403922 rgb
f
283.084 312.915 mo
283.084 320.241 li
283.084 322.527 281.231 324.38 278.946 324.38 cv
268.954 324.379 li
268.954 325.322 li
278.946 325.322 li
281.747 325.322 284.026 323.042 284.026 320.242 cv
284.026 312.915 li
283.084 312.915 li
cp
.109804 .172549 .188235 rgb
f
272.473 312.615 mo
272.095 313.495 271.859 314.446 271.859 315.468 cv
271.859 317.754 272.889 319.773 274.485 321.163 cv
276.387 321.163 li
275.128 319.806 274.357 317.992 274.357 315.994 cv
274.357 314.768 274.681 313.633 275.204 312.615 cv
272.473 312.615 li
cp
f
350.436 307.181 mo
331.565 307.181 li
331.565 301.933 li
350.436 301.933 li
350.436 307.181 li
cp
f
331.583 309.302 mo
324.884 309.302 li
324.884 299.811 li
331.583 299.811 li
331.583 309.302 li
cp
.152941 .227451 .247059 rgb
f
260.054 343.446 mo
258.725 342.682 li
258.725 357.019 li
269.891 357.019 li
269.891 343.446 li
260.054 343.446 li
cp
.607843 .360784 .0901961 rgb
f
298.588 295.179 mo
292.781 295.179 li
292.781 293.057 li
298.588 293.057 li
298.588 295.179 li
cp
.462745 .560784 .580392 rgb
f
323.153 296.745 mo
323.153 294.065 li
323.153 291.783 321.303 289.934 319.021 289.934 cv
316.74 289.934 314.89 291.783 314.89 294.065 cv
314.89 296.745 li
323.153 296.745 li
cp
f
325.051 311.125 mo
323.823 311.125 li
323.823 297.502 li
325.051 297.502 li
325.051 311.125 li
cp
.152941 .227451 .247059 rgb
f
289.23 303.616 mo
280.114 303.616 li
280.114 312.53 li
324.251 312.53 li
324.251 299.597 li
293.743 299.597 li
293.482 301.857 291.557 303.616 289.23 303.616 cv
cp
.607843 .360784 .0901961 rgb
f
227.572 315.722 mo
227.572 315.722 223.308 318.406 220.76 321.07 cv
218.304 323.638 218.527 321.74 218.527 315.933 cv
217.996 315.933 217.377 315.933 216.768 315.933 cv
216.736 316.291 li
216.193 322.346 215.746 327.081 215.374 330.79 cv
217.075 333.576 224.12 318.814 234.021 315.722 cv
230.698 315.722 227.572 315.722 227.572 315.722 cv
cp
.109804 .172549 .188235 rgb
f
253.14 320.357 mo
252.337 320.357 li
251.688 320.357 251.163 320.883 251.163 321.531 cv
251.163 327.469 li
251.163 328.118 251.688 328.644 252.337 328.644 cv
253.14 328.644 li
253.14 320.357 li
cp
.301961 .376471 .403922 rgb
f
325.051 296.126 mo
304.841 296.126 li
304.841 294.898 li
256.268 294.898 li
252.734 296.126 li
231.145 296.126 li
231.145 294.061 li
231.145 290.823 228.52 288.198 225.283 288.198 cv
222.045 288.198 219.42 290.823 219.42 294.061 cv
219.42 296.126 li
218.415 296.126 li
218.415 309.749 li
249.568 309.749 li
249.568 313.217 li
287.31 313.217 li
287.31 304.948 li
295.852 304.948 li
297.424 304.948 298.699 303.673 298.699 302.1 cv
298.699 301.928 298.678 301.761 298.649 301.598 cv
325.051 301.598 li
325.051 296.126 li
cp
f
225.283 293.558 mo
224.419 293.558 223.719 292.858 223.719 291.995 cv
223.719 291.131 224.419 290.432 225.283 290.432 cv
226.146 290.432 226.846 291.131 226.846 291.995 cv
226.846 292.858 226.146 293.558 225.283 293.558 cv
cp
.152941 .227451 .247059 rgb
f
246.721 306.287 mo
231.089 306.287 li
230.811 306.287 230.586 306.062 230.586 305.785 cv
230.586 305.507 230.811 305.282 231.089 305.282 cv
246.721 305.282 li
246.999 305.282 247.224 305.507 247.224 305.785 cv
247.224 306.062 246.999 306.287 246.721 306.287 cv
cp
f
246.721 302.714 mo
231.089 302.714 li
230.811 302.714 230.586 302.489 230.586 302.212 cv
230.586 301.934 230.811 301.709 231.089 301.709 cv
246.721 301.709 li
246.999 301.709 247.224 301.934 247.224 302.212 cv
247.224 302.489 246.999 302.714 246.721 302.714 cv
cp
f
269.856 312.916 mo
250.09 312.916 li
250.372 313.168 250.821 313.569 251.355 314.046 cv
252.219 314.817 252.919 317.129 252.919 319.21 cv
252.919 339.56 li
260.305 343.803 li
269.856 343.803 li
269.856 312.916 li
cp
f
292.055 303.608 mo
290.791 303.608 289.766 302.583 289.766 301.319 cv
289.766 300.054 290.791 299.029 292.055 299.029 cv
293.32 299.029 294.345 300.054 294.345 301.319 cv
294.345 302.583 293.32 303.608 292.055 303.608 cv
cp
.172549 .247059 .27451 rgb
f
292.055 300.369 mo
291.531 300.369 291.106 300.794 291.106 301.319 cv
291.106 301.843 291.531 302.268 292.055 302.268 cv
292.58 302.268 293.005 301.843 293.005 301.319 cv
293.005 300.794 292.58 300.369 292.055 300.369 cv
cp
.152941 .227451 .247059 rgb
f
218.754 309.631 mo
218.754 307.273 li
218.754 305.791 217.552 304.59 216.07 304.59 cv
214.588 304.59 213.386 305.791 213.386 307.273 cv
213.386 309.363 li
213.386 316.43 li
215.355 316.43 217.054 316.43 218.754 316.43 cv
243.2 316.43 li
248.746 316.43 249.734 313.477 249.734 309.631 cv
218.754 309.631 li
cp
f
216.178 306.715 mo
216.795 306.715 217.295 307.215 217.295 307.832 cv
217.295 308.448 216.795 308.948 216.178 308.948 cv
215.561 308.948 215.061 308.448 215.061 307.832 cv
215.061 307.215 215.561 306.715 216.178 306.715 cv
cp
.109804 .172549 .188235 rgb
f
216.066 315.425 mo
215.265 315.425 214.615 314.775 214.615 313.973 cv
214.615 313.171 215.265 312.521 216.066 312.521 cv
216.868 312.521 217.518 313.171 217.518 313.973 cv
217.518 314.775 216.868 315.425 216.066 315.425 cv
cp
f
240.911 312.856 mo
222.375 312.856 li
221.851 312.856 221.426 312.431 221.426 311.907 cv
221.426 311.383 221.851 310.958 222.375 310.958 cv
240.911 310.958 li
241.435 310.958 241.86 311.383 241.86 311.907 cv
241.86 312.431 241.435 312.856 240.911 312.856 cv
cp
f
245.433 313.973 mo
244.693 313.973 244.093 313.373 244.093 312.633 cv
244.093 311.893 244.693 311.293 245.433 311.293 cv
246.173 311.293 246.773 311.893 246.773 312.633 cv
246.773 313.373 246.173 313.973 245.433 313.973 cv
cp
f
319.671 66.3653 mo
319.671 56.975 312.059 49.3627 302.669 49.3627 cv
302.669 49.3627 li
293.278 49.3627 285.666 56.975 285.666 66.3653 cv
285.666 84.3681 li
285.666 93.7584 293.278 101.371 302.669 101.371 cv
302.669 101.371 li
312.059 101.371 319.671 93.7584 319.671 84.3681 cv
319.671 66.3653 li
cp
.482353 .478431 .215686 rgb
f
319.671 75.5667 mo
319.671 66.3653 li
319.671 56.975 312.059 49.3627 302.669 49.3627 cv
293.278 49.3627 285.666 56.975 285.666 66.3653 cv
285.666 75.5667 li
319.671 75.5667 li
cp
.792157 .796078 .427451 rgb
f
307.45 48.6934 mo
306.094 48.6934 li
306.111 47.9985 li
306.111 34.7425 li
306.111 32.7145 304.467 31.0705 302.439 31.0705 cv
300.411 31.0705 298.767 32.7145 298.767 34.7425 cv
298.767 48.4534 li
297.566 48.4534 li
297.566 49.9548 li
289.927 60.3237 li
289.927 82.225 li
289.927 83.8474 290.946 85.1626 292.204 85.1626 cv
293.461 85.1626 294.481 83.8474 294.481 82.225 cv
294.481 60.3237 li
301.876 50.2859 li
307.45 50.2859 li
307.45 48.6934 li
cp
.462745 .560784 .580392 rgb
f
298.767 35.2305 mo
298.767 48.4454 li
306.1 48.4454 li
306.111 47.9985 li
306.111 35.2305 li
298.767 35.2305 li
cp
.301961 .376471 .403922 rgb
f
312.861 63.1612 mo
308.134 63.1612 304.288 59.3156 304.288 54.5888 cv
304.288 49.8616 308.134 46.0161 312.861 46.0161 cv
317.587 46.0161 321.433 49.8616 321.433 54.5888 cv
321.433 59.3156 317.587 63.1612 312.861 63.1612 cv
cp
312.861 45.1347 mo
307.64 45.1347 303.407 49.3674 303.407 54.5887 cv
303.407 59.8099 307.64 64.0426 312.861 64.0426 cv
318.082 64.0426 322.315 59.8099 322.315 54.5887 cv
322.315 49.3674 318.082 45.1347 312.861 45.1347 cv
cp
f
307.692 46.5976 mo
300.775 46.5976 li
300.775 48.4534 li
307.692 48.4534 li
308.353 48.4534 308.889 48.0379 308.889 47.5255 cv
308.889 47.0131 308.353 46.5976 307.692 46.5976 cv
cp
f
321.387 76.4716 mo
284.312 76.4716 li
284.312 74.4441 li
321.387 74.4441 li
321.387 76.4716 li
cp
.65098 .65098 .27451 rgb
f
289.927 60.3237 mo
289.927 82.225 li
289.927 83.8474 290.946 85.1626 292.204 85.1626 cv
293.461 85.1626 294.481 83.8474 294.481 82.225 cv
294.481 60.3237 li
289.927 60.3237 li
cp
.301961 .376471 .403922 rgb
f
415.944 311.606 mo
415.806 323.394 406.211 332.91 394.39 332.91 cv
382.568 332.91 372.974 323.394 372.836 311.606 cv
415.944 311.606 li
cp
.482353 .478431 .215686 rgb
f
404.149 291.062 mo
384.63 291.062 li
377.703 294.588 372.933 301.744 372.836 310.028 cv
415.944 310.028 li
415.847 301.744 411.077 294.588 404.149 291.062 cv
cp
.792157 .796078 .427451 rgb
f
419.244 309.86 mo
412.38 288.095 li
411.886 288.494 411.293 288.786 410.629 288.921 cv
410.552 288.936 li
417.34 310.461 li
417.506 310.987 418.066 311.278 418.592 311.113 cv
419.118 310.947 419.41 310.386 419.244 309.86 cv
cp
.219608 .219608 .219608 rgb
f
411.556 273.763 mo
406.779 268.987 li
405.777 267.984 403.815 267.172 402.398 267.172 cv
395.686 267.172 li
394.268 267.172 392.307 267.984 391.305 268.987 cv
390.182 270.11 li
390.688 270.055 404.594 291.381 404.594 291.381 cv
411.733 291.381 li
412.316 291.381 412.847 291.18 413.277 290.853 cv
413.277 278.038 li
413.277 276.666 412.514 274.791 411.556 273.763 cv
cp
f
419.708 270.366 mo
413.744 270.366 408.867 275.052 408.532 280.934 cv
409.559 280.934 li
409.89 275.611 414.301 271.392 419.708 271.392 cv
425.331 271.392 429.889 275.951 429.889 281.574 cv
429.889 287.197 425.331 291.755 419.708 291.755 cv
414.409 291.755 410.059 287.706 409.575 282.534 cv
408.549 282.534 li
409.038 288.265 413.852 292.781 419.708 292.781 cv
425.888 292.781 430.916 287.754 430.916 281.574 cv
430.916 275.394 425.888 270.366 419.708 270.366 cv
cp
.772549 .780392 .768627 rgb
f
416.944 311.9 mo
371.835 311.9 li
371.835 309.733 li
416.944 309.733 li
416.944 311.9 li
cp
.65098 .65098 .27451 rgb
f
406.476 278.545 mo
382.728 278.545 li
381.99 282.238 li
381.99 291.696 li
407.143 291.696 li
407.143 281.849 li
406.476 278.545 li
cp
.505882 .509804 .517647 rgb
f
394.566 268.824 mo
387.62 268.824 381.989 274.455 381.989 281.401 cv
381.989 291.696 li
382.979 291.696 li
382.979 280.34 li
382.979 280.021 383.237 279.762 383.556 279.762 cv
383.875 279.762 384.133 280.021 384.133 280.34 cv
384.133 291.696 li
385.545 291.696 li
385.545 280.34 li
385.545 280.021 385.803 279.762 386.122 279.762 cv
386.441 279.762 386.7 280.021 386.7 280.34 cv
386.7 291.696 li
387.855 291.696 li
387.855 280.34 li
387.855 280.021 388.113 279.762 388.432 279.762 cv
388.751 279.762 389.009 280.021 389.009 280.34 cv
389.009 291.696 li
390.036 291.696 li
390.036 280.34 li
390.036 280.021 390.295 279.762 390.613 279.762 cv
390.932 279.762 391.191 280.021 391.191 280.34 cv
391.191 291.696 li
392.217 291.696 li
392.217 280.34 li
392.217 280.021 392.476 279.762 392.795 279.762 cv
393.114 279.762 393.372 280.021 393.372 280.34 cv
393.372 291.696 li
394.399 291.696 li
394.399 280.34 li
394.399 280.021 394.657 279.762 394.976 279.762 cv
395.295 279.762 395.554 280.021 395.554 280.34 cv
395.554 291.696 li
396.58 291.696 li
396.58 280.34 li
396.58 280.021 396.839 279.762 397.158 279.762 cv
397.477 279.762 397.735 280.021 397.735 280.34 cv
397.735 291.696 li
398.762 291.696 li
398.762 280.34 li
398.762 280.021 399.02 279.762 399.339 279.762 cv
399.658 279.762 399.917 280.021 399.917 280.34 cv
399.917 291.696 li
400.943 291.696 li
400.943 280.34 li
400.943 280.021 401.202 279.762 401.521 279.762 cv
401.839 279.762 402.098 280.021 402.098 280.34 cv
402.098 291.696 li
403.509 291.696 li
403.509 280.34 li
403.509 280.021 403.768 279.762 404.087 279.762 cv
404.406 279.762 404.664 280.021 404.664 280.34 cv
404.664 291.696 li
405.702 291.696 li
405.702 280.34 li
405.702 280.021 405.901 279.762 406.146 279.762 cv
406.391 279.762 406.589 280.021 406.589 280.34 cv
406.589 291.696 li
407.143 291.696 li
407.143 281.401 li
407.143 274.455 401.512 268.824 394.566 268.824 cv
cp
.772549 .780392 .768627 rgb
f
407.726 292.002 mo
381.478 292.002 li
381.478 291.378 li
407.726 291.378 li
407.726 292.002 li
cp
f
146.614 292.24 mo
146.614 292.24 146.614 292.24 147.123 292.749 cv
149.737 291.006 156.937 293.282 159.759 295 cv
160.035 294.521 li
151.548 289.038 146.614 292.24 146.614 292.24 cv
cp
.733333 .541176 .372549 rgb
f
132.632 260.102 mo
132.632 265.933 213.094 266.257 213.094 260.102 cv
213.094 259.566 213.135 259.03 213.135 258.489 cv
213.135 251.562 211.385 245.044 208.304 239.351 cv
208.34 238.698 208.362 238.04 208.362 237.378 cv
208.362 217.773 192.468 201.879 172.863 201.879 cv
153.258 201.879 137.365 217.773 137.365 237.378 cv
137.365 238.04 137.386 238.697 137.422 239.351 cv
134.341 245.044 132.591 251.562 132.591 258.489 cv
132.591 259.03 132.632 259.566 132.632 260.102 cv
cp
.376471 .364706 .141176 rgb
f
172.637 299.541 mo
164.067 299.541 134.859 281.722 134.859 259.819 cv
134.859 237.916 151.806 220.097 172.637 220.097 cv
193.468 220.097 210.416 237.916 210.416 259.819 cv
210.416 281.722 181.208 299.541 172.637 299.541 cv
cp
172.637 218.153 mo
150.699 218.153 132.915 236.808 132.915 259.819 cv
132.915 282.83 163.612 301.485 172.637 301.485 cv
181.663 301.485 212.36 282.83 212.36 259.819 cv
212.36 236.808 194.575 218.153 172.637 218.153 cv
cp
.733333 .541176 .372549 rgb
f
208.304 239.351 mo
208.34 238.698 208.362 238.04 208.362 237.378 cv
208.362 217.773 192.468 201.879 172.863 201.879 cv
153.258 201.879 137.365 217.773 137.365 237.378 cv
137.365 238.04 137.386 238.697 137.422 239.351 cv
134.341 245.044 132.591 251.562 132.591 258.489 cv
132.591 259.03 132.611 259.566 132.632 260.102 cv
134.023 261.11 li
139.609 240.234 156.178 243.26 172.863 243.26 cv
189.523 243.26 206.324 241.342 211.785 261.383 cv
213.094 260.102 li
213.116 259.566 213.135 259.03 213.135 258.489 cv
213.135 251.562 211.385 245.044 208.304 239.351 cv
cp
.607843 .623529 .282353 rgb
f
172.863 237.745 mo
159.347 237.745 145.819 234.799 138.896 247.078 cv
146.63 238.019 159.753 240.502 172.863 240.502 cv
186.006 240.502 199.265 238.521 206.961 247.519 cv
200.119 235.387 186.426 237.745 172.863 237.745 cv
cp
.792157 .796078 .427451 rgb
f
143.682 230.147 mo
138.07 224.103 152.493 207.409 159.03 208.262 cv
165.568 209.114 173.81 204.567 176.937 205.703 cv
180.063 206.84 173.526 214.515 163.294 217.641 cv
153.062 220.768 151.072 238.105 143.682 230.147 cv
cp
.454902 .380392 .313726 rgb
f
186.478 222.163 mo
189.07 220.986 192.128 220.535 194.605 220.616 cv
196.99 220.694 200.182 221.379 202.156 222.82 cv
206.9 226.281 204.875 239.791 197.428 235.266 cv
194.142 233.269 193.828 232.073 189.714 232.534 cv
186.256 232.921 179.654 232.844 181.315 227.454 cv
182.083 224.965 184.081 223.253 186.478 222.163 cv
cp
f
175.386 226.331 mo
175.373 226.424 175.361 226.514 175.35 226.601 cv
174.76 231.186 173.484 232.976 168.329 232.978 cv
166.518 232.979 158.747 234.544 159.191 230.412 cv
159.337 229.06 164.141 226.665 165.221 225.669 cv
167.381 223.677 169.352 221.324 172.19 220.281 cv
176.843 218.572 175.775 223.559 175.386 226.331 cv
cp
.733333 .541176 .372549 rgb
f
190.215 214.747 mo
188.158 213.738 186.265 212.43 185.055 211.211 cv
183.564 209.708 182.08 207.412 184.601 206.244 cv
188.008 204.666 197.679 212.838 197.074 216.461 cv
195.078 216.647 192.542 215.889 190.215 214.747 cv
cp
f
161.896 298.446 mo
153.402 293.199 li
154.819 290.905 li
163.313 296.152 li
161.896 298.446 li
cp
.454902 .380392 .313726 rgb
f
327.172 256.695 mo
255.349 256.695 li
255.349 245.753 li
327.172 245.753 li
327.172 256.695 li
cp
.482353 .478431 .215686 rgb
f
274.067 265.298 mo
277.718 266.27 282.112 264.73 283.992 262.055 cv
286.452 258.558 289.655 252.612 291.218 252.612 cv
292.78 252.612 295.978 258.55 298.431 262.044 cv
300.217 264.587 304.541 266.308 308.342 265.299 cv
315.868 263.301 323.072 259.001 323.072 258.791 cv
324.165 256.867 li
323.756 257.075 321.995 258.571 321.479 258.571 cv
321.479 258.571 314.966 260.744 307.716 262.742 cv
304.197 263.712 299.977 262.162 298.167 259.487 cv
295.803 255.993 292.722 251.404 291.218 251.404 cv
289.711 251.404 286.625 256.001 284.256 259.498 cv
282.444 262.173 278.211 263.714 274.694 262.741 cv
267.461 260.741 260.956 258.571 260.956 258.571 cv
260.426 258.571 259.334 257.755 258.918 257.536 cv
259.519 258.894 li
259.519 259.103 266.56 263.298 274.067 265.298 cv
cp
.109804 .172549 .188235 rgb
f
291.218 240.343 mo
298.118 240.343 317.165 243.711 320.851 244.374 cv
317.702 238.07 311.205 233.73 303.679 233.73 cv
278.722 233.73 li
271.193 233.73 264.694 238.073 261.547 244.381 cv
265.148 243.732 284.296 240.343 291.218 240.343 cv
cp
.792157 .796078 .427451 rgb
f
291.216 240.343 mo
297.413 240.343 314.522 243.472 317.832 243.896 cv
315.004 239.869 309.168 237.097 302.408 237.097 cv
279.992 237.097 li
273.23 237.097 267.392 239.871 264.565 243.9 cv
267.8 243.486 284.999 240.343 291.216 240.343 cv
cp
.109804 .172549 .188235 rgb
f
322.822 256.867 mo
322.822 257.44 322.207 257.925 321.479 257.925 cv
321.244 257.925 li
321.023 258.005 li
320.958 258.028 314.46 260.367 307.332 262.492 cv
306.757 262.663 306.141 262.75 305.501 262.75 cv
303.034 262.75 300.486 261.433 299.306 259.546 cv
294.457 251.794 292.553 250.726 291.218 250.726 cv
289.884 250.726 287.981 251.796 283.117 259.558 cv
281.94 261.438 279.391 262.751 276.921 262.751 cv
276.277 262.751 275.657 262.664 275.079 262.491 cv
267.967 260.364 261.476 258.028 261.411 258.005 cv
261.19 257.925 li
260.956 257.925 li
260.228 257.925 259.613 257.44 259.613 256.867 cv
259.613 245.961 li
259.613 245.387 260.228 244.903 260.956 244.903 cv
261.078 244.903 li
261.198 244.88 li
261.423 244.84 283.773 240.758 291.218 240.758 cv
298.663 240.758 321.012 244.84 321.237 244.88 cv
321.357 244.903 li
321.479 244.903 li
322.207 244.903 322.822 245.387 322.822 245.961 cv
322.822 256.867 li
cp
321.479 243.56 mo
321.479 243.56 298.871 239.414 291.217 239.414 cv
283.564 239.414 260.956 243.56 260.956 243.56 cv
259.472 243.56 258.27 244.635 258.27 245.961 cv
258.27 256.867 li
258.27 258.193 259.472 259.268 260.956 259.268 cv
260.956 259.268 267.461 261.615 274.694 263.778 cv
278.211 264.83 282.444 263.163 284.256 260.271 cv
286.625 256.488 289.711 252.068 291.217 252.068 cv
292.722 252.068 295.803 256.479 298.167 260.258 cv
299.977 263.152 304.197 264.827 307.716 263.779 cv
314.966 261.618 321.479 259.268 321.479 259.268 cv
322.963 259.268 324.165 258.193 324.165 256.867 cv
324.165 245.961 li
324.165 244.635 322.963 243.56 321.479 243.56 cv
cp
.454902 .380392 .313726 rgb
f
258.918 256.695 mo
255.349 256.695 li
255.349 245.753 li
258.918 245.753 li
258.918 256.695 li
cp
.792157 .796078 .427451 rgb
f
327.172 256.695 mo
323.603 256.695 li
323.603 245.753 li
327.172 245.753 li
327.172 256.695 li
cp
f
322.822 256.867 mo
322.822 257.44 322.207 257.925 321.479 257.925 cv
321.244 257.925 li
321.023 258.005 li
320.958 258.028 314.46 260.367 307.332 262.492 cv
306.757 262.663 306.141 262.75 305.501 262.75 cv
303.034 262.75 300.486 261.433 299.306 259.546 cv
294.457 251.794 292.553 250.726 291.218 250.726 cv
289.884 250.726 287.981 251.796 283.117 259.558 cv
281.94 261.438 279.391 262.751 276.921 262.751 cv
276.277 262.751 275.657 262.664 275.079 262.491 cv
267.967 260.364 261.476 258.028 261.411 258.005 cv
261.19 257.925 li
260.956 257.925 li
260.228 257.925 259.613 257.44 259.613 256.867 cv
259.613 245.961 li
259.613 245.387 260.228 244.903 260.956 244.903 cv
261.078 244.903 li
261.198 244.88 li
261.423 244.84 283.773 240.758 291.218 240.758 cv
298.663 240.758 321.012 244.84 321.237 244.88 cv
321.357 244.903 li
321.479 244.903 li
322.207 244.903 322.822 245.387 322.822 245.961 cv
322.822 256.867 li
cp
.462745 .560784 .580392 rgb
f
276.921 262.751 mo
278.059 262.751 279.208 262.463 280.237 261.978 cv
283.923 258.293 li
288.195 251.682 289.961 250.726 291.218 250.726 cv
291.301 250.726 291.387 250.73 291.476 250.739 cv
294.523 247.693 297.57 244.646 300.617 241.599 cv
296.83 241.106 293.389 240.758 291.218 240.758 cv
290.472 240.758 289.566 240.802 288.559 240.875 cv
268.885 260.55 li
270.78 261.168 272.899 261.839 275.079 262.491 cv
275.657 262.664 276.277 262.751 276.921 262.751 cv
cp
.301961 .376471 .403922 rgb
f
303.445 262.447 mo
321.046 244.846 li
320.244 244.701 317.006 244.119 312.878 243.439 cv
308.025 248.292 303.171 253.146 298.318 257.999 cv
298.634 258.486 298.96 258.993 299.305 259.546 cv
300.156 260.904 301.717 261.958 303.445 262.447 cv
cp
f
266.736 243.91 mo
263.489 244.462 261.268 244.868 261.198 244.88 cv
261.078 244.903 li
260.956 244.903 li
260.228 244.903 259.613 245.387 259.613 245.961 cv
259.613 251.034 li
266.736 243.91 li
cp
f
420.027 104.102 mo
407.075 104.102 li
406.631 104.102 405.68 104.514 405.498 105.054 cv
404.965 105.054 li
404.965 104.615 li
404.965 104.333 404.785 104.104 404.562 104.104 cv
404.34 104.104 404.159 104.333 404.159 104.615 cv
404.159 112.424 li
404.159 112.707 404.34 112.936 404.562 112.936 cv
404.785 112.936 404.965 112.707 404.965 112.424 cv
404.965 111.964 li
405.496 111.964 li
405.673 112.506 406.629 112.922 407.075 112.922 cv
420.027 112.922 li
420.2 112.922 420.315 112.925 420.665 112.557 cv
426.406 112.382 430.916 110.642 430.916 108.519 cv
430.916 106.4 426.425 104.663 420.701 104.481 cv
420.317 104.081 420.195 104.102 420.027 104.102 cv
cp
f
430.176 108.425 mo
428.331 107.889 425.645 107.654 421.35 107.654 cv
421.35 105.241 li
426.474 105.521 430.018 107.077 430.176 108.425 cv
cp
.462745 .560784 .580392 rgb
f
419.809 104.908 mo
419.973 104.908 420.106 105.041 420.106 105.205 cv
420.106 107.534 li
420.106 107.698 419.973 107.831 419.809 107.831 cv
407.156 107.831 li
406.992 107.831 406.859 107.698 406.859 107.534 cv
406.859 105.205 li
406.859 105.041 406.992 104.908 407.156 104.908 cv
419.809 104.908 li
cp
f
421.35 111.987 mo
421.35 109.574 li
425.645 109.574 428.331 109.339 430.176 108.803 cv
430.018 110.151 426.474 111.707 421.35 111.987 cv
cp
.152941 .227451 .247059 rgb
f
407.156 112.32 mo
406.992 112.32 406.859 112.187 406.859 112.023 cv
406.859 109.694 li
406.859 109.53 406.992 109.397 407.156 109.397 cv
419.809 109.397 li
419.973 109.397 420.106 109.53 420.106 109.694 cv
420.106 112.023 li
420.106 112.187 419.973 112.32 419.809 112.32 cv
407.156 112.32 li
cp
f
384.967 65.9767 mo
384.434 65.9767 li
384.434 65.5386 li
384.434 65.2564 384.254 65.0275 384.031 65.0275 cv
383.809 65.0275 383.628 65.2564 383.628 65.5386 cv
383.628 73.3476 li
383.628 73.6299 383.809 73.8588 384.031 73.8587 cv
384.254 73.8587 384.434 73.6299 384.435 73.3476 cv
384.434 72.8874 li
384.965 72.8874 li
385.142 73.4297 386.099 73.8454 386.545 73.8454 cv
409.316 73.8453 li
409.685 73.8453 412.503 72.2403 412.822 72.2403 cv
415.694 72.2403 li
415.897 72.2403 416.081 72.1591 416.23 72.0303 cv
421.483 71.671 430.915 69.7952 430.916 69.4351 cv
430.916 69.075 421.483 67.1992 416.23 66.84 cv
416.081 66.7112 415.897 66.63 415.694 66.63 cv
412.822 66.6299 li
412.58 66.63 409.669 65.025 409.316 65.025 cv
386.545 65.025 li
386.1 65.025 385.149 65.4375 384.967 65.9767 cv
cp
.301961 .376471 .403922 rgb
f
416.302 69.747 mo
428.274 69.747 li
425.235 70.4063 419.969 71.3283 416.338 71.5902 cv
416.348 70.9765 416.321 70.3612 416.302 69.747 cv
cp
.152941 .227451 .247059 rgb
f
415.915 71.7256 mo
415.844 71.7783 415.77 71.8101 415.694 71.8101 cv
413.065 71.8101 li
413.065 69.747 li
415.89 69.747 li
415.912 70.4062 415.938 71.0665 415.915 71.7256 cv
cp
f
409.981 69.747 mo
412.634 69.747 li
412.634 71.8413 li
412.384 71.9118 411.954 72.1203 410.98 72.615 cv
410.678 72.7683 410.302 72.9585 409.981 73.1159 cv
409.981 69.747 li
cp
f
410.98 66.2908 mo
411.768 66.6908 412.197 66.9018 412.465 67.0059 cv
412.465 68.9975 li
409.979 68.9975 li
409.979 65.789 li
410.301 65.9467 410.677 66.1372 410.98 66.2908 cv
cp
.462745 .560784 .580392 rgb
f
385.558 69.747 mo
409.586 69.747 li
409.586 73.4147 li
386.544 73.4152 li
386.303 73.4152 385.826 73.2162 385.558 72.9889 cv
385.558 69.747 li
cp
.152941 .227451 .247059 rgb
f
416.928 69.3559 mo
416.928 67.631 li
420.194 67.9387 427.296 68.7642 429.029 69.3558 cv
416.928 69.3559 li
cp
.462745 .560784 .580392 rgb
f
412.977 68.8391 mo
412.977 67.3573 li
412.977 67.2381 413.077 67.159 413.144 67.159 cv
415.661 67.159 li
415.661 69.0374 li
413.144 69.0374 li
413.077 69.0374 412.977 68.9583 412.977 68.8391 cv
cp
f
386.328 65.9663 mo
386.328 65.8022 386.461 65.6691 386.626 65.6691 cv
409.306 65.669 li
409.47 65.669 409.603 65.8021 409.603 65.9663 cv
409.603 68.2947 li
409.603 68.4588 409.47 68.5919 409.306 68.5919 cv
386.626 68.5919 li
386.461 68.5919 386.328 68.4589 386.328 68.2947 cv
386.328 65.9663 li
cp
f
368.534 32.0223 mo
368.001 32.0223 li
368.001 31.5842 li
368.001 31.3019 367.82 31.073 367.598 31.073 cv
367.375 31.073 367.195 31.3019 367.195 31.5842 cv
367.195 39.3931 li
367.195 39.6754 367.375 39.9043 367.598 39.9043 cv
367.821 39.9043 368.001 39.6754 368.001 39.3931 cv
368.001 38.9329 li
368.531 38.9329 li
368.709 39.4752 369.665 39.8909 370.111 39.8909 cv
399.416 39.8908 li
399.786 39.8908 403.52 38.8034 403.839 38.8034 cv
410.015 38.8034 li
410.179 38.8034 410.33 38.5992 410.461 38.445 cv
426.606 38.445 li
428.238 38.445 430.916 37.8729 430.916 35.5162 cv
430.916 33.4008 428.238 32.5874 426.606 32.5874 cv
410.526 32.5875 li
410.381 32.4363 410.207 32.1554 410.015 32.1554 cv
403.839 32.1554 li
403.598 32.1554 399.769 31.0705 399.416 31.0705 cv
370.111 31.0706 li
369.667 31.0706 368.716 31.4831 368.534 32.0223 cv
cp
.301961 .376471 .403922 rgb
f
427.042 35.491 mo
411.133 35.4911 li
411.133 33.3197 li
426.606 33.3196 li
427.725 33.3196 430.177 33.8727 430.177 35.5162 cv
430.177 35.6576 430.162 35.789 430.135 35.9119 cv
430.135 35.9119 427.801 35.491 427.042 35.491 cv
cp
.462745 .560784 .580392 rgb
f
403.994 34.7731 mo
403.994 33.0173 li
403.994 32.876 404.095 32.7823 404.161 32.7823 cv
409.983 32.7823 li
409.983 35.0081 li
404.161 35.0082 li
404.095 35.0082 403.994 34.9144 403.994 34.7731 cv
cp
f
369.895 32.0119 mo
369.895 31.8477 370.028 31.7146 370.192 31.7146 cv
399.407 31.7145 li
399.571 31.7145 399.704 31.8476 399.704 32.0118 cv
399.704 34.3402 li
399.704 34.5044 399.571 34.6374 399.407 34.6374 cv
370.192 34.6375 li
370.028 34.6375 369.895 34.5044 369.895 34.3403 cv
369.895 32.0119 li
cp
f
404.161 37.2176 mo
409.983 37.2176 li
409.983 38.4642 li
404.161 38.4642 li
404.095 38.4642 403.994 38.3705 403.994 38.2291 cv
403.994 36.9828 li
403.994 37.1239 404.095 37.2176 404.161 37.2176 cv
cp
.152941 .227451 .247059 rgb
f
370.192 38.2853 mo
399.407 38.2853 li
399.571 38.2853 399.704 38.1523 399.704 37.9881 cv
399.704 39.2347 li
399.704 39.3989 399.571 39.5319 399.407 39.532 cv
370.192 39.5319 li
370.028 39.5319 369.895 39.3988 369.895 39.2346 cv
369.895 37.9881 li
369.895 38.1522 370.028 38.2853 370.192 38.2853 cv
cp
f
430.039 36.3555 mo
429.513 37.5156 427.568 37.9268 426.606 37.9269 cv
411.133 37.9268 li
411.133 36.6802 li
426.606 36.6803 li
427.068 36.6803 430.039 36.3555 430.039 36.3555 cv
cp
f
308.73 195.725 mo
287.63 195.725 li
287.214 195.725 286.877 195.388 286.877 194.972 cv
286.877 194.555 287.214 194.218 287.63 194.218 cv
308.73 194.218 li
309.147 194.218 309.484 194.555 309.484 194.972 cv
309.484 195.388 309.147 195.725 308.73 195.725 cv
cp
305.716 191.769 mo
273.312 191.769 li
273.312 203.167 li
273.312 203.167 291.963 203.167 306.376 203.167 cv
327.099 203.167 331.997 196.008 331.997 196.008 cv
305.716 191.769 li
cp
.301961 .376471 .403922 rgb
f
271.881 202.363 mo
230.126 202.363 li
230.126 191.256 li
271.881 191.256 li
271.881 202.363 li
cp
.482353 .478431 .215686 rgb
f
230.126 191.256 mo
230.126 203.303 li
230.126 203.982 230.677 204.533 231.356 204.533 cv
232.035 204.533 232.585 203.982 232.585 203.303 cv
232.585 191.256 li
230.126 191.256 li
cp
.454902 .380392 .313726 rgb
f
273.975 210.164 mo
273.975 210.764 273.488 211.251 272.887 211.251 cv
272.887 211.251 li
272.287 211.251 271.8 210.764 271.8 210.164 cv
271.8 183.096 li
271.8 182.495 272.287 182.009 272.887 182.009 cv
272.887 182.009 li
273.488 182.009 273.975 182.495 273.975 183.096 cv
273.975 210.164 li
cp
f
271.334 193.841 mo
233.184 193.841 li
233.184 191.769 li
271.334 191.769 li
271.334 193.841 li
cp
.792157 .796078 .427451 rgb
f
247.214 191.256 mo
245.523 191.256 li
246.333 202.363 li
248.025 202.363 li
247.214 191.256 li
cp
.454902 .380392 .313726 rgb
f
240.429 202.363 mo
242.12 202.363 li
241.31 191.256 li
239.618 191.256 li
240.429 202.363 li
cp
f
259.024 191.256 mo
257.332 191.256 li
258.143 202.363 li
259.834 202.363 li
259.024 191.256 li
cp
f
253.119 191.256 mo
251.427 191.256 li
252.238 202.363 li
253.93 202.363 li
253.119 191.256 li
cp
f
264.928 191.256 mo
263.237 191.256 li
264.048 202.363 li
265.739 202.363 li
264.928 191.256 li
cp
f
309.398 195.725 mo
288.297 195.725 li
287.881 195.725 287.544 195.388 287.544 194.972 cv
287.544 194.555 287.881 194.218 288.297 194.218 cv
309.398 194.218 li
309.814 194.218 310.151 194.555 310.151 194.972 cv
310.151 195.388 309.814 195.725 309.398 195.725 cv
cp
306.383 191.769 mo
280.541 191.769 li
291.939 203.167 li
307.043 203.167 li
327.766 203.167 332.665 196.008 332.665 196.008 cv
306.383 191.769 li
cp
.462745 .560784 .580392 rgb
f
395.197 412.446 mo
392.444 412.446 390.212 410.213 390.212 407.46 cv
390.212 376.728 li
390.212 373.974 392.444 371.742 395.197 371.742 cv
425.93 371.742 li
428.683 371.742 430.916 373.974 430.916 376.728 cv
430.916 407.46 li
430.916 410.213 428.683 412.446 425.93 412.446 cv
395.197 412.446 li
cp
.482353 .478431 .215686 rgb
f
392.206 376.728 mo
392.206 375.078 393.548 373.736 395.197 373.736 cv
425.93 373.736 li
427.579 373.736 428.921 375.078 428.921 376.728 cv
428.921 407.46 li
428.921 409.109 427.579 410.451 425.93 410.451 cv
395.197 410.451 li
393.548 410.451 392.206 409.109 392.206 407.46 cv
392.206 376.728 li
cp
.152941 .227451 .247059 rgb
f
428.827 408.17 mo
428.883 407.941 428.921 407.706 428.921 407.46 cv
428.921 376.728 li
428.921 375.078 427.579 373.736 425.93 373.736 cv
395.198 373.736 li
394.952 373.736 394.716 373.774 394.487 373.831 cv
405.934 385.277 417.38 396.723 428.827 408.17 cv
cp
.301961 .376471 .403922 rgb
f
410.564 375.539 mo
419.707 375.539 427.118 382.951 427.118 392.094 cv
427.118 401.237 419.707 408.648 410.564 408.648 cv
401.421 408.648 394.009 401.237 394.009 392.094 cv
394.009 382.951 401.421 375.539 410.564 375.539 cv
cp
.462745 .560784 .580392 rgb
f
410.564 376.765 mo
419.029 376.765 425.892 383.628 425.892 392.094 cv
425.892 400.56 419.029 407.422 410.564 407.422 cv
402.098 407.422 395.235 400.56 395.235 392.094 cv
395.235 383.628 402.098 376.765 410.564 376.765 cv
cp
.929412 .929412 .929412 rgb
f
425.355 392.26 mo
425.355 391.927 li
395.772 391.927 li
395.772 392.26 li
425.355 392.26 li
cp
.462745 .560784 .580392 rgb
f
410.397 406.885 mo
410.73 406.885 li
410.73 377.302 li
410.398 377.302 li
410.397 406.885 li
cp
f
417.998 399.697 mo
418.167 399.528 li
403.129 384.49 li
402.96 384.659 li
417.998 399.697 li
cp
f
402.96 399.528 mo
403.129 399.697 li
418.167 384.659 li
417.998 384.49 li
402.96 399.528 li
cp
f
409.307 394.342 mo
422.677 398.456 li
411.775 389.691 li
398.405 385.576 li
409.307 394.342 li
cp
.607843 .360784 .0901961 rgb
f
409.307 394.342 mo
422.677 398.456 li
411.775 389.691 li
409.307 394.342 li
cp
.301961 .376471 .403922 rgb
f
400.36 371.742 mo
400.36 363.382 li
421.478 363.382 li
421.478 371.742 li
400.36 371.742 li
cp
.607843 .360784 .0901961 rgb
f
400.36 420.312 mo
400.36 411.953 li
421.478 411.953 li
421.478 420.312 li
400.36 420.312 li
cp
f
179.181 376.238 mo
175.654 376.298 li
175.58 371.92 li
179.107 371.861 li
179.181 376.238 li
cp
.109804 .172549 .188235 rgb
f
174.391 373.522 mo
174.328 369.771 li
174.322 369.425 174.598 369.139 174.945 369.133 cv
179.648 369.054 li
179.995 369.048 180.28 369.324 180.286 369.671 cv
180.35 373.421 li
174.391 373.522 li
cp
.172549 .247059 .27451 rgb
f
162.247 374.7 mo
163.253 327.628 li
163.26 327.282 163.547 326.996 163.894 326.99 cv
164.949 326.972 li
165.296 326.966 165.592 327.242 165.611 327.588 cv
168.206 374.599 li
162.247 374.7 li
cp
f
162.324 371.087 mo
162.247 374.7 li
168.206 374.599 li
168.007 370.991 li
162.324 371.087 li
cp
.109804 .172549 .188235 rgb
f
185.519 380.968 mo
185.455 377.156 182.312 374.118 178.5 374.182 cv
164.093 374.425 li
160.281 374.49 157.243 377.632 157.307 381.444 cv
157.565 396.703 li
157.596 398.537 159.501 399.708 159.53 401.408 cv
159.618 406.613 159.807 417.844 159.807 417.844 cv
159.831 419.23 160.973 420.335 162.359 420.312 cv
181.782 419.984 li
183.168 419.96 184.273 418.818 184.249 417.432 cv
184.249 417.432 184.062 406.322 183.972 400.995 cv
183.943 399.295 185.808 398.061 185.777 396.226 cv
185.519 380.968 li
cp
.172549 .247059 .27451 rgb
f
182.457 394.107 mo
182.48 395.494 181.375 396.636 179.989 396.66 cv
163.364 396.94 li
161.977 396.964 160.835 395.859 160.811 394.473 cv
160.59 381.374 li
160.567 379.988 161.671 378.845 163.058 378.822 cv
179.683 378.541 li
181.069 378.518 182.212 379.622 182.235 381.008 cv
182.457 394.107 li
cp
.301961 .376471 .403922 rgb
f
181.418 393.473 mo
161.84 393.804 li
161.624 381.035 li
181.202 380.705 li
181.418 393.473 li
cp
.482353 .478431 .215686 rgb
f
169.793 380.897 mo
161.624 381.035 li
161.762 389.204 li
164.439 386.435 167.116 383.666 169.793 380.897 cv
cp
.607843 .623529 .282353 rgb
f
174.042 380.826 mo
169.987 385.063 165.918 389.287 161.835 393.498 cv
161.84 393.804 li
170.738 393.653 li
181.238 382.793 li
181.202 380.705 li
174.042 380.826 li
cp
f
166.689 400.047 mo
166.704 400.92 166.008 401.64 165.135 401.654 cv
164.262 401.669 163.542 400.973 163.528 400.1 cv
163.513 399.227 164.209 398.508 165.082 398.493 cv
165.955 398.478 166.675 399.174 166.689 400.047 cv
cp
.607843 .360784 .0901961 rgb
f
166.753 403.817 mo
166.768 404.69 166.072 405.409 165.199 405.424 cv
164.326 405.439 163.606 404.743 163.591 403.87 cv
163.577 402.997 164.272 402.277 165.145 402.262 cv
166.019 402.248 166.738 402.944 166.753 403.817 cv
cp
f
167.915 407.811 mo
167.927 408.483 167.391 409.036 166.72 409.048 cv
163.68 409.099 li
163.008 409.11 162.454 408.575 162.443 407.903 cv
162.443 407.903 li
162.432 407.232 162.967 406.678 163.639 406.667 cv
166.679 406.616 li
167.35 406.604 167.904 407.139 167.915 407.811 cv
167.915 407.811 li
cp
f
174.603 407.698 mo
174.615 408.37 174.079 408.923 173.408 408.935 cv
170.368 408.986 li
169.696 408.997 169.143 408.462 169.131 407.79 cv
169.131 407.79 li
169.12 407.119 169.655 406.565 170.327 406.554 cv
173.367 406.503 li
174.038 406.491 174.592 407.026 174.603 407.698 cv
174.603 407.698 li
cp
f
181.292 407.585 mo
181.303 408.257 180.768 408.81 180.096 408.822 cv
177.056 408.873 li
176.384 408.884 175.831 408.349 175.819 407.678 cv
175.819 407.678 li
175.808 407.006 176.343 406.452 177.015 406.441 cv
180.055 406.39 li
180.727 406.378 181.28 406.914 181.292 407.585 cv
181.292 407.585 li
cp
f
167.969 410.973 mo
167.98 411.644 167.445 412.198 166.773 412.209 cv
163.733 412.261 li
163.061 412.272 162.508 411.737 162.496 411.065 cv
162.496 411.065 li
162.485 410.393 163.02 409.84 163.692 409.829 cv
166.732 409.777 li
167.404 409.766 167.957 410.301 167.969 410.973 cv
167.969 410.973 li
cp
f
174.657 410.86 mo
174.668 411.531 174.133 412.085 173.461 412.096 cv
170.421 412.148 li
169.75 412.159 169.196 411.624 169.185 410.952 cv
169.185 410.952 li
169.173 410.281 169.709 409.727 170.38 409.716 cv
173.42 409.664 li
174.092 409.653 174.645 410.188 174.657 410.86 cv
174.657 410.86 li
cp
f
181.345 410.747 mo
181.356 411.418 180.821 411.972 180.149 411.983 cv
177.109 412.035 li
176.438 412.046 175.884 411.511 175.873 410.839 cv
175.873 410.839 li
175.861 410.168 176.397 409.614 177.068 409.603 cv
180.108 409.551 li
180.78 409.54 181.334 410.075 181.345 410.747 cv
181.345 410.747 li
cp
f
168.022 414.134 mo
168.033 414.806 167.498 415.36 166.827 415.371 cv
163.786 415.422 li
163.115 415.434 162.561 414.898 162.55 414.227 cv
162.55 414.227 li
162.539 413.555 163.074 413.002 163.745 412.99 cv
166.785 412.939 li
167.457 412.927 168.011 413.463 168.022 414.134 cv
168.022 414.134 li
cp
f
174.71 414.021 mo
174.722 414.693 174.186 415.247 173.515 415.258 cv
170.475 415.309 li
169.803 415.321 169.249 414.785 169.238 414.114 cv
169.238 414.114 li
169.227 413.442 169.762 412.889 170.434 412.877 cv
173.474 412.826 li
174.145 412.815 174.699 413.35 174.71 414.021 cv
174.71 414.021 li
cp
f
181.398 413.908 mo
181.41 414.58 180.874 415.134 180.203 415.145 cv
177.163 415.196 li
176.491 415.208 175.938 414.672 175.926 414.001 cv
175.926 414.001 li
175.915 413.329 176.45 412.776 177.122 412.764 cv
180.162 412.713 li
180.833 412.702 181.387 413.237 181.398 413.908 cv
181.398 413.908 li
cp
f
168.075 417.296 mo
168.087 417.968 167.552 418.521 166.88 418.533 cv
163.84 418.584 li
163.168 418.595 162.615 418.06 162.603 417.388 cv
162.603 417.388 li
162.592 416.717 163.127 416.163 163.799 416.152 cv
166.839 416.1 li
167.51 416.089 168.064 416.624 168.075 417.296 cv
168.075 417.296 li
cp
f
174.764 417.183 mo
174.775 417.855 174.24 418.408 173.568 418.42 cv
170.528 418.471 li
169.856 418.482 169.303 417.947 169.291 417.275 cv
169.291 417.275 li
169.28 416.604 169.815 416.05 170.487 416.039 cv
173.527 415.988 li
174.199 415.976 174.752 416.511 174.764 417.183 cv
174.764 417.183 li
cp
f
181.452 417.07 mo
181.463 417.742 180.928 418.295 180.256 418.307 cv
177.216 418.358 li
176.545 418.369 175.991 417.834 175.98 417.163 cv
175.98 417.163 li
175.968 416.491 176.503 415.937 177.175 415.926 cv
180.215 415.875 li
180.887 415.863 181.44 416.398 181.452 417.07 cv
181.452 417.07 li
cp
f
181.517 399.31 mo
167.776 399.542 li
167.759 398.569 li
181.5 398.337 li
181.517 399.31 li
cp
.109804 .172549 .188235 rgb
f
181.545 401.012 mo
167.804 401.244 li
167.788 400.272 li
181.529 400.04 li
181.545 401.012 li
cp
f
181.574 402.715 mo
167.833 402.947 li
167.817 401.974 li
181.558 401.742 li
181.574 402.715 li
cp
f
181.603 404.417 mo
167.862 404.649 li
167.845 403.677 li
181.587 403.444 li
181.603 404.417 li
cp
f
181.632 406.12 mo
167.891 406.352 li
167.874 405.379 li
181.615 405.147 li
181.632 406.12 li
cp
f
111.335 405.151 mo
20.7189 405.151 li
20.7189 366.013 li
111.335 366.013 li
111.335 405.151 li
cp
.376471 .364706 .141176 rgb
f
101.506 310.487 mo
79.7096 305.977 li
79.7096 305.977 70.1331 310.483 66.2467 310.483 cv
62.3604 310.483 52.7839 305.977 52.7839 305.977 cv
30.9874 310.487 li
30.9874 353.916 li
30.9874 358.255 28.8237 362.082 25.5222 364.398 cv
25.5222 404.31 li
25.5222 413.148 32.6867 420.312 41.5247 420.312 cv
90.9688 420.312 li
99.8067 420.312 106.971 413.148 106.971 404.31 cv
106.971 364.398 li
103.67 362.082 101.506 358.255 101.506 353.916 cv
101.506 310.487 li
cp
.482353 .478431 .215686 rgb
f
50.3367 322.291 mo
28.4759 322.291 li
28.4759 315.944 li
50.3367 315.944 li
50.3367 322.291 li
cp
.376471 .364706 .141176 rgb
f
104.284 322.291 mo
82.4228 322.291 li
82.4228 315.944 li
104.284 315.944 li
104.284 322.291 li
cp
f
95.8213 337.805 mo
34.8226 337.805 li
34.8226 331.106 li
95.8213 331.106 li
95.8213 337.805 li
cp
f
95.8213 353.672 mo
34.8226 353.672 li
34.8226 346.973 li
95.8213 346.973 li
95.8213 353.672 li
cp
f
95.8213 369.539 mo
34.8226 369.539 li
34.8226 362.839 li
95.8213 362.839 li
95.8213 369.539 li
cp
f
112.746 385.405 mo
17.8981 385.405 li
17.8981 378.706 li
112.746 378.706 li
112.746 385.405 li
cp
f
95.8213 401.272 mo
34.8226 401.272 li
34.8226 394.573 li
95.8213 394.573 li
95.8213 401.272 li
cp
f
95.8213 417.139 mo
34.8226 417.139 li
34.8226 410.44 li
95.8213 410.44 li
95.8213 417.139 li
cp
f
48.441 323.049 mo
37.4247 323.049 li
37.4247 314.93 li
48.441 314.93 li
48.441 323.049 li
cp
.607843 .360784 .0901961 rgb
f
41.8563 314.93 mo
37.4247 314.93 li
37.4247 323.049 li
41.8563 323.049 li
41.8563 314.93 li
cp
.454902 .380392 .313726 rgb
f
84.2861 314.93 mo
95.3024 314.93 li
95.3024 323.049 li
84.2861 323.049 li
84.2861 314.93 li
cp
.607843 .360784 .0901961 rgb
f
90.8709 323.049 mo
95.3024 323.049 li
95.3024 314.93 li
90.8709 314.93 li
90.8709 323.049 li
cp
.454902 .380392 .313726 rgb
f
99.4884 378.006 mo
110.505 378.006 li
110.505 386.126 li
99.4884 386.126 li
99.4884 378.006 li
cp
.607843 .360784 .0901961 rgb
f
106.073 386.126 mo
110.505 386.126 li
110.505 378.006 li
106.073 378.006 li
106.073 386.126 li
cp
.454902 .380392 .313726 rgb
f
33.1594 386.126 mo
22.1432 386.126 li
22.1432 378.006 li
33.1594 378.006 li
33.1594 386.126 li
cp
.607843 .360784 .0901961 rgb
f
26.5747 378.006 mo
22.1432 378.006 li
22.1432 386.126 li
26.5747 386.126 li
26.5747 378.006 li
cp
.454902 .380392 .313726 rgb
f
405.587 184.412 mo
398.614 184.412 li
398.614 160.842 li
405.587 160.842 li
405.587 184.412 li
cp
.301961 .376471 .403922 rgb
f
413.397 183.296 mo
390.804 183.296 li
390.804 179.81 li
413.397 179.81 li
413.397 183.296 li
cp
.172549 .247059 .27451 rgb
f
413.397 166.7 mo
390.804 166.7 li
390.804 163.213 li
413.397 163.213 li
413.397 166.7 li
cp
f
420.51 159.029 mo
383.691 159.029 li
383.691 155.961 li
420.51 155.961 li
420.51 159.029 li
cp
.301961 .376471 .403922 rgb
f
394.035 241.67 mo
373.286 241.67 li
373.286 233.573 li
394.035 233.573 li
394.035 241.67 li
cp
.462745 .560784 .580392 rgb
f
394.035 233.573 mo
373.286 233.573 li
376.154 187.173 li
391.167 187.173 li
394.035 233.573 li
cp
.301961 .376471 .403922 rgb
f
376.154 159.676 mo
376.154 187.173 li
396.206 187.173 li
396.206 159.676 li
376.154 159.676 li
cp
.172549 .247059 .27451 rgb
f
396.886 188.038 mo
374.432 188.038 li
374.432 185.667 li
396.886 185.667 li
396.886 188.038 li
cp
.462745 .560784 .580392 rgb
f
396.886 160.842 mo
374.571 160.842 li
374.571 159.029 li
396.886 159.029 li
396.886 160.842 li
cp
f
410.166 241.67 mo
430.916 241.67 li
430.916 233.573 li
410.166 233.573 li
410.166 241.67 li
cp
f
410.166 233.573 mo
430.916 233.573 li
428.048 187.173 li
413.034 187.173 li
410.166 233.573 li
cp
.301961 .376471 .403922 rgb
f
428.048 159.676 mo
428.048 187.173 li
407.996 187.173 li
407.996 159.676 li
428.048 159.676 li
cp
.172549 .247059 .27451 rgb
f
407.315 188.038 mo
429.769 188.038 li
429.769 185.667 li
407.315 185.667 li
407.315 188.038 li
cp
.462745 .560784 .580392 rgb
f
407.315 160.842 mo
429.63 160.842 li
429.63 159.029 li
407.315 159.029 li
407.315 160.842 li
cp
f
396.049 155.961 mo
386.147 155.961 li
386.147 151.777 li
396.049 151.777 li
396.049 155.961 li
cp
.172549 .247059 .27451 rgb
f
398.141 154.009 mo
384.613 154.009 li
384.613 150.661 li
398.141 150.661 li
398.141 154.009 li
cp
.462745 .560784 .580392 rgb
f
408.152 155.961 mo
418.054 155.961 li
418.054 151.777 li
408.152 151.777 li
408.152 155.961 li
cp
.172549 .247059 .27451 rgb
f
406.06 154.009 mo
419.588 154.009 li
419.588 150.661 li
406.06 150.661 li
406.06 154.009 li
cp
.462745 .560784 .580392 rgb
f
305.068 334.366 mo
301.504 359.936 li
298.705 377.626 295.818 382.781 278.768 389.273 cv
272.371 391.709 267.139 392.061 257.844 392.061 cv
252.963 392.061 249.007 396.017 249.007 400.897 cv
249.007 411.105 li
327.987 411.105 li
327.987 400.897 li
327.987 399.115 327.458 395.503 326.55 391.636 cv
333.17 344.194 li
314.716 342.844 li
314.716 342.844 313.108 332.611 305.068 334.366 cv
cp
.615686 .423529 .254902 rgb
f
305.298 411.105 mo
327.987 411.105 li
327.987 400.897 li
327.987 399.115 327.458 395.503 326.55 391.636 cv
333.17 344.194 li
306.832 340.519 li
304.109 362.542 li
301.31 380.231 298.423 385.387 281.374 391.879 cv
280.902 392.058 280.44 392.219 279.979 392.377 cv
302.831 395.907 li
305.428 396.308 307.208 398.738 306.807 401.335 cv
305.298 411.105 li
cp
.709804 .490196 .32549 rgb
f
302.984 350.006 mo
306.438 350.468 li
306.941 346.72 li
303.487 346.257 li
303.11 346.207 302.763 346.472 302.712 346.849 cv
302.392 349.231 li
302.342 349.608 302.606 349.955 302.984 350.006 cv
cp
.0666667 .117647 .129412 rgb
f
310.934 346.756 mo
306.71 346.19 li
306.096 350.772 li
310.319 351.338 li
310.78 351.4 311.204 351.076 311.266 350.615 cv
311.657 347.704 li
311.719 347.242 311.395 346.818 310.934 346.756 cv
cp
.337255 .266667 .2 rgb
f
302.134 356.123 mo
305.588 356.586 li
306.092 352.838 li
302.637 352.375 li
302.26 352.325 301.913 352.59 301.862 352.967 cv
301.543 355.349 li
301.492 355.726 301.757 356.073 302.134 356.123 cv
cp
.0666667 .117647 .129412 rgb
f
310.084 352.874 mo
305.861 352.308 li
305.246 356.89 li
309.469 357.456 li
309.931 357.518 310.355 357.194 310.417 356.733 cv
310.807 353.821 li
310.869 353.36 310.545 352.936 310.084 352.874 cv
cp
.337255 .266667 .2 rgb
f
301.284 362.241 mo
304.739 362.704 li
305.242 358.955 li
301.787 358.493 li
301.41 358.442 301.063 358.707 301.013 359.085 cv
300.693 361.466 li
300.642 361.844 300.907 362.191 301.284 362.241 cv
cp
.0666667 .117647 .129412 rgb
f
309.234 358.992 mo
305.011 358.425 li
304.396 363.007 li
308.62 363.574 li
309.081 363.636 309.505 363.312 309.567 362.85 cv
309.958 359.939 li
310.019 359.478 309.696 359.054 309.234 358.992 cv
cp
.337255 .266667 .2 rgb
f
300.435 368.359 mo
303.889 368.821 li
304.392 365.073 li
300.938 364.611 li
300.56 364.56 300.214 364.825 300.163 365.202 cv
299.843 367.584 li
299.793 367.961 300.057 368.308 300.435 368.359 cv
cp
.0666667 .117647 .129412 rgb
f
308.385 365.11 mo
304.161 364.543 li
303.547 369.125 li
307.77 369.691 li
308.231 369.753 308.655 369.429 308.717 368.968 cv
309.108 366.057 li
309.17 365.595 308.846 365.171 308.385 365.11 cv
cp
.337255 .266667 .2 rgb
f
298.313 374.286 mo
301.657 375.268 li
302.723 371.639 li
299.379 370.657 li
299.014 370.55 298.631 370.759 298.524 371.125 cv
297.846 373.43 li
297.739 373.796 297.948 374.179 298.313 374.286 cv
cp
.0666667 .117647 .129412 rgb
f
306.664 372.281 mo
302.576 371.08 li
301.272 375.516 li
305.361 376.717 li
305.807 376.848 306.276 376.592 306.407 376.146 cv
307.235 373.327 li
307.366 372.881 307.111 372.413 306.664 372.281 cv
cp
.337255 .266667 .2 rgb
f
295.269 379.788 mo
298.211 381.658 li
300.24 378.467 li
297.299 376.597 li
296.978 376.393 296.551 376.488 296.347 376.809 cv
295.057 378.837 li
294.853 379.158 294.948 379.584 295.269 379.788 cv
cp
.0666667 .117647 .129412 rgb
f
303.849 380.175 mo
300.253 377.889 li
297.772 381.789 li
301.368 384.076 li
301.761 384.326 302.282 384.21 302.531 383.817 cv
304.108 381.338 li
304.358 380.946 304.242 380.425 303.849 380.175 cv
cp
.337255 .266667 .2 rgb
f
291.229 383.307 mo
293.699 385.765 li
296.368 383.085 li
293.897 380.627 li
293.628 380.358 293.191 380.359 292.922 380.629 cv
291.227 382.332 li
290.958 382.602 290.959 383.038 291.229 383.307 cv
cp
.0666667 .117647 .129412 rgb
f
299.525 385.53 mo
296.505 382.524 li
293.243 385.8 li
296.263 388.806 li
296.593 389.134 297.126 389.133 297.455 388.803 cv
299.527 386.722 li
299.856 386.392 299.854 385.859 299.525 385.53 cv
cp
.337255 .266667 .2 rgb
f
286.479 386.118 mo
288.172 389.164 li
291.478 387.328 li
289.785 384.281 li
289.6 383.949 289.18 383.829 288.848 384.014 cv
286.747 385.181 li
286.414 385.365 286.294 385.785 286.479 386.118 cv
cp
.0666667 .117647 .129412 rgb
f
293.835 390.551 mo
291.765 386.826 li
287.724 389.071 li
289.794 392.796 li
290.02 393.203 290.533 393.349 290.939 393.123 cv
293.507 391.697 li
293.914 391.471 294.061 390.958 293.835 390.551 cv
cp
.337255 .266667 .2 rgb
f
248.182 409.177 mo
248.182 420.312 li
252.1 420.312 li
252.1 419.918 li
252.1 419.47 252.463 419.107 252.911 419.107 cv
256.517 419.107 li
256.964 419.107 257.327 419.47 257.327 419.918 cv
257.327 420.312 li
261.998 420.312 li
261.998 419.918 li
261.998 419.47 262.361 419.107 262.809 419.107 cv
266.415 419.107 li
266.863 419.107 267.226 419.47 267.226 419.918 cv
267.226 420.312 li
271.897 420.312 li
271.897 419.918 li
271.897 419.47 272.26 419.107 272.708 419.107 cv
276.313 419.107 li
276.761 419.107 277.124 419.47 277.124 419.918 cv
277.124 420.312 li
281.795 420.312 li
281.795 419.918 li
281.795 419.47 282.158 419.107 282.606 419.107 cv
286.212 419.107 li
286.659 419.107 287.022 419.47 287.022 419.918 cv
287.022 420.312 li
291.693 420.312 li
291.693 419.918 li
291.693 419.47 292.056 419.107 292.504 419.107 cv
296.11 419.107 li
296.558 419.107 296.921 419.47 296.921 419.918 cv
296.921 420.312 li
311.49 420.312 li
311.49 419.918 li
311.49 419.47 311.853 419.107 312.301 419.107 cv
315.907 419.107 li
316.354 419.107 316.717 419.47 316.717 419.918 cv
316.717 420.312 li
321.388 420.312 li
321.388 419.918 li
321.388 419.47 321.751 419.107 322.199 419.107 cv
325.805 419.107 li
326.253 419.107 326.616 419.47 326.616 419.918 cv
326.616 420.312 li
329.225 420.312 li
329.225 409.177 li
248.182 409.177 li
cp
.490196 .270588 .027451 rgb
f
335.958 334.366 mo
332.394 359.936 li
329.595 377.626 326.708 382.781 309.659 389.273 cv
303.262 391.709 298.029 392.061 288.734 392.061 cv
283.854 392.061 279.897 396.017 279.897 400.897 cv
279.897 411.105 li
358.878 411.105 li
358.878 400.897 li
358.878 399.115 358.348 395.503 357.441 391.636 cv
364.06 344.194 li
345.606 342.844 li
345.606 342.844 343.998 332.611 335.958 334.366 cv
cp
.733333 .541176 .372549 rgb
f
336.189 411.105 mo
358.878 411.105 li
358.878 400.897 li
358.878 399.115 358.348 395.503 357.441 391.636 cv
364.06 344.194 li
337.722 340.519 li
335 362.542 li
332.201 380.231 329.314 385.387 312.264 391.879 cv
311.793 392.058 311.33 392.219 310.869 392.377 cv
333.722 395.907 li
336.319 396.308 338.099 398.738 337.698 401.335 cv
336.189 411.105 li
cp
.827451 .615686 .458824 rgb
f
333.874 350.006 mo
337.329 350.468 li
337.832 346.72 li
334.377 346.257 li
334 346.207 333.653 346.472 333.602 346.849 cv
333.283 349.231 li
333.232 349.608 333.497 349.955 333.874 350.006 cv
cp
.152941 .227451 .247059 rgb
f
341.824 346.756 mo
337.601 346.19 li
336.986 350.772 li
341.21 351.338 li
341.671 351.4 342.095 351.076 342.157 350.615 cv
342.547 347.704 li
342.609 347.242 342.286 346.818 341.824 346.756 cv
cp
.454902 .380392 .313726 rgb
f
333.025 356.123 mo
336.479 356.586 li
336.982 352.838 li
333.528 352.375 li
333.15 352.325 332.803 352.59 332.753 352.967 cv
332.433 355.349 li
332.382 355.726 332.647 356.073 333.025 356.123 cv
cp
.152941 .227451 .247059 rgb
f
340.975 352.874 mo
336.751 352.308 li
336.136 356.89 li
340.36 357.456 li
340.821 357.518 341.245 357.194 341.307 356.733 cv
341.698 353.821 li
341.76 353.36 341.436 352.936 340.975 352.874 cv
cp
.454902 .380392 .313726 rgb
f
332.175 362.241 mo
335.629 362.704 li
336.132 358.955 li
332.678 358.493 li
332.301 358.442 331.954 358.707 331.903 359.085 cv
331.583 361.466 li
331.533 361.844 331.798 362.191 332.175 362.241 cv
cp
.152941 .227451 .247059 rgb
f
340.125 358.992 mo
335.901 358.425 li
335.287 363.007 li
339.51 363.574 li
339.971 363.636 340.396 363.312 340.457 362.85 cv
340.848 359.939 li
340.91 359.478 340.586 359.054 340.125 358.992 cv
cp
.454902 .380392 .313726 rgb
f
331.325 368.359 mo
334.78 368.821 li
335.283 365.073 li
331.828 364.611 li
331.451 364.56 331.104 364.825 331.053 365.202 cv
330.734 367.584 li
330.683 367.961 330.948 368.308 331.325 368.359 cv
cp
.152941 .227451 .247059 rgb
f
339.275 365.11 mo
335.052 364.543 li
334.437 369.125 li
338.661 369.691 li
339.122 369.753 339.546 369.429 339.608 368.968 cv
339.998 366.057 li
340.06 365.595 339.737 365.171 339.275 365.11 cv
cp
.454902 .380392 .313726 rgb
f
329.203 374.286 mo
332.547 375.268 li
333.614 371.639 li
330.27 370.657 li
329.904 370.55 329.521 370.759 329.414 371.125 cv
328.736 373.43 li
328.629 373.796 328.838 374.179 329.203 374.286 cv
cp
.152941 .227451 .247059 rgb
f
337.555 372.281 mo
333.466 371.08 li
332.163 375.516 li
336.251 376.717 li
336.698 376.848 337.166 376.592 337.297 376.146 cv
338.126 373.327 li
338.257 372.881 338.001 372.413 337.555 372.281 cv
cp
.454902 .380392 .313726 rgb
f
326.16 379.788 mo
329.101 381.658 li
331.131 378.467 li
328.189 376.597 li
327.868 376.393 327.442 376.488 327.238 376.809 cv
325.948 378.837 li
325.744 379.158 325.838 379.584 326.16 379.788 cv
cp
.152941 .227451 .247059 rgb
f
334.739 380.175 mo
331.143 377.889 li
328.663 381.789 li
332.259 384.076 li
332.651 384.326 333.172 384.21 333.422 383.817 cv
334.998 381.338 li
335.248 380.946 335.132 380.425 334.739 380.175 cv
cp
.454902 .380392 .313726 rgb
f
322.119 383.307 mo
324.59 385.765 li
327.258 383.085 li
324.788 380.627 li
324.518 380.358 324.082 380.359 323.813 380.629 cv
322.117 382.332 li
321.849 382.602 321.85 383.038 322.119 383.307 cv
cp
.152941 .227451 .247059 rgb
f
330.415 385.53 mo
327.395 382.524 li
324.133 385.8 li
327.153 388.806 li
327.483 389.134 328.017 389.133 328.345 388.803 cv
330.418 386.722 li
330.746 386.392 330.745 385.859 330.415 385.53 cv
cp
.454902 .380392 .313726 rgb
f
317.369 386.118 mo
319.063 389.164 li
322.369 387.328 li
320.676 384.281 li
320.491 383.949 320.071 383.829 319.738 384.014 cv
317.637 385.181 li
317.304 385.365 317.185 385.785 317.369 386.118 cv
cp
.152941 .227451 .247059 rgb
f
324.725 390.551 mo
322.656 386.826 li
318.615 389.071 li
320.684 392.796 li
320.91 393.203 321.423 393.349 321.83 393.123 cv
324.398 391.697 li
324.805 391.471 324.951 390.958 324.725 390.551 cv
cp
.454902 .380392 .313726 rgb
f
279.072 409.177 mo
279.072 420.312 li
282.99 420.312 li
282.99 419.918 li
282.99 419.47 283.354 419.107 283.801 419.107 cv
287.407 419.107 li
287.855 419.107 288.218 419.47 288.218 419.918 cv
288.218 420.312 li
292.889 420.312 li
292.889 419.918 li
292.889 419.47 293.252 419.107 293.7 419.107 cv
297.305 419.107 li
297.753 419.107 298.116 419.47 298.116 419.918 cv
298.116 420.312 li
302.787 420.312 li
302.787 419.918 li
302.787 419.47 303.15 419.107 303.598 419.107 cv
307.204 419.107 li
307.652 419.107 308.015 419.47 308.015 419.918 cv
308.015 420.312 li
312.685 420.312 li
312.685 419.918 li
312.685 419.47 313.048 419.107 313.496 419.107 cv
317.102 419.107 li
317.55 419.107 317.913 419.47 317.913 419.918 cv
317.913 420.312 li
322.584 420.312 li
322.584 419.918 li
322.584 419.47 322.947 419.107 323.395 419.107 cv
327 419.107 li
327.448 419.107 327.811 419.47 327.811 419.918 cv
327.811 420.312 li
342.38 420.312 li
342.38 419.918 li
342.38 419.47 342.743 419.107 343.191 419.107 cv
346.797 419.107 li
347.245 419.107 347.608 419.47 347.608 419.918 cv
347.608 420.312 li
352.279 420.312 li
352.279 419.918 li
352.279 419.47 352.642 419.107 353.09 419.107 cv
356.695 419.107 li
357.143 419.107 357.506 419.47 357.506 419.918 cv
357.506 420.312 li
360.115 420.312 li
360.115 409.177 li
279.072 409.177 li
cp
.607843 .360784 .0901961 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (Anton) ()
%%Title: (war elements, vector infographic icons \(s\).eps)
%%CreationDate: 5/26/2016 2:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2Ouc9M6>^9?jM#A8el:@ARP">?.(Qp?2g$Sf'j#;="gk2a2MJ+cB1<HY:qD<O[7?l36,!V:B?8u5Fb,h:?;mM1)DDPP`F
%0)#:VS251YNbd_FTCJQR]6E^HCUZ;`[m[c.+*F%.iD.-hD[luJ?G"f2/E]ViCYdcHm23R:jk_rNmG;3\@_5Z*KkCa^mQm]"DH;)^
%:2QBincj[=!Bp@,!)EUrr(OVMYh9%jY;mR('0r&Ph;'LM.ZlI`DslX5h_IFlY4p%^/GSVJDtfIaS)Uo8rs\i'Gok'A2Eaq)?Lt8L
%Y74^L/l]3J1Z?)/pbGog*n<aIU#7;r9>S[-Hk&_!jL3AG):2;'0O`CZLAXjFAHia>r`_/JIpHmg'7RB1G0U]mm-KtA%SIN*YSZ55
%90QaD<Ii.10o=?7Dg'F[[:,91dB_Q?Rp-N?p`HLioFD[A1.*uBHFY?RZLXTRo,RVUa$4*;XTH`hXla!6\S'/jUY1ts?0Dgn>5s3r
%Q"hQ&h,1f;J)+rN6#;-L-oth<f4_UdRJQGG]11W%>"LqiM>^WX\2a[TmBoI:&'MN!:uAr+FfMjA:"2^4<jI/)m-aW)&>Mmq)[+N0
%hZRuhgC2:[(E-.h\a[^=2,^&=\jurq.,mF6cjjaRG/&1Tl7O^nd'oTX8d4)8[i/G"I4H+i+%/.3Y^`AC-b4r>%u8E4@c+O&8m?*W
%)#:9sXEqS7..oXR#m:+3fE<O/GdMh<nlu%tI0V#eB<j)l*5(XS"0F0grm1VX']0'!47*W-\^Bl*c8N:)^&S#f>bTP,D!'S2lbd$N
%]![[T55YV7bie+Pfp;<Qp5DeU"91J^r,W<u_18n$5h`AphrhooN\A.$on*bRm/l^51;4:+U\aPhf%Ks)b^n"7c(+PESu"[1pC[DM
%niR>+YY:M$-ekj.5KK10B\l!=i.iNr!P^c:5/TVBaU)/:h&jmbmgSM`+*4i-,PSXt5Kgpe::o)ZolKcEDmFC&*X4Y%[d5!b=h^LA
%SUl:K6e"+nDr$/:X0!JZ9arp)'AG2jcCiMI+Y"-_iPGZ_X%ZODL*n[_1qSa`mgI5/`IfEQr9^NTOUOWX=ZG15ffAE,>D!FUAP-:=
%m"km9lapfO_.,kq$W?JVL.[Jc'2u,)ca`b(RF=N`W*5nu2U[_TCB-.&@i=AiD"bKq>p8G2BQ0-hn+GDL05Sh_(4`2('i7JQZk>7C
%272"`l3Wgm"@N3L(.<j0Q$ZG5?JgnaBF+m"i/E$)IAte8[uU?nZ]eGgEZ8C@H`Ltcc"9dBnucelWU0/cNLR_%-A,<rOcjOWWAL,J
%0)F<=/]JYsZre1c8(fCA&io^`auENj$>>=:Wk;2f9%/u.Dm[<0R4oAI>A!?-g9?$hX0rN8[=50%_8LsuIFRP6pRU%X[>%E7QC2`t
%3,3K#+q_/:__b2)Tl3HG8&?!1=L6s-J:#Doa/,U?*D=im?gbV\J3\(0Z,3:"F)DlpHFHn&$%W))0":-0f@Tj`0DK9.2tu3)]*hsu
%JP>sC_pP[p:;J+g/G/hIA=<9cX52tu]2ZYi4kf64op>G`p_+Z,pi=Y:N-k0,7sdM.HQ4^2UXgL.;CB`?n]>`:\SeMoM?*s^i8R]p
%kH@orG`naXZJ8G;VFLXm92]$MZ6N7(MEWi'037qL>+)5)-FK@&k.fC$KV'-NnFPq6:tRm\=l3&>\M0M5EF<,.Z;r2;e$.2.[K]Ep
%M&_QPLEhV7lHP5u+eH8A)A2KiBomIW41_34G(!KidEH&hGi>]<'6_gCc0@4mUNVrK9GP4?k&brs_\TaP(H6%njY3a'V5n(%YKU86
%%JSk:*S(G>9#(1M"=#RXnP#1nBP]$'^c\e((JhrnrJQU=A,Z=S\<8Jul](c6k(X/M1/%`)/5nfXg<E!c439>!gL4An6RGEo25>BH
%m+3B>b0Uo0oSU[^WRj/r%4JI(0O4Sg(ZZ'5beTuoo-h('MsR=F3O?eE(>6qV]3^fEcC%+E8,X@E/a\n<f&3FDFr>UK(>I)C]0@.e
%A]P_56G$B62[f"bU"q9,RtVB:>Nm%dgshOiA\4A-865G!h=8F,-qA-JZ4>s,]cm,uQuW^ng.%e0iHVZPCk[UK^J=5f"qMcd^R\(l
%g/k0p[J!t8T9GL"mdCX$rJV5i.!]B!@><na2NKZ))RA-u2.^aXDKRb6>.rLij+d"2/^d(kW_mBR>d96Xl,$4@#QIi_1]1RqS`(Bo
%Ps/e7^T-3l[I^,lK!d&-q'GQ\@FGkNYH!<Tk#o<^AYH]dBXD_'EgERk7BaumDD[DXh8q9[bUf>CCW#]kMi5g%?<o</M`%Kal_D`2
%ca[NM037kj/4p\AhoO;=NR:a]0XYf!P=bCF)snHqB.()+&F1FH-`YC5bQMNncEDK]=4.LA9.$uBDZ4=s!Q.U19O@XSo+r@Rd9t>$
%Fc2H1CV"@J7Q$\/_-^8hV!ZR*_0m>`^b=k\B8OiJOiX%N/+@>lk?;#@$n8DrAe$RXCf>6\CAl`QUsg;qZ#,!B-sTJElf.W.:0NY?
%/\sbT(8bYVK:ShJp2p&HUisc3?qto1A/XX0f$0U.YN%sf02>-S1<Ej6T5HO`a%[91<Nb6e/nSn?ZSggs)Y.IC+_NbH2HrP/<+WLm
%4Bk2PSYk<PE\0XJmTQ_9PGQ5uABS)sBQ[tR`j9gJft-]ih0?AG4FQYECu'>nF2YD-isDiUXW,U;NQ7L8BH8+QZ5iAG2WI#CMl,>6
%A4Vm+`g1pVLd8RT\nCAd.uT6>(q<HC#TW:r#iN#`B^t(`eZPNdmJ4_\CZCZ\:gg8_pKqQH?LiXr<_Hj'ZM%M(FN/T?g89L*L2</!
%Rq9Zif4qH.pRBFq$M[ZHPubBA3ps-JB_C*(iC^l<=R#Koh2.%pf.hE6BaU6hcVg5jbFd&MB><`A\?l+d<&dN_OC80cp:jX@Pj,o^
%W8pr-QC":*br5Kb0iQ!4??)F2gnH4%RdD0'`BVHMKrn?8@pVg9^EG$NHqauNo)?lpBjbNi_lDh5ODYqcjQ^?llj[5"mhrV8^XPOI
%aAb+f3bFU!pA&@L8[H@Y/FbJg]_oAS0/Ccr&hc!J6i!'OianF#R3c0OM3hB)V0?D^0C<i?phR8m5"d$C&kKdWaI\>hYB:'6QVoKC
%7+-51*'3b*e7TRu9VWoDBbsdY>=3_]p^Jt]ff(*M^Cci=<,k2sY4A<E/8^dJM^l#;nhBGI<Fk?LJ(mC,;a-USRsFNNh;\'b;9Wis
%S7[C3m??Ss(8pDa*+u`?rB4jjleFP5_.e(FdhL]tA@a_c"g=>_1OHs=B\ueEY-hfsJ60BqCW*W*afG*VG!1,uQR=Ec_Ag<r&&*-*
%EE*k4"QihG2r4u*b%nom8KQm+kROhdQ>rL%HZ=V"?:cq.]V9UnmD\E#_f*.07n83o&::,.Ch-eO]f)`Q2"'70$lW8rO2_nq+'I<Z
%`<gAYpWAKIp3CsAh.A1t52U-3`&"i7l::VH]@UhS?.d>Um99I1,q#AB=fpO!r`hAPR66(nfoGZ[E`YA^.bMP+4GmaWs-9aiS^\Rk
%^IgH'5l@1U\ctf^ZV>SkB]!\uE&5,TDgLg(lqY=]GQRcGP>%n!AlniJ%EA(TdZ6HPP$e3.28*d<(mhSX;H&YuSsn,+Zg2e3`gaT.
%Vkc)l37n&9SR8m%kZZiO1NW6gQ.PEYQkSO:T4m@#btaAHI%r._NFjQZB?BSpI_K1`9P,ZnVq;:!%`r#'P1^04fa76&$1]O5*,jaA
%nf'D=c45r^k/OBh=/LC`S/i`eR<.D2bTQr!*IZTgfrOJl?TUhCD*@K'S=]&q++KN5CT.n9rE=VOCVT5DZ=G,sEu4+17/f4m=/Xia
%ca(dM*Hefa(Oou,R@b;0W^cB:qM1hhZ^^(=qJ-bNFF/APf!%>P0emj?"j?;Bg6juQ<r/g7QT$\$VB4:mbt>bHI0;^&jj[V2r"W!R
%(FnNg>OkMuaCVkpj'()S1M=f/dQU+@`N?g30.co6P;r6!ecn6"3+l1:DjpF$NU5B4rml@)D7\!1c16m4kR##W*?!<hM#LXsj%>cH
%I?RIM/nK!,VuD^5V:d..dkL3>_69:'6'!I0*:i<<hOrj,GAPqi=?rDDYa\+/n7uOt>+($Pa!.^H9ec0AcEbY6lIj+%=ek3:;6sVD
%org(L0l9'9X;tp;h.r.DZuR$"AZ3F`ZDJ^RV6AO?<(>^?m^4kr2bD-^Ia6$jF>_g?WS(:PR<eC`=n,*CLJWeZ8%JBk[I2s$b8V:q
%;!3>QX19!@RTKpmF)K_)3:o($IEYS2J"p(Yb?L[rSjbVgf;-X!=T4^?Q@F^C)tictJ&_qCkd<+A04+tEaLAnA.q(3C]Joe+0/mk5
%DuGi+=Z>+)HYGWaPEll"oL<14b?E$VDtKT(/\L=[^YeDMIUk/-0S*$jm1])=qs$5Lf)D`DF4/EmS!IKbT@(*'P#p20G,sB!A[p9r
%?>J0%1-+HtkZ'JiMnS&XZDlPb;CaA9@&!R![Be[PCY,lYhl\gTX^Q#).#^#8.XH7%QU^SFe]i2K,"SA0)j[f]6M%Ka2j&<joN&Xh
%lAXH)/;]ftiN$^ZS&$:,1A+N).XT4Wq\eCV?C%Oc2s(%g;8:`)1>,R1N/krN8V>O(X\PaUnE1E=fDV@C-80JpUX[s+L,X+7@?rsf
%=ApWIB]6"fnXhHIMn]/3p+5_pBue2Z;;7gqB8cLXj$1RDaKU[(V?`d#ZV@b\pQ(?F$sr!h+*/;f0H5)>0fOC%iDB(S1"JHS/>Tgo
%2"i9PNqP+E@Q3\[j[SR+N5p(SXY>C!p1oZ=.*H@b.X8q@Dl_JS46a/"`u3H:AsVo6/Y=u.Ho&ri%4kij4e5`iJ%ar"*TQ"qMK7.h
%p84F[i)M4S[c[M<C1MVmPUq#YNENQm1a^Bd&HA<p7V(1MEeW7=KRWuNJSU+EKg,5=>i@X:rddU9W%WP]+NsJcItb4J;_HA;p&`ZX
%Za"A5R[rl3_]/0\>CAa2^ME10r@LsS9;Z<rr)-n\EjOWV3.%Fnm#BT<[S=^[XlF>k?I&=tlbW('[Pj"`f/2DfEXa7G?;Gq'C`8_1
%1$+NRK`@I/n\5LWptqA6(d#F^m&eh<['qa\HiEONc1ZJ?`4_bkAcZf'1?&ak/*H8YS5[/M4*r2"CP+e+r@iRCkOk;aY@A.A.iJ)N
%GqIFNouQJoS:?WYfm]UI2,V-$T4><0j7gFi.1aI:fN*t?B8C2)2.hcVQfg?b^c-nj[VXa7/K<;]VYrTOlt1tUe(-=)0I_Eu3b9)-
%?&)P,ZtF#1-FW&ocYiYBioh];c-U$#^XFN&,Goj\9j1"rG5(5PUG:$@=G@KhZ])mTUG9r*SC>"+#%TQrZsf9JR.?YgQI2(#1Hruq
%bVC*g-)4o(XGfWGk0,S!;j>\>!B4oOR/8cmH*JaR[:+s=Y,sK"SgWseo)76YK`<ti]]b5pIYBsKFeLW9imSe\>e?>3@40m(i:D]<
%(<cJChMZNA54g^^Y<o\V2"_0TfkJ'>gN$"agWe`k=hH\OpL`sP<&EQg`HrIBZ^W$)h8#@;B@tluMtglrh]IgP12,Ssi0smtZ[a^c
%Slrif$i'^lf?KekJFAp1HqQD,a)\%SF=grc=59^7E?>+&*4^D6s.5e&^1$o*DplYK/H,)Hb'>:M\<65C1@lC/4l#Nc+&/4B]*ZLC
%-Db^f"OT$c2)APpj-=Vg9YKu=i(IE!lZL=#_%jq.Q[<c9.L5`+IeChm>Xlmn4JpqBAQ[p)G&)Ya=m#GD@YA[p8mmCVqYc\pWR\l/
%:92X*1N0Fm50S!@in@MB/<-'Df.te\TDhjP$sbU/qU2OII9Y<@L)$W78Zg`a[eH6XAj'A,@f2@hC0r.%@aqTjDu>_JSo)WP_-+BN
%Dg%T*iE#@4>#%)K)N`.HZ?n/I*@%K]bDgp,@im@A0R_1)TW3TB4[i)YduYaMEIF@3%#qeM*d%eH-b4AkOdL%`QDlO7IWT,AIU&Mm
%EQO^CVtIGWs27oKdl,p?qT\1&1?;/j>4$LA%:\_*lf21GYM.;o*^G,6%;Yp$6VirZ1']6qEt4\[R1,f@G?%@O\%9gfL?n%Gd]7<Z
%ZJ5f*MI';X1>!#d[&EP^e;+LeQRI>`NU/SQC<Fo;7\_hWrQ*KqW9@6hWnZiOBi;W.lAX$AW"<_Y.st@AE\ggV7[Ep&7B%eQ7YV2X
%QR0B59sr;eeF.Ocbc=_08gB6t\(/SW$5WXU#<1U.ef,1Te8Nc1PUqf^qUfEEP4+L'm6pc>Z.+cfM3;Rt9Y8+r1F/$bh,]d:Cb*Z9
%fo#@H>XLEWC3X#>kLY)7b)NXUop`<),thaFhRUie_P_l:8d6)W[MNM`(M1#kA[WC$I07X:gl%>0MOJjhi?mq\ajQRBi_a(W]dT<F
%@d6J(:"kMgV(kp;;GYD@Pj>PGEuk#)ACAk4YSpTrQe2,R=daH9c$JCGh&gZc3oZ3@EKqO!W*9_q.Pofo='*j.B)_/I7*/*Grl>HQ
%YG=>+roE$b>q_ekOuU50f?VSKh<u5m$uba/)7l60]4s^"5tu!HmN4-)pBmCeENn;:6jA]+(SQJJ^$ZA,)$6M.-&EH.quQi[5QCKK
%lu,*%MXLoNiSO':]/bCjHI;-YeYU$bZfXH#nkK.Jms;N?^1Y=g#QK=(nC`FI*!8C:n.1!FhIgL^DR65^heRA[g<GG<Ok[ktC&n>7
%HWNRF(OkFnb6V?/BB255Ft=.f\:J;)!IXB(_tWYQC&=4^iWmYK]oYFf:7-B05Vf2^rU)'4oc-/D"734]C#l^C+$U^T`dcpi?0l!u
%\H*-,e3G#+$bSPf'I+:4`KK&V[@>'B;`&CT&6fg:QK('JHf05dZL!uf@/KF:oGu8EXJ0eg;[CmXKQ%qCVJh@L9!F<`K#JM>qk*)8
%X:P9ms*![A6D+/9)lbl>UlQO3Wm\Z6(P96[$gO<_O&uj4V8pq1nF&O<Hh#`F%/Ik;;9M%alE@1+[5Ag#%CI5FH9pb5N[ksqo]=rU
%c=*o9V#ESBee@8C)J%=>^%r!N36S]Q#l!2l,6d#(_EVOO"orI+8bm\<NJ><4Q2[]&>Z*/;XSKP^F6CAd#BTXOK7b8Rra=j))%d59
%(Dfi'&N>@;T@[CKR1B*Z\TY0*g:YeS,u.Fe`MmP/@>cc:^NaGnb(@q*22>>[TFj],pgkqomgJ5^LZdM[2GphrLDb9!+ra[2qT9NR
%NC&%M)"p"?cn%jZ.t>h9/cWoK8hBj4Rf5fWFEp\MD\VA2(l-d%oq*'[HP`=)po!qu=[RIRo[i_2n'`sa#45Iik*U//20+b$S$hrM
%/^F'Q-";J>B'FWK/^kZ*L^3n(V5nOf`U16U+-`^P9%pV9V5l5m=V1a#VkcmlBSsL[H0mWY%Dd=i2NNUIrDnZB22I[jLSi(@+N#T?
%g[o6bl#7bQ?CM9c3mD*8!M7gf0GFFD1Ns`m4d&D"=R!?g.CP_j#3t1e7bkBk/!(_d2T&e%5<S;_qMe`#2ehEUgi:(H2<D]lr@%70
%>h=-H(H$8h^VBq%CU%otI]Y[kX7c"a)t;Nqj9Dad2%r#):/DD,Ulhnk6U&sYCZX*J,U%D14_T17U1^l'6VCQ!OA9Y3RPZLHZedB=
%Y1@JFGH7s9.u]4rghps_D"`!%U>gl$e'+e_c(0$)p!_c2#d*NScH\)t)YEOa&J/E8EWP3s_q\D^XP!jCd4HYZZXAM_r.Y.4H=V>F
%?q5oNnul$Yrhp;"@U7%n[*rq'Rf+>Qgj\k0_q]R5267h,g9%';6E'cL^E<X5UZ!'r8-tNLQ.p/-0Li-tVAjkqX#W/Mk`NE:>KoWQ
%e7%6^Acn6ANUiJKG`9pg'p.^bf`_sd,DJ4E2)2N$O$?aKFcT&#j(<2,GK0NJ%Hq)>iV84hJ%a`$M[an'j[Qk+=DR@`cUR;QDHm%l
%,0aHlES_phDJsW?#43;hhO_)>_7"hMqe);b<HSHW\Xd>^E7V,Nbs!(#:(N0Fp&>Mk=ULqGMNs_grOe9Uk:KF:S!?j_Xeb[q-pXQc
%gIYm<1!AuBgWsV%GT;%(g#"=kkj.jY3@\8#eSB$ga]N7`@NT)UXBLN`FgZ@r#=_#GK^Ude$#>1).$Y"kpM*Yp7F+u'5FUu(d;J$*
%+q4XTJ6-LIL+l4tH7c8_@+aq=7Lf\Om'5!Hm]_rY5&,]XaI]A^g/A>ud1c1rlO41*VDJ2Z2WYd%8j20LUCqpL:P3cR#G'SkJL]:8
%J?J5?d%kukhe4oG\j,rQAT&Fc?AZ?&6jqF^D3iXm-fs;XD]`\#mSOuo7QqSoBk?Df#/bW`m&\S8'kjpfHnnD;f;L,N8[-T)Wf>_"
%TR1,'+sj0\\tPV&XgHfenl?!3;81@[Q,WlkPUr?V*)1D)43LSdDgUE0q/BfbR,fp!]aa*M0g:d)Kp7hpq.,uiAlE('Q>p1"G#S<u
%D`afQ/q;Vi:)'A<\@on8hj,[h[bJ=i6qO\-VAJF)>-pf<*#C,':L:#@OV0%bNCi><mh#>BcoUT8h]]*I&L=P3iQW[jOjuFU@EH%p
%;p!lnX51utYVnIW%6Lu(o6>*Go,V\1e%5bi`eS=ZSU.II-?+e/hg+V)U62Q?CtIspJ[G@)ir)?\f5JJfGG2[Cj:U%qP@"9=g&X_r
%7di]?E<O9350fd2.AV"GVD5=mSX>G9?!-U:"YCbEceA&ak85OCW88PbYP$NJk`'cQN41X/g(56#mSTTPmCWXn*Ht9M&BTL@d($%,
%!*Ad<eP@Y!8igbtZ]l0tN=Vbrjec3!/.K$.h$.bV-aHqEpWa^o<9=a?c&2q"JSAnBO*VV-6gk'RR9IgC#E+T=)*P4B*h$V0^RX$L
%V,_^#L.C_("B,_[%%\%9\hDAOq4cj3fcAZ?KCb<p2]mup@NrC^[%9*-EWa[g2#GrToD.43=M.SuT+2KMB.0n8c;=9[:ZJB8bW"8"
%>,QLu.!4$)l?1F\_H:\03ZO[Ug'mP-/bB0GbaDe7*V\%3MP.G:Z.&LQ*"$kYa0k,#e8r^I/D.Y/:trolCT;r/]"s)PK9KK6fl*H0
%/M,ElU-ILg<bRVldRt;'M&'Fc^M!@k58e;7C%E((N'$qO`MXG4*[<Y<TU`"A5uVMaQqf:_+X_[FWm7fUG?-rSTKrkm\gZ]u9f)%@
%"rGkA(nK]26&C.$kl8ME4rUA55:n\Zm@q.ecYcL)[LRA8I=o)IoQcU*KmGCkV>?2N+N)u*`K!FDqK^dC$HXtWd`?OUW,/Tjm@C-g
%p!1PE+q]\;&VJo!@W$8#jI)_)/Qm@?d]Cmuc^"C:BjCstd)NQ+kIKhF8OV^SiCPjL9PBV>>4;AO4h#8B_29](Jo3uS=h*@'U[k-^
%.2LKFQoed=;f-f=r+OG.pZe":MPXl5nVEZL$gPhR9B]WF)jhU.W;J%H6cU"`)X..hP%j=25u,%?6*\7?lO;d3mcangeVAFO5A4MY
%qA0i7mmp`'I5-5Op$&3"hE0Kq=-!aCjOrg9:T'M!XY+1F0RS]m9J4Q9>.MN4\QRU1&e),<R/JMQ/MU%6&]GCFYt?d4[2[;!NKr=c
%ag\s?agYBWI6BCVPSfYt$0t*"6nYPXT,JAS\!&h_/EuNoS\8Bl(7)[*>_6QWH&9BS$S5V%K#C'NN$=H"P;;0`\iOK=e,"!h^!l<i
%27;<3o``_F)gJpsMq>NL\_rQ+LU!ZanPg6m<9T7<BEdJp[1(1R039JAb>R(JY?PO.UlH=P<qisa(kQlJ7<=s('q=%.*:>d^R#*5@
%Sm^faer>(J8&^eRU9I_Qg^MsnE71CH*qu2&g\3obXM0,\@&<R7n[X'tH`=O+hrpR]+*VWdYM<<OHVeJ-nq4R2lY#P?S`R92)c*o4
%Vp!Ud&%:'cUUjf8\$gm8VW6GdN'[8Dq0:;s]=.8Vs);gtnSGEfG[WaeC=ZFc\,*,So3q1afrODlWmf`R[2qQ3Qh1"Xa('6l)t0Ie
%^Ke=Ym!mY)QG7i#3ZjY'$_:UH:tXPBSh*"omYiW,kO.*a\+YH`:egc,G^c#PmB.NPq/9Sfr)D<%jkib7Q'Y_S]XE,iq7O-uaEJEB
%Mt]]+\W+T@<($5VHp-+'Q&e,Doo&4Fp:KF]ilSEHidWXl')?jg>W8_@f2eM-GUj%#dt?)8j"ERjFT6]5Za"eV\.j>&>M*/kdhPQh
%X#3@C:&&RCTtXiW?d4j2S:d*W_EIeq6Lj0sf7gW\K@cAdF7etDS*+uj<pKA3.=Q"`X<1G<7+J1)W93hYGJ>c>^-$<Jg\7:'=R%Pe
%)AT9!pV12?k1<Y*T@cu"\+8\Q>+o/McrkV+[IVE-I!XT=rC;Jb]?ma"RL?%:Ajiq2IQhuYP4KbPrO95_=DjBFeY&,NXiGKUMp5_c
%hs#qT]W^0r.rDHGH+Ud-\p+^_]_Tseo>E<T^+?A"Bma0o%e"cl\kfp3TLhqlLNft,5'h.\='ZNjPN(i>[j2^\9quHjTC6T]+4XE\
%=)KU;k[QIkIdr,j:_BYG34urhclWWk.]`-hlJ(tJU3pZprMuT']sfmcKAROS:S+X@>32[&O!UL/O&oC$hd1c*hMaDuHJ:ki<<K(T
%cQa2hCDP.)a1GHRkn*"6.[CT9gu[\VWT/Er^=<Vgj_kOgUIQuOYLdM"mM<LRf<<&^Hgb8W[S+T1o$Le0qqCejbK!FRd<WKV+9_PW
%COB5K0GiR[STfeT9)75rK2V$)pLrZeF76V:3dPIk%%hq?rS9q=<uC:Pn%:&b=!,/TPiiu=KQNH[`=P9L(nThr/NeG[q_"?0`!^<q
%/,R6=L&L2Pd<O[a_I\m,Saik499Iq\&[Yi\_`6s()Y]8oYH(IB7ci*f9mX&?FgY*O*I50);!`mCP5Q+30(3&q)+&bCSd\(6-Ys5.
%ear&qiS_7<HF(2%[dpg]GP!(d0NRp4=S$aOX9q_^'(JH'@C%_5s(oDkipE>?03%NXXfjDghY5+Dm&`3C;:f2tFm_WWm`_#X:Y#dM
%9)\F#_>doV:%lKMZhBk*n_5#K98eR6>.90_bnh\)VQdhc=9)k&,V0b4mn_F-V4t'H`d@^k#1'kl=<#Q:\G?VX.e>ahPtKa.?nFLo
%pkm+WFOQmgoqTZUg%C9[de4Wc4aHYPRmj?br93J"_rA.6UJkuQht.9Q-h$I)N>Ds7J[>$ghFjniJ'%^mfKD9@!0;QB?h>,6-dm+^
%Q]E1Mo75`TM(jePDr*WU(*..7nTj#pX;sNSL\C^_q9V-I>BkS"5)>Q;?eF37fFGX'QWD5>l$3<1d04jBNRd%Qgf^\`\m`l=;u^;#
%@?$0Kjq_R?:#g3"554jL><VR'^.!aI)u@Uj?up7f5k&o)ATMenp:Gdo/XiI.a26]bk9]q@=STJ9qQ,p:,%'5X4fI3jRNG!(KtYmJ
%UVEYBB[ZtGXS(o&pI1G=Jbl7Mo!rPEIK)b'Nd5m?CtGaAFe5&pHOhXHoCn;5q"&;2rd;+df(0Epo%Uds:B5_JL%!hId3klI*o]uX
%n!6r#V%*4iCkr"cDiNqXNO&(`52;8bb\ng&d3uekj!+E"XVieShE@!Nc563\_q#+QG<9TQ)IcN^ro03EF_OYp#$$B-<?PEp88<2f
%T>HXY;1:U^?A0T,T>HYM"^MQp8Vgc(?WKN'ahP^D5?N\:[u0\8mCoZ`$KjXd<Wl5kJfXbU'HoYIm0TJKCt?)+jA]EbKieGbMq,RA
%M=guA#tu2^5<O0>*]lJ*Pc7\\c+30S'/=b5nNem1"9-BVI)V#^)Fr>rg,ITm&%AS(8^n\&=(Ff[*Vu&$):Q=3hh50jC:"`h+j%9X
%ri=l-j2=./5iPB>'qb7<CF_.JoX$sNeu6W#Kt<^m9cqh^P!:16-KISFLaT0O?SM<TbqThE1QBIg4/t/q?Q@0saH5J]RIT-HqBC4E
%)Q]RX6@^8S2:saf]GHH5XSnfS>T#r[=AIC">*Gg`OZp(^8-HL5SYu;j-/kc6@dK:A&/(Qr6VW3jhc'V^%FZF6J_$<;GKV]Y:/^YM
%5nOGEf5j(T1)Q[;DDHPM=WpU<VJ0Pk3+gB+?:^DS?['/i!bc41`EguKL&Eq`\kl+4m6Pe8,*O70cY-a\$hO16[ISJ+rGq#N_u,A=
%4BrA\6aCeMgoL#1g=n]mO%ZT.#A`Yue*m%M<6JMfGIU##$T_*u!>tQk(>bnl@)QgUG\R/VE)Cg;k<J2k3#3PR3.%gAGq^&#:.Di;
%atI(K0CgG)&"84.DL$SGmn<Zl_RPUDY@`>0S`Q2-qd=R2CSdBqp<i:'Nt=7b_,KC[ou6l"7;pRW@_o3M4?P5T+0Ih<:>l-C;5e%N
%S]+C@2JXgeF<I*nGW]eDH5M!(T^g<Y-^T.?[WXkMOLHMA/_gkd1R94L/`CUIJQPNEo?4BQ2,;*cZ%2erW=GkYG/!uM4&E-LSOuE?
%h=Didgi61_C;1>cN<P$"6_WCoK@9U.67>7\^Bst5I4Du[H4Q['q8;3m[>tiVYO6f[P36^Fh_9JXY=_P(HcC[c)?<RG(]!Xa2ntZ?
%SEthopR2&Y?/7/M^O?2E&&U6G8N[--C31.8V#&%$*_&M*UY,:#5:3+i"KT=NF1]))HERX-m+!RtA*WPtEO^"3q_/Ep<h,L#,%,Mn
%';DMW#?5JIYJ%@ENurj1laos%XgQci65a(t5AYqa:7\asL!HUDT_NJPVf_LoehSq-E1g1gEul6iIo/>a>(F+skK&Jaate]+?](c4
%j'2A<8EYuo7]1*2=$9(&a^]\$=BSr0P`H+GPqSaOhPmT#7piBF@4)W_[<VGna2"l[T,1l%XR0-]mlN0KT;2/T$Eme(]tk,.qVpm$
%>6fkqqhBS]3nuHiBDM8@@(Y+,`2YQ19rU:`C,LSnC]47SCM.qYm8L#n`H\ub($!])E>4]s=hD,gMU.1*W+b,U\bLJi/(P4Q^D+PM
%(JE-lqp+q`WrV%[0<Xtd5CZ^Z35=[-l$<a-fOCT`F4G0)E\N"/"P[[pXWDrUY.]7kE.@[o@BTj@@JC;3+cRjj4X'XlCoR?Fs6sg(
%?++XQ58!"O@2pL<LG@(5kDs/s/)6Jti^Lc;enNUO0ZLh`O(?6=Nb!rQHUjp`T]MH"Q9Kn][Jmk(+IOB5J[nNMpXLj_cdbRpc&L/0
%2O.H(K3KuZoC$mXKbs4&L?Q_!04$QZND@!^<,h8Kq<5XnUKi+g7i9CFhQ8/Nb$UeV&9HFWa6n!>li![pe[(f:`HH^^"M/qcm>EO1
%Hl[T@5PT9f,HuZFC[HK=b?QlXSOD0:#2$P7%jVa)iZ*XI[.V=,+'N[1L.qA48ik$B]Qt!D[<8noT?K_aJ(7kDY(,+g490S:"`;T5
%r-Ee-pf)4p_H1+PhZh^lj<@,1loT!`:LE!4Dg#;+Msd'Yq801f43*'2rIrD6]oC?en^MCI\H=''R)b91Rie[Ad0&'u,%.HQpGD>:
%T`nZ:rr'HUQ%M0mhj9BhAAr_2GHq'nDLP?m4OUo&^39p!&`-hS]"<0L;QBoKlL&&.iLtH`o:>RYYfk<%MI4rkg`6m"WiOLqa1&]i
%[Ba"Yp[_%_0-8n(2Eu)\8cmCf953OjDb!=@XTu&<^sQB)^nXeVs6O/tho(D`$S.ir+$Z;tjNU'lAUS,O;.QO!Ac<CA29Z1U^H>h:
%XY9B3Qs_7HZ`rUn5&YOt%j,3,Do1.cl-c+'bUm$H_BF3i^"XsK/A6=t:_6ffJSI*7oP]-\YPS,Ko^pj]juH%K7NR6\p5G;Y;YhOI
%"8.B24g'0^[T[QM?0rZUNr3q\QH42tm?Lkan%,1Oc?>oYA@%W"91&0WHhF^alfaI6fNqm6Z*mOmj)2D<CisWt^D)^T6E_.%c]+8j
%:&+D/qM45&IR:'n\,M#.n--P=0D&#J+*&/(\PulLrV9$k%m3#2A?,4]Z"IiHM^_8C>$0Z8pu*j9PR$<F=+_;5lRDXXG,J4fHp4]t
%erFsHh0j*W(;`S>L%HRCLYjNLf\`c1<m*kM&_Q2,\(?r'2NQIAZi0tuY%em@f).o#0@6PdPOmP/->DWB`<iYa['r((:]-2bCYq@X
%]T9YH#-59u^_MW+THN.[YIusM+#2bN]]Z&1I^cSh[f#\8.Pu5'iQ&ZV]@&:Q`M@2&IP4gR@L)&5=;O)55<<M-q5Ru]FLX<%D3)ic
%^'k5-`PW$X"KV-<n%Aq%I/gn4fm_q@lclKb0Vb1f.%[T/F("O.Hf2^,5:RcBpE:S7N]Lu)D@Sj[h7-OsojY%QkKC)WeEc9hC!d:+
%oJVAJoQVFDX56iK7o/OB@J&6nD";Z<]./$^I;9^dH[8THG]KtoIRiUY6ur7NLI"=MKrWgB]YsmC',lgRjlYhEN$Uq$8V:_AS=:&E
%rlSGaQ8ZGl[`tNUdJ22>[FHX;GPIh1Xq?%r4GlW3`aJ=hpZ/`g?>u6;]L&Z--EEga`9N\H[@]KIh6'_hlZKZE<A3Is'C26qBb(RM
%hGsgViVcNF=#_*Ss&]_$s$`$B&J:B4Vogu*hHI-lDV`'W/%1+t2JP#Vp6bPDb6Z*!`q"Sf?s$2TY<];*)XI(jI>g>4CX:;?X7D03
%o^t>?:`JlTg9_tp0#tihk9$9O!PocJ\_-W-mS]i(f4R6O..JC>cu/2&0-.1g=_hL2MQLO_7^:c5qjIrda63!1og<6^!V`gppcS(8
%Tj;Hn'$D<#[W]\>m.RHso&BB;L2rq^7hOp1^7f<0YLd]>T-;XneZZ%Z]?cW]aS0>Z<=5X*N]Qq'6Zi@Q6^K%[+sjmR/[4-uq+5uU
%3>sDdf,(k;/:\/D/>\UFMoAZfaVKiU(O)SH9)dVGhla)i/+_O^:Y*+D*.9QjM8T.9l/d6d<D5)B"s60K/#c+$k?cEJ`sChhUXl!t
%<U&hL,*dfS,7b3[f3\(+*Np92NPQ1Xop<`,4C<D511,50/'[2Q*GG694KnV'pQ"l"T@TKOdlAl\LM+YDL*57JiDo7_3.X5&j_301
%P80*>:q_YG8*lot;a\^fI5f&,E5qW%Q*k,KoY&Y$j*W_]a!`^_BaocIJ\i2$d9@"VPgunQhVoIGc1/\h6:]YnUY?$-?n$RErBr<4
%A2$#dRmlMIdI?#*rqn,4T9c(6:-LRRMh$6Sp=ed^qb-b(Mq-S08pKpKPtLHCqV'*TfAM\cY8.O^nTu:8reFF>L6'Ue]5@;E2T]?f
%C[]gYoC$R`?TbePb>Hp(;`m]/Y\ICZc3Jk!@+9mNV8q\-f=S`-3;V.qSpZ$t%Umf'n!2Eq?#!n\W$32R8R#kBdfqSifX\cdGg4!/
%VX4u2bib/(fBB>SSDF.L`'TPTUV=KZeK4,mgIp].`k)cM]$NCRU/(]E+tp^XJn4!/kKsV(.="1pdo(C0h\ka$@osC-EqF&0/bK&.
%\O-&[GS&Og7^DUXMq+LM;/[\1C>s?mJ7&1b">Y@S%ntcZ;>f1XL&KX&^(t(#](W65/ap?3V)_Ds?f/_RF_2$h`[Y94aV(QuYMt2b
%rURkWU\a98q\R4<YdfN8n$`on@7'g,3Y<AXrP!FDZ&3Z2EF1iGQ/L]s-k%WGeuROZ>r4dKeDBo5Pom,X]2r,GH`cromnR2Am9+b-
%;Y[<eHMc_]Bl'f7:ILU-D4Gi^I^mg1YC#kYEGL$;j``Xj/W?U4?\'l7<I"RJIJ:YUdeht4ke+<iQjU47/05W$bCbS[qr.F1g=+(R
%6-hgs[VEf4N!MRo]Q1N0qRHI6p&5G"[tkTLs"F\#;@-ahEN`id.\3XuQHG]adbBEo?s'Trh5SW3-jGBr%uWRtgfObdgP?WbW:'N@
%rjo.I,`WgMqZla@Si%qFXcb+T6H[*jDPVN+ApM)`p"NrLqt/H7jm1]7$V/.5o(-'U#3/JI(HD2qZFTpMf3<^uq@HiZX@W't'Mb*W
%kJf7QJ+HLS-_BDnQLB4HY_e8")`Kl]=Pm9f@/qo2_Jn3NXOj(,")>%.TA9r`YCF2(*l%(EDpL,2TDqgA5H,0UbQ%<)D[3Xgdr94%
%%/1PJEb2hm-.A_Y3o#8K_!ll,`Qj'\ifpU(s,>`F]02luA\EOfSGiC"VodAq:#fR#ST<gW?%9[M_)j?$E2e"-DSg'Ea%jl,-tPP-
%T70*sZ*MpGp?F%(?DgrorRDY7&<?2i9da<l!HC%'hR1]NmYK=$.#"3u]+l@E4HBNS2PI&[f:=:ujK0+0kRq8"rS#q-FN.hm<<l0s
%ZNB<\?Vh_1p[2R*fm^]dftnsB)5Oc$XE>JiIWcci(EJ@ZneHr/$N922%<7&acDqmE0jIQ>4dR1*GN22B6pX>8HDffnag'o/Z4rEW
%`-B-HBJd<26DJbWbjEUf(Ze7ad&-Yf4n*hh*^@NfSp2*qpjPsnB':rjS[pbTnbl*j3Y/(2$^bn4Y'DHX3[WrJN0([mJA/O\^Vu_U
%00i-l3(EN#gT31N;[Q$ca)[FZV(`lhQl.m(:a`d&70\M+)XI)J9iF8#E'Z/._5]lQm0N??c#gmd*UIf(=HpK;29h<n7^Z/F"CF/9
%F@S9M(F@)"4gs_,9MB_T/q,ZF6oXB6eQ!21K5go<2S8(J?k_urTPgOuW0mg=HV,BC*Qn&3pF17UH!8NU-;mc,IIsda)KdmbE3+^D
%8ON(_VCuM5@.peu>A"`mjbfJ"h>#eG'<TW!o9c#ao86RV/pl>8I+)j0Q'mX1F&/Z'dr+Q_\Z*oGT4^$8SSprpW[=7>rPcsZcCY6c
%R=J5^a@3EZ?0Y:<3?2l5?bQGQk.+oq?i+!SLR7,Q7-?dZnYJV9c#_<#f^.2*?pKu32rT/WSD\)Y/I?->Z)e9"<Ed.Rih\2[_qpG]
%EUjJ0IdaL!XO_hY,:CORjH6^MH-tn813&7YqDT:h`_KKg/=f`)FW5GoaCYN8WHH^JNZ.n#pMd0RrkO@L2lku-n\-LA(PKagkRX;j
%NpL:uVjKH^a(#X(U:&-a/)Ifp<#cE<A%nSFn+U(HrcOd=R$dCXrg:7k24\2Oqt[8).rHC'R5("#QjBPokHt][=pXjnrkDhBfi*jA
%?Q,?4M^Ma:PDif(2WGU0A=Z=F(5$i=LL=uOgcl[!%_K,LqZ7"R>4d-f,V@eI>hCjcUC\Y]T3X1OCoMbYS"Pr,?L/0J[,U9+X`nX_
%^,J)@7I>5Q]@aA+BC/ZPRo%?52[ZG<HbtD*i$rn/kP6m.iK+W)H&YD=5HlK:jQ<,"0Q<j:bqa`iGH^_8\M\+4>OZk\E?K[)RU\tq
%-4j.t=L;>L]9R[dfp"U$cLXkK_"g:So:ssN=PB%<a\+>^\mr48-&WK$j%d3%h#k!HP42rL"A?C^koRR[$.$cnLV4+R>S-F[0iPfJ
%%"J+^cEr0C]eCu",$I/-ci;7tZ1NFHg83:<#W:uNrR[P#gi?/T(&9rO!"-K$mTc8<NI2SSY0Z"T>q?cV_!l4pG4-<Wk5aBF7^#L4
%pD<C(3'6<bCmj1\L(b8,Fl'rdoVj<2<lLEQ#PHp#Uh37H8&Qc1QOaMFGN_J+?@[#OHn]s"_fq?UQ5)a!C?/*]?9e^<fC9<:55:-g
%g>Ra2hZZ/HZE,0eS!K+?C='E\IUH:!P\]G6'5Em7WlG.Ic+Fi;$(0i96c0<$koanjG)0Pa_pa&S1CYiV3Y#0Xk)I`NW1CDGi#PWA
%Dn676<A`PT+]&`8',m04Dk-EIP*kWk(;7r:E=<PPBnRU)/ho-fJ.7[+)s3]QRL5$tD9G7;\UND>Ch1Ainq$%p3S2M[7d)"I<VS16
%*'YNi5dq46C=%[C>OZ#gb-CFnGsP3W#`'?"dj<9DhVea=lio6SrAa"onBnQZ#k^Qs>XY*p)h8bCU3Y4\CZ\>=Y]?0He.b.aj`HIh
%.4%AM?o:YrU-hb65sPo..1"WcD'Qj*k(39kf[L/'#I9*qNecml*G5(t6SI7OD!3lB%P9[NZ!)N@+*;t!%r@H:=bF/J2a#^/*q9[i
%'WN,UNe>1ZD;Sh/1rk605&dDce1V=lj-YU_>+E5p'Gj;6K;b-1/c/94RgR<Y01gfV2Cl."")U+<;';hL#-R(`&JRM/Xr;CGn<XN7
%]G4P?(n=o?"PC']`jY2p9L*Ye#:&BAY/#Vh7XbaKNV%YN8do2p4i^<ld=>#5/Au"ETP>g2.fetAW$/qrBT4St$[S,_&o\iEBS-.)
%+8R,mYWsR1"'P2C&0i#e!LdV6MNV@JXdfP^1@SR8d-qJtB/qYN>ue!;6_R7U%^]Qn)ht#e^n#<\.+5oRq]Hh3FeJ@>#]Q0iLbnVK
%K;JXd!;b?Qo?^GVEIjOe@;P#/9]/P:h#NBtLu&X5SkX&g^-^^HqM(bI5]Mb)Vkf()_\#XaA^i7aE3P`ifO4X9I,Y-/)Kdt%[>uuL
%ZjegeM$4*@j5U@LLS5Q?VL^m&%CQ,H"6L0l!R]7Oa@+J[i9(XQk%t-MCi"\C3B#Z?J<eXS=Tdb!$If8Cc@oqdJcoOE1khkUTlhMl
%*84358sOMQ1]iG`IL%9ZQ\(n?"$0s`M8m./6#4gQ=#jq==g6p-=E0hq"=k&AX9R7nYc-dn5mnRkrK%r$5TK87b26X#l[XRb-S"s2
%;/@@4%I/[/0UGt=9+&UGjVkcKk_*HUM3\3VH&a75"q3*IP)JZ4^]IGjJE=9R0hkKR&reCF3`(r+>egWQ4YrT6_W+\T&Vs?hc1e"E
%?lf<Q6S_#Z"GZ4b6:Q`OCZ-Do9sF._A)!"g2AZL0Q&V7"E]""FlhSt9E*Y.4!.\C>l%1X$dl;us/q,(iF[>UqT=r#R<n]sjN>cIj
%$p]FFNAn_9Qa4HI&d(%\CG=!A6%35XWfm`e+>ac[!DU^+S)ro2jPSDbO>Tj'^nuBfaA@I28joaGd)@'u`+&r($A8[P+MeoS9#NKL
%=A7=c"R$(%g&M3RVm#98pXJTg,R1OL6";#S$S9(1BK2[YW%j<Qn\Bp"&TJ9+@7Zq1oK;#i(\>a3@?_sdl7:7l!b6V/15E"i!TUh5
%:t4Et6J7k8(N`W`L[b_sLU;QB=Q"O$S<QJeDBk7J#"-D.0q3o;Fu^u9n3E'l&Oh(t*V*Gc_(H-^TnoceKN(7-PXZj?,ET/7A'T5F
%+jMXV6j5aaG0Y`$'4t,M^r<%I4=UMUU$Zk]%#F[X(ukoRJLqk$'T=ij5uiR#fiFULnA(2Z!$BV*Z=7JhS62OH&oekAN3s5W/U%99
%g#\m,_fpcJeU3%)D8t64ho"r"?47AYr@1MkL+%4&W*'32Cf34nA*h3#<C^G"EAkU<EYI5;eA>c)JE>N4-cD.'fa),ITj)#1'/7]_
%#?;e<@E/)X!5V@-!e<PfM&-8,N-A2/M:deQ`Z"]<`[$MLb<],5`"%0fK+D]XAl9@[F9E8r*8?FO!_4GX,ET0B6Vs#)E)nhAW.X:#
%)4W9D/B^Rd!s%`(#iim/du74_J;?pR0qR15@>*27N-!--;$4C`@8$oFh?]<+JFSMZ.-?8='.9W=Lt`2GXEf'n!ltZbB:"7F%e0)6
%+?%Mbh?XeM_TZGDI_6Bi).&hr7Nu^pODtIWK]e+(0[;6T731k_9Tfn2)aVmjJ.EoX#$oGs68MA.,8%Bs(_:E&6JW3D%iH&@1kj>3
%+X0Sl3Fe-R_5e@Xa+Aop&;Gh@6g`=@3A0^Y@uebD`C)'#PkaR(a;SH:#Hf7=;H12\&Scj4)1[H[E=cF"^nm=s2%u^`(kUEil-i65
%6;e=B0M30&JsXP.P_eg(%8-ggWYiYtVF\WR;B!ptE_N^6.4Nig>$.]b5CEF%s+C?hgt[;Fh:lJmqn(N[f7i_K@QmOWQn-45>Dk5>
%\4YcT"&`J_?Pr6f1b%o;dt/?IH14\)KarOokC*t*E.;Cjd0W,hk(u2&k3<qZL-_>&B%"YS>K!-\KZ7FcR12b=#^$Is)C3Mm#@K>>
%>CrG4]aUP9dhi'.FTVR0R1AKuqN*n[,_:ML*`"dbSfr/$W28\\==PWU@,_WnD-8*j"Sih^[d3fmb]be^&>FR_L%jMVc$)<+/&"g8
%%$@p]ppM1$G!Ir),&%H.5m4>`i;c9e/uAtA"J/=/Ud@J\&j3pZJJd*.9u735+GBFhKWRS&*la]gJXR#>82*o66#`6EORgs2F?nTr
%[!LZQ_Y?S'VH4/dk^i[d6t],f7&b1DYW,bH+KCPIN5:kk<qWtH0nDl\@A9>_4c%1gHn0e:_U5hU2hG9C6RhGI0a.ZN\41]M>D(9\
%E$KFm&3(>`"3R`];b2adV*L7ZVEQDFTg0.[$A$Ca1ISRC6,frQ-/4WF67LG?^pjjoT9@Tn7HP"WGa:Y[<!u'49S-+K)@_D&P0laT
%H*NTE1^9d5msqk,l^KrPUNJm@<^V@>3:kdo8CAHoJA36@iWar[FO3u1U.=g8:V%S/TE5M@Pt*87(e"IYhmrH*X_hf(Ds6Kp<gU=u
%1bWR2a[Fb45qgj/L-s%8fg/<,H.Yt$XE"k''Nc&(%7ZDVK'[K>-\j_!63^[:-?EYN2?5#@Ft%WL]"g4QYQU:)gW6O/TSjIK7sR(`
%_!"./0eH)eK`\:p6n@[B,,lPFSdMdDO46dn$-ij1%lSk%69.o<!bo29,gdKcR5<25'=1W%B5k]/#Vi*3M'-oI'Hj^R*_o!.6@/c5
%4g_^+$ZJ*:mC=D]J;=<m+is]q!Y'f06&WP^4.(d=IM!!0GS!=hBUr83_g0u;WQ.;Dj*V:'_9gnE(_ZS:KduEAR!qNmPHk`E<[]27
%-oaFNZ/HCRP9ia,piLM0/&J:p'.GIU]]e<RO?F'Gq6!s-o.VljBa!IJ!-W%/<>gN7'WOup4e%22B9-N&\\E!4+M%g+-J!`HZXJ_B
%4NoK9U2VhTe;IGmT\#'bX_mkodmT5s4.e>5VCL%_rP6p!Lj<*bF%1km4ID"m63mE^/7oR1=:Ae\B]"0Q#;*YBq7*M?"M&NthPeiu
%S$iJg"l9g9ruTJVL2_#Td)VCZ<t7OC=9fh(3!^97o3_n-P6$dq\m-pFKBEn8E1,"Kn:6(qg1hNZ<N`nE"Q0=h.2p--+nZ>`&%7Om
%!)@V1p=j<jZnN(C5lE[BMJjk-8X#VYbCoYA<gI!L%t$mg-BrMM!irUe#+>sB\ia2)dF5(fIenjp'u+O3EB&\"-;Jpn]c9i30Y5Hk
%q^A\k60P9J7g4HO:E3'N`P<bD.UN@C2Y`Hd_W'm_\;KVWfTT\i?oZ>H"!@tI@j\GF@4oToAHJLDOMXhZd%Aef/i/*qq8!Dhp:AmA
%'4Yj#$3Clq-YO';pD3Y</f]WX-)<6!e6[s2XFU&P;?FPl$L8/TL'\-XrjHgTV)ST;ZRs:nBgWaL\`oR2`'Ido"7$#pNhq:>fg11_
%G6<hcr^I@:O9KBSk*QYHL/8L$'B9Vck!G#DTLm#6"umiM-jfuV_UfX-1O5R^GjpZHKo'/Y`Y9O^:"r%].k1[aVG419cuf%$E%+gC
%<F@=2$Q!bq.EDhBm0AuBN%:b?cl7mn3iueD!ErQY@J&OrU6((EbjT8^d.K*l<uAq?#!0)j?"8j1JM1+T&,.^7MPK.W\B!:Ped+=m
%0Yr"4*!ucd?:_eaO'3V\!'O/>_J5'=i!S>?-A-**TLZ"/q.GPh,G?T0Z/qCT)#/9]dM:0[J?E-eP!_r5[NX>pFE_*Zmc#9L9]RNH
%731/O,`JR\I;8s(X)a.nma8@TR""ab_;)4j,e79U0GeA*f85V`_r?-!/o'DRV]2[+@BjQdB8u5tX%C5$ZU^@k'.q.F@T"Bd"R+=i
%M!6h@Zo'2#ee#N."U4CcM8macbNGW6)n7_gJX$[mYseio=S+juOSE7WG,':'bnD3l\QK4Y*LkVIdP+*CL<3%T9`8B>Vq;o'Nq-U3
%B9!9P+bF,-/dT;O,AAS8F7d0_Weo%.X\#13\sbsJjUlsVG68\aVBc!V#BMr#GCB,X,:oL\)#cG0Sq*ePJ(pjQ'bWe:Y#Td.9uFaa
%#bHl&OoRZ[i5R<K#)k#LY_YmSYaQCU\5?3>\&fs'_i)W>Z&HhoMBIS"JHfi;$Z.=joOE^:Jq9(d7S5RoeYq4rR:ApFZ!oC@*%TsC
%,)"Rh5fm+r.UkTp`]D`>hqlmr5qF522/r2tY4,UXlk#BYAB1")N%$+fkJqZU2][`KS7t@K8c,/i+D<Z.]rIZ=9&5gp%SRt8Am9N+
%((PFYKRb]fqN_=7&`R:]Mh-[DZp2FH]jTKh*3m;F:^9H4:-1E;C/TRa*jDAS<(Ml;VEe\08"[e4+<nOUD&*!TiG<I0E#Xps=u7Q8
%BdI2jnNH.>-7+UM"!Yg^"TCMsX353<BII_(01.RC$Il1SUi]70NA2k2hI9B7Gg3H4r[]\(S%KO],fU#j-+AbrDGa:M;G$t--,C^d
%9*qIVgS_$28I>=k^^:s8L`OnpWTrS9`*NR9Xb]M:/WFN+;Mo_Z;F9[iKKal$'?$T`kpn%!"p60\MNi!U;ArG*&0UkYRi$,^?b<g%
%)j=0M=YH8n$nr)#H+aX6lmYc?6BT\J<AeeG7D*UhKsks\oWo\Z1lm^-#iTT=:iIA9MHVh`%4.h^\#6fW.?U)eYm$=(\2jYm=(n$V
%9P??2oeJqAVa0&F77t$geJOL5if-OO1=5K6fSDo52f(D31r@n$J]+Z;V-B1KL6*%n6(Vr!:6__)k\?T.Ju`mWcT+inN"ZCf:)#-W
%YHF"-@_m_6iCX@D(CM%5:#"XQ=uc+mnf#kK85-@ikih0-l<'sCMkV+=P"j-j\@o]JUkjPu+_P<eX0NJ#cTjn2^__(!K4,!P0TW0\
%(CYE!:_]+h^e$>60ZRpm81DQJ"A,3fgq(Ql6u3+;5q)Ra7'XQnaXn_`>;RrAD3Q/nn7,A5iS^3d^hYCXLp4g>'@EUl9u-(S&C)=!
%ALes&;+mZ&\We;p\<Oeq)huP.2/tRY`T]0HZOqa#[h5U<77h4W$-j<Da.rj8'jLr!/g[a)@dd>c'+gco]1)C-KX&Q`d0`T?[8bc!
%Uni9G;M$#@&7[)6eq'fO&m5fpL1iIh0]Fu7't#G=%IG_"*Zmlm0ld)N*@.Fka_e_[-D!hKH1,F"Zc>>aMMP6]d\oV^--[Bm&h[6h
%*dcDW'mu&Q30$C3BM^E&;,Zd!PD,0^M7^U:\;\5^"5hpkb6V0`nDjeK$%p1iH/E:gF2pQ!Lko$[d&9DdUPLi],E,<JR#h_]0XEcf
%L1iIh0]Fu7't#G=%4NT,PI%C$PTY5?BbNLn&hSe+6&:?c)SC,J_V!nABS@e0>,l@K;UW34.8a-u[.psc"@"6BH5t=K6t!rM6n2qK
%;Ar/"&<\!f"7?Hg`:4i8a\h?YB-8D4-[e&oRjfTu_D+kVHA[rI#$$Z,1XNeR,"YT2)AN$N"4utNVoTIpL&s6AMNi!U;ApjlY'11b
%ML_FPRXr"mQpsLk"V^cfUHr/SYt[>blA"4[Gof>'>mo8h94D0T!aSUg\&(h+:&?5G+K]mu)Dhm.F6b#596igX=F%q%#N7Lq"3a]5
%oftB?g`=F$>bK-DHV5FJn++/*AR@!m(lfVh<*QD;;Rs/O%jpOr-.d]qZ!k^q_+UWr4d\W[j>&oMW!>LuMgVcnM>O&%,QfQ0@Wo,I
%7^<rUK0jD=+j7ZS7l_4fVEp>"JiFku#"'<.\DSBPFSsMr0kVb6``"_$iSMNg^/2$RJUFAMNLL-iM'*fIZJlut3:O3QEGJQFit:!^
%">GFH>JEhC+=)R;O1T[VBe0=d!jk94\[Wd@3>!YD07XN_8Y?;o*6A(4*"6e)#OY5B!kFh^#>RrHIaFXZ7S:O6Rgpqp;bFKR;`%5^
%0$?&)ZD<793OHlsK\1,DRd(JOq[Is9Tdf]!@&su;Al=1[%Pf23VBsi`;aJrRe[42GguKD6^nFJl:L$_-O]Q'9mY<-5eBNbj-HsC#
%LCiK3YdLFB&Q07Am91he7f&.r%C[0BcT2p<j7F;<f8*siF=..WHl0p.D@PU)Gj$&??Aanc+VAbR,CZ&`lXm,/FjhX^%7hg<Bi7k6
%kI:&qW4BWp#1J>&fX6Eea.;(OPf9c;GQFB"31.Pe1"[hE^'-uGn!At.'nt.kq1UjHLat=`-?20mAfG3!$k/OAi:^T>RF#>H^p,VK
%F3J<-&8nJ7!936(b(`Cl-DaC>)J>^q$eE*LmQU/\T]$%]51hdB`5@8<;Q:9B2k@bS(t_<GR.:5toITDGZ-i<bCD*kaM7`LFZ*d.C
%Fu43$d)OQ"\?X.3UsER[i19qh3hdYLeFD::)Wh%`&k_$?:2Q>D)Rkl3[&0S5C(+Xp%K1N$W#rdm'hOe$E1=/6GIhm*+PRQ^Z[k\C
%8Lhfifo4=[?F$5<&iScj`\#k0BZ9)75pk%Dkqjq[b*TNqKAN#+4)?!M-NVqufJX<!iHuWDWE=!,I=,+&b3lqC4^_HFTWL$_4Z^37
%QZ<r&PW#\*qM*c3JOD3L/9YJ^Gc^uu?\Xm2BqV8&[2C;,O$P@6NJ0@2j5?[Q+<LDaY@'j;>FEKb3L;YuUk@m!RL'CW"g7ctXUIlj
%C`Dn0q/aCfVNeSY9#?IZ!btP75k-C;^d@"!K4chs[R1.fo#OIh84e-6QJlS?>[0CA/Hm*iida2'@%J6l/X\;,#nV=\HPB5OJpOWf
%\2M>)Lu3B?EJ'>)F9(G?:O@2:=A504'Ng?GGfEC8G?Vk[mC=[5K?)=@2u[bG#ekiL=E7>Z`)%q^)7lor$ta$WG_dC^!l3PX>WeGA
%Brie%'FBH]MCXhkEQGTlaN!g)GVOhIljsR,pjRI2b47q,+4$jMLpf`d<1e=:b<X-7rO*?3O8!$aZrIbdLM2<YB_iq,,*Jb=kS<#Z
%Bo(MB0qF:K*o5sD.=\(Se_$J0hcHSkKe/6Dga#5'OCfGkiQ42=%1XG([E'/**3o%P+lD1p""']hD1tV%aV6(\:.WQ(p`Lp00g0=i
%_L&+pA2F:=drK+dSAkVL)IUQQ1ZZpf^CYHC\I_+36Ndp[0>a@n4Wdlq<M:@L+L]c(Amj_B_ZI(nI]W5,kI9Fu2D/^EVV;'(42q@2
%O-F#(+hnSq1uU[Y5nfKn_XR+23c]&sB`Ls5%H&!l;f'710YF#G&X!\pPBc+_6lGaO6.9rK&h%`X-!!`K>n-JahGOi)TgAEo@-YWC
%%RknC@OQCgK#S&Z/HQ+p@Zl>2\60dORs+(B\=X`\3_U_2O*ClO1!)lW5qsp\\UD[CJQE2CI(\#52dlp##o*5r2U8'BKr`TT8:A/5
%_A7K%"2'Sf:'.Y=pZ#/%(DD)T28b)`d,E)sVC1.K"uAE._<[&q]>=X]jJ)g\IOMAc^hrJK<tF%$b#8ZKhO!5)E@`Q*R!#p?r'oI0
%d,>g&l@tG3-Tk<!nh&a?2(0JkR1nL$)E2BX#fPEFG&4_d*R@r)6mX!K@ZhJ!)i2sTeKeh,BAGi>-["ro%730EUf(I.S1@Jb@>)bY
%3J#g$+u"*=6JiLVM&i=?&g8`);\FP2"F8,m7Nm>U3.X3<J[HD<SIhC*FW;tZ4STNkdJ'IXosg_>2[a)@fVB2e?JFPAe;8f(7;=CG
%d1O5PXbS9FEDqN>o=GRMqa,QO,#lZ%O7'$!W@P47e:j)bLqCM)K[E*_GVGhK^#b]ICJAu%8\6jE1Iedg,8ZXt2GbT2ciM(8p0V$]
%D/o]spb>/hRJ^^Yg9O+)h"E<q,:+dkON*K#S4`Vq1oO+7!HW:-&1[3hT.b@\.!:@@6WrG%<%#&,"F\]q4B$o[j&(Cl)A5;#DnIJc
%DTN-3>g"7C%[c1:'9c>j8Vs6]"oabhEL/lP@%W>*Yo*8:mD'.LgRI8U3OjujL^K7SWopF^<$V!V$$eA?SVXFU_2a9=Ks$grhFrWn
%i"U^u4*"fI'ObC!:-`fs^H@QHA!E#%:I%osePmTa4SWJoP@p=<CZ2L'_Sh:j7kCU@GeD'eck0+t,+.n+&rB]1,K(k*eO3a\]r.$<
%&r_\u:bNAa\.K0E+XLC&_W+aaFJhuRe:URV1]`"a;_/O-`.t:Po/JHAiY_cKE&&.>T"%6<0FZWn^_ZZ'+mRFu8m*=p&HtnH[0>V0
%Pbo?460Xn49'8<13'0Efp!-QpBPb%+&0p*R?I=TOaYB[O>oOSc^isp$_#T\W#XN,"%'#4n9&*&XTj]@np(Au[R1B#k%)KRRkV+a/
%co"(6(l$h^JR_<BW%g!>BZeU%='5Y6d'#q&CTo9RMb`<j_lcNGifuB]/#r)*hi0q35&:Aer]>hnTiYT=`'rkHKLsS19mA'I9D"O%
%l9_/0NA4GG+<?Xga::WIA;*@cGQc<r<5];*^_Neb;mjt:JK5*=Zjd>\]Bmt3r=V<)MnTAf0.LR!M'3>f5S30<gl5fH_'BF'([lc^
%#[TOtcL-`q0`sR;l4FG>Ye:(oW$\6[dpc-F0(">s7qjNL>p8ls*]Hf=H3pVU1Z?:qge9:('h@d*\B4I1];0BH-L*0#;pfUZ3/F/C
%BF6="//`jrTEMtWB];%Ud#hO;&92^9CP_]:Es4mG?6\ZhRDg!)33Y4qDJ4>&'FgGg82K^,)f=RK:5ZqS0\d4jpqgtTSm6<R:r]ae
%K"(q,O7L,"_\D+l-m%sRD5J]22!'R,>;(2t^sP_$8PQdK,7n"?:ui03XNE8f&OUuaZ$\SQe^%UJi_.-!ED-te/^YJ8-kE5EEm74O
%eJJY+#,X'*&0_JG.&4S`oY55rn2aO-2j_H\R&eMH.hJoS#h2-h"_.0l\>:,90KqAD+X>lgSOoKSW1$aK=##U[>=Y.<ck:V@\f*UD
%k([@8.`4OO/P"S!N4p=NU0[mAVtihF+3aUDG]POgmYWfRFKL3:fG^j25s3=>m[rXfVkXiT90!4uf4X0dU0KKCBt,M=M5/uHGp9Xl
%f85=:C]\?]i*k_,6ptbci$a=9G[fIE9R\*)$.$V\PjmB^hpi##AAu`DK$`"T)aQ<WIdC4^F]?1ZoBLfn$1J-<3fQDP+.dM<$LD!6
%,Euk!L>l?8)>5clkpW=r-hIE55M3]OaMqAd,HA5d0OSQOL4X=>Q5l<]69<7;r.,?N@l0m$^-dj$4/-nNp9-nu226^]X\`=dU+)n5
%N5?\$!!pUI&JjB6AqhrWJ;6TVQ_DqHMO06gnr@T^+WY,.0#n.740C,<)l3QO>*<O0rQShc225!O.^!>JmTe@!)9RabLp$:UnLcUF
%<fkndUq;Uf12DQ'dCWj,49m<Dhi<7G?IL*iPnb^M;jpe&UqXl"Q>?uLalrVf*,[YdjTGu\)<$]?1"pG`^o85"OH+&WIpfY2VKq.R
%i6>floHoM70O2+m'VX&:9%T8`eT+,&*Rtl'L`_CrLsraj[/=QmF5Nj+j_;>#"BINrqVlh#C@(b<PS(F$[7&es65p>,]VX>je<*;N
%+D6Tb9Qj^q#,>%R[U%&#0bFEo=4AB1D5WM]NZ%9QUfQg8nBD$!"u^J7`Y\GQ%FSP^VVW9WgPMqn,i]s6mr+6%QUfD*!,T*#CFPek
%MAm>u;"!k_`I>QnW1m*_V43:%IQ(,;@\/Is]hPCCD7,)LGKFJuBJkNJQj&UlSYhL/1())^?&4C6GO,[SZ:$1aUp]lGU"'te3c3%*
%F>SPJO?J(b>MtH:9PI-Z`]W3kF-+$ZZ(]#ga_'SpmPa1@!fT*$#0@".5t`gB.eVBc4?)sn^3R`)@[1Ut0N/UF9$kFL,AsFcC=L6T
%^8qg%nP,-hP0>=Fk"R,]$E]1Tb80B`,<=s[3(2Pdd\J;a!OoD_CEH6_cn^[iB]2f'RX#TNNMA*Iop=?E9d(P-'J<r$`LGSXZfC.q
%q48bB*gNlbN500:`9`J>YLqm7TRL.[42nL))ESXYI!k%/)fi/$"7[">&PoaR;aLBW&`(`Md,$98#4CG*XJecsEts7+%XPW"1/rJ7
%bK!OIp,Lq1GaZ9s'B75*]K1;HQOjqOjXpY90bEJ"gfQ'lT*@V3k(slk<5mDWp&moNM3g9ML5H;1IMf83TZsVQ5k[1YORAF,!4'X^
%GuB(ma<&C&JLT9=%^O,0)i\XR'0u7N?D6XY#2/#rV79*JBTPB[4#[o(SNF:"s4^J&O#Ol7mNdu!,E?%`&>u$<q\t:'/T/\IQV^MJ
%n]hnSCj([i782p5kGZUpCOtW3!mop.mA4mg3aW*NR4PTJ*BYO$Y/Ep;>rp1YDNhrl,D-,R9A*bO@1P$D&DX(5\6VMX`J^'X$@_IO
%BGfSI]oU:$CuZ3b/j-QhmPn[22A&c(\"dfg'U^+E]QBSPO&6%8=.>!'@mJ?F%[hP%L8GdlBs(SBWM%:=60HZ(kr`!K]Ud9BF'Y:;
%"$Q0tS1<?8(=3*m@X&JAfQ&ZK^-Z3eZPr>Q7`"kE[FKcbC2A:<Q=n?r:S^,k"J%-m&GXBa&_:Y%ZhgOUWM(c(p6[?eePI4j0o'9H
%V9u]HK"/Q@'U(NDneHG@<06mXN]3fW'[2YW1r<D;`;ALSoU64R<)XN_kbJQ[\;r8H]f6(bW-C=b#&+<LQt)r]$?;\EJY?hC8=eB=
%l"sk?(uF"5#%!F$LorH:&n?lbA:D1N,$EjN%^I'cYsVl'C^BsM@[0fA2Vp;?et'Vc@`N0cZg_Y/7+4#,husjaPY:0dkT4`eja_0X
%j*83N.?_q(`=Q%C"r1L6Pi@+mKsK\4*WaY6X?l3[d3'dpn7<)C<J"oW%(!Tk!7dp%<$?DS('[u:>cJX0]ms$ZJ?#e@F/Zln%3Q)0
%q^3YD0=\p&MeJ%7dK@L@6L)M$j>8>%[3d)o&QrNk9bLoOi3".pA@h9SRjjY6E.=r6QT[[?<pJ'oNQaA:>8bsnV2+(Rb[@lOGT,$u
%L7"TU2&t*Sl,UiT9K.osStk7kFokoI$Bno'7,q]1^AZ(Da0l&GU5X]<Ib)FFNl\rmi%c:We]>\J%@<j?3/Zib*a<.hdSW^>X#9Fo
%6=;,j`-jsiR&j,ZS@#/TN[?6o!?V$X$3Rp[bY)!8;,1:n84V\T@c#$:;)t](12n1hQ)Ke<N&7;kN[?6Of>%R3$Lrj/hbR:O;,1:n
%84O=.U;\gL8qV&cTN?0Q/(>spXXU'@M$id,Yt:LkE9BQLe/=!]aq92(0O>^42,JN:]K3^Rg()q,FUViG)23/h;'Ffg@3mc8o1D<S
%3e_RZqWW)Y;4/e=Kc.(QJq0Z*0U.dP'[kAsKcs3ZG-XFV4fIFd?mmD).AWa/$?7F=^""u@Tn=4p1FZ.T1=D+J3guuYc_<HlKu*Lt
%3L65;:nsPfVN?fb.`D54h;j+%\NUk20*4.BrHpYpW"-.QY*Z4"=$H#I$"YM4XXU'@nHs8'JEnN9kL.O*')Za6O_,<Ud6r[H^+)%?
%1AD=^&Hp*'e0l]H.AW_q$9bYV/l<d_VG;:X6TJjT+WX9VLpOi<-7d#Y"c^d=%-=9BKlf.X+YHEV_,q(4H'0[aTgfo67NidH<+t<P
%P,-Oa/jHp*,uu0V3GD22*DKK=Xu*i]4C00PYk!uM_ba*3;b0Cl'aA,CAthV!Cu\;jW)6;n;b0F=(&GGte4;%uD,O,T4re.0)23/h
%;5'P)/2O7^FSI"Q.Lea*Bh]`k9iU?)f"sh'%c.k`*#/nDPTp7/@%t(0=/M,o"W^>lP+DhE3Fto.*K=-V-^c!%XF27_!`%5]JW):0
%4rm?sBB-/QjG9H2CM$IO(s5Ec$L)5u65R*h,^g'53R(=q4ri[[22--/;'?uCE0:k<hF6]WI34Jid[EK`)Qtj5/=W,.)8)'V9_ppm
%AY^2tF>Qi<hYT#cpYr1.Z%,Z'S?RH+*DKMrap["aeN%"=PF`:T3GD22*DKLhS"T_bp>ML.`l8-K3GD22*K=&IXqLDk.YF(Lphiu@
%(og/K$L)5u6G2J:3V-F!CUiUT</.0<[&/qF-7X+WB4I=1&8t?;qE>n\Uc!jJ1f5F1h(&&[(#mA4deD]K-`nhnU[\[cI-nOS-7d#-
%+HnejN\]%A69:R6d)#lY#tp0MOIP7Z%BkkeS@#/TN[?6o*4fi1.g4bM9]d<Sb"6@Ul"HeX?b?Cj;5&ce83^7N7QG0W+WX9VLl$1'
%3@mkZXI[QqE0QR;'[kBRKpJ"5P&[[:@7iQEqJ_Zrec\me6u>]Uo5-EhSW,;>FHb6hPZ--Ida:I:G^I/ge/6@Dn)KG[(P/*\IQecH
%<!Ro1@h5j0!aN9/l3fs>Bh]`kNE:r#Ra=e&T1rBU-QC-'7[d1F7hZWseP'kBX:S/F-aO:&jeObfF>QjgLWT+_b(s+7-WPnpS@#/T
%N[?4ao<t(R69NGZoN`?Uksg`3K(6GAmH^pIS0K`Fj!EM&N\\b969:R6&FX`IP57LH%4*#:NcNR:69:R6&?jguP5=1JG[5Vn?PppW
%CC9<>U;AU&Lr6*p$Ln045Nu9(P`sZ4da;0NQa,;lc[3$VKmQ0-:L,+YMB/H!Xi=2XVRN!og#FLmHWK:M9R<IMX=@1E:Mb&`<G@]F
%eHAdd7!1-L7&5Md>^<UpFZrjorfUYH#24<EPW21RSkhj6!Eqn-)dUG*.i5!-?h+pJA;&rb>j>Vu9d(O:\*qc%IYjE=d,d)2?%"$-
%Hf3E_Y3@[F8kXXW?-S+d[qif94rtW=&0eol'6]2$oBD2:R>R)DdA0hVJN^4?@cIZB.SfsTh>cSm2\+flFu#_8.g"!U&G(T!Xi1Ef
%`\`>RET\g."0[9lm>c=8RCj3["H4u<_3cgi.>q(UpgOdCX0@Ob)5j#3I]-RSAD)!%'HL;qCY$J!!4EYEn/4RI\]'\D%QYHVi#<sE
%EVL!R!@d'.;O?t,$7Wri/\u1*(K<&38$NZcWE2mZZ92WRZ+$]uI+9*-]GHD;7X-E)PcrVJ:T'u8oD42'4:iSOEef\DaB)k*'T\QK
%E_EZ,kr&*n3-]@?QiWD-'bWp$_Dr%!4'(hk#+!A-1(&8^^u\?RGZ0bGX+N^$R?DeoTp"r!kt+B">AB1lGf0_<-#j"^hA'3gn`b3l
%g?rW/Le]_c]<6jEQ)GD)B/m0:0nf*kP?5UDac5(5XAHq4GkXagUMF>Wee!3BYe6b5:]H1O`OXfhCV^MCSD<^4<urFn0i^a8f-J^!
%`HttFl/P`>E`GiqPn+fA?`Zn=fYKJ7Q9:2gdNu(<6`Y2@Doe#a3&1j*W2;iWK(7'>BK>L:'k_8AMUt4IQYGKB4u\_4Jq<Ar[)En7
%Ma;Sl0P*p/N`O-((dB];L0AicS?C8#.U`nF6QX;bO>,/uf*YQB-o`,RN`CZMH>F*BM7?DZ$$T-6S1Ct(B[fG(1-qj23/"8GK<D=L
%O^id]qu)^nYrcCXc9ll*N%4r[KiV\3m1#D;G;Y(rPYnr\,@VK'\\=/il\X@[/:%C=fl2X;s4`a,/gX,fA'I8&:3S(*a;4Loe]"j5
%K`L#VEH:8dR9#@"/"ok"71%+=cEh>I,%S<o`Tr=G&Mjhq>VgE#D.A`kY8tK.<hV+SX;ZXP6A[W&"DX8OTl^>pPhT5YI>.cI0t0`d
%"W8/5%9/is.#p+Q3[I`<64H7i?,Gg\",9c@(mqSKd5*TW=="kpbV3#ebc%LaZ"bRa8em6k4^jM:F"SdaCg4lM$H:14jN0NDigUJB
%\2@S^(5huad,PNsJfKo&<=ngQSj+pb=@#"3(Sdi=<GP/oc!H@FC'(3?o<AXAG;J(ea>d%Yj@$;T$Z[C]Eas-P$AN3[`51W(^bj1;
%(88<rk\Q(p#pMCf7EB!0Eo]r$Z#UUc!6D*-:eY=:jW```Ch-M%(563E-F/GA?&jh/;B(gY&t+_4.1VOcdjQ#8K^)$9=Q78!#6qjV
%=@npCP8>a)/rF;^W'sNVA/aPRj/?diW^BE'i[#qWLhU.VMa:5[P>!Dtb.@6!R@**Fn8q=]-7hBq1#"VhDB1HW-QQ`/6Q*h$D%%.[
%R?:FVS(5\55N@loIR#L*2u2J\D2\pK,r$h-L7sKA7SYgY>W,Jn(;A2;8D5hR1-O*"U`&rno=0L[E8;a0%S]X9b!Y>h6/:P_a+u0t
%CRGBpP&X<3KruQH*R+mlZA<!rNf-/#)j?-l(]5/2MbBgM>S3u?89^TE/=ArYnKc*8i&f:qQ4-P;3e#;9Bdb;^NH0kq<&QM37#OAd
%'9cP:1bYcG+K:>l7Z!)t9-bf!JQuRie1J&tMUf4ci;q.VBuY*<_huVP'+_ejUD?-MH"iMdMkdS3WX^V8LmOLA,,TKK-3Hgj.2=-\
%"7o*-;Ht.%nqp9"6u9RV<ugk!6T6/B>\S6GfRO+GO`q6`EZ3pM@jmOC$l+cOQ"W`Wgr)SrZ-<Yk5tIE'aefcSiECu\]mI<hkB\j%
%0A$4*][`Ag8$j;>(Gha'ijP/JdO8mOOm1Hi1<\!gA<u,gjc.o?5]=@nN0r'9K-G1MWn:qE<9(u0US^\qkfch9)FKpiBiM-fS+f#u
%Y!=W9In<jVd_W5V8t,U(?URY]"6>oJ;6FUQQ'rIg&h/q)L235i>8Q@POQ=DlUP*7<R6_naFQ06V7SGr@'T730MQC(fO]pZl&h@K@
%W<HV7*SC:0"4KQ%am3=GMg-'g,9B<K76IYT(@a'oFi;1do)H2nDEX?JaHbDi!<%]A7=`Bs[<]MLNfM/1JHOOAgB7)sTTSZ.#O%D2
%QINqPHZQ:pP/2S?QW'kG,o(7H94b7gRs,'hN//5?CXZXmicSM?W/F?$.uREBkj<nuYA>lK:I4T`HgBrc(:nrGnV,Vt?pNO']<&EF
%G,9Omg'6tn#rHf%;]oLScWS9pc*g_RgMBL2IbbFU6cZ7f8875gZ`$V_gj<4^aXe%8%>g.(=^eN[<.1%a.u]<VF0,(VfFUrgGA7NQ
%Bsjm5^F`13Lokj(0\aOZ_JET1kI\c<a6Uh1&o3p[moX%^#.@g55CCNL;Y"r[`og%CC?B;!G%*&'.ps1&f#b)HX>86oZc\@YMJ9`t
%kAY!;<ro;]J6$Fo3h'uDS"4mH)dR*a+T%tLX>>LoW)o@T\s49i$[I./0Ja*BqjueYAgNMLrOO/)L)cS%nSH,rZAl$;\-cG5G#rEZ
%]P4$AnYR]*F48rJa6U6/6+5o56bdDG-/ITCd;rVAC8NKd\8V*L`(/-p?8E@`pNBjTqHh":DX(6cEOJ`lF3Uo7pJP=_*7/HFJP*7C
%EO0_i@l"k+-$&CGD;f+4D$e<im#n0VEXV88>#`,?8m?`#[I,3E/_i^*:618",A'tr+L<L%a<oZIZsu&4Z?7p&*R/gH(!_c)dIh[n
%9-`6">A1LoU=u)Bh!4I5f8Q)2UD^>=#HuI_[_+(MT[fJ5Q"HNFB'3L@Ae&!s<Rn+N?Oq8EQpWJo]oT3<$AOdHN>:uUQb*i3"57`R
%h9_k#DU`F&(0))j<O*@eeXAj8SZUb`gDsUs=_K:d2^@p!Y<MeBA_5Ua,dQ`P^F&?I=Dpr]_CW',etT_YG&_;km!?o;1Mnu7Cqm?Z
%chDeAWoS\2CCX=4D2OgRHQAUO,`>(B/md,^7e^u'6_<.ETaf*)G.iPR2d*dU>9M<a3M48+F?EcDe37)=<,^$^P5VDl>&ug@Y%HE1
%c7Z<`<su-qp,Y+dFY5<0M7(ct--@jID6[8cZ0b_1`XZZVm=ECu0ZD;%ZE#kKbd>`uZYdli?Z1k[WoJV1@h)IAD2Og2HQ<u0BB-0a
%(sqZ3_::!SlfNm#L'mKOmSG2s5E;B=g<I"'p1G2NHG/W%K4`hN"q;@)OH7)7lp3,BB-dei>'$@bCfB-Uh!<V*%,+[WcU"mu0"[J)
%::nMT>B;C'c+Y-&p>K<4Z6Ja`\(Y]RBPtMqQg=6+(98&MRFW@V1tr^'481coO2GbuL\W<P9%Yth)/mZdg'e\>4rWp)5s0[@F`1ET
%hh("^m5>.:Qm+Y@&3]<GE1l&:o,g@u-Vqj^BU_a*j!#TX^n62THUu*G;O9gr!D$A='CJe@QN6o)H)]&_X+Uc0.&shMT]!=cPr8*P
%]EN05:a.R^9D%sF9`a`2Eh?g<9s=.G*BnqBi>$6flOk3qYS:eh]E-WfOO4@]fDk]6J&)Q?I8[bpn&upDfGk.QT9#UQCF&e`a`qK\
%0r>4IrF/!EZpNI[UlN_qKh;J$q)Fs]9&:]CfH:]moPF(S*8/fYlKlk#jJ$CgA^nJQ@o"NSen,ogC4:(I-A+JmoZ.`N9"7Ac$#akD
%.<qIap?fG5/PoIRH^(8N"!*R;2"/(+i>sj&CsG25Fnj1pOn$6/&6]WGNGU\NqA!RLI9J)g?"iJ$FI)F//U*(4-=)6SVl3U4X96]M
%RiBcdAV7:aMWjkN:^5e^H0).6###g]lZ,'a#)q<r$<HB#I%,EsHCShOPeG>1YA/L1PbMe2#IGCjT[N+2g?dPZaQT%(rW-*jP-.0L
%k[hgL[3NNSk2h+;4G):0aN.rBO!0FET%MVpct1944bmj&D+8!cEBpQZ#+_mQV9Q0VNm-gNi?:]oCe`@n]aU='FsNH`/7"p%ggl`p
%o=kSS]KD*n+T+Cg-1n^UOm"f9o4p,pZ]5,kNB'gL[4P+ap,Xsi>7RideJs'pThO*J5=O5,1kgP_aksjb7-PIM:j@Gu(%mtVU:Q)Z
%q&A5(53YH<&cr72C?<XV=?*[="%lum[Qf[E/TcY#!Hl*>is;3TA&u0Jl!$f9"u'9W\81q%6/KbrO)1g*Y,Tg(EAnPd@tOuU6F%%P
%)MI`?+NblpCQ3;.5UK7e39X%-^*%M&WNqV-Ath'E#0fIj%9,qJ(DKG,l)1f5JCO(^E%Jgu%V)/_fQ*s>UU-<5gV3"(*!$p7FSU\I
%jJZU_#l<s10fPZf+db-gbG%RBW-K.FP49k:,;rXiVEV.(L]h-9L^7>f30'%e*mY6sJcTRTKi/Y"/g=f<(<SAS^EF+%^2?K(Mm$VC
%>"A#u*s7)T/TtjP7`V5T9n$3cEJgn66lr"Qi0`/ANksb!A?<OnbfgWVR<-GoX&R=Ug(7p6(A^-j:j*".9aURX0&[=ZbQU0V#$]'e
%`uuQAEB_riP:Y$te)#""+FPE]1HoX^pS]\&SM=6?5S$U>J0]:hJ2\lqN'SiIK"@=&1c'MGFosLQGP=+t`BJ4?HG9.%*-rQRL"Jdm
%_<AKX"$oC1/CK59:NUF9XFuP0KR7g-YU0B;KXiTN\01NXK-?5=L^4*/ACaKtfUC22?p(e+*nPBDnjrc^J%>gBhW&T+65YdZ+dN`.
%6G#2ZBse4]0W6htH.1tu/q/%l5hM+_<KP\XCR-p/g3D=Gn7b-UH"9WLZG4.ED#nS2%\RMZl,/mT+fR:-))@[SiqJ9n%i!,mp"Fr`
%*O>F3U"J54=,j,7+R;V&BL41?$F>KJk)B5[YdLS;gpH_DM]DEZqIH10S-EJ"oAVBq$VZ4JKSbW,a]Y#n!mB<VD;rlNZ%rg]_E8W2
%\WXaZSEKZU"[f&9E9)Prp`XgUU#6W;P!Pi5=PHZ7j66%cG)VsIba[=ah2$&X:dnh[BG!:Z'6lc5:aM-(Z/Vl?JiR5?NS0V;j2Ruf
%aAK9gOF!"pEt"Eq'V=X'%Bm%b\,=[D7;iD'\*nXV\T6:G=%I8(fu.,P((L(>Wr_nhTcbt0UO\*eO9HOq,TkB8PYl=+(.H#k.V]/V
%89t*:Fl3^j0<qQ0MEK0r/,HpGb`l?3j!cdG:0VV9d=L]9'n\\G'\V"_dsAgQ7VVCMNjAe*`^^?>I7T+gcVTF*p%U9jEj2R=GP79D
%NNB(8*kq_C]HQsdFk#XL&)eBE>d20b8F)h,V2C^"@`S>85!u#Y<;70tBtr]M.=[5$,S?,^b0\/bUq-.3FGtK@<HJ7R_tEDSi^-;W
%I\JfL$g=W[b^m(C63r6`bb\uMO*pV,I`V0.J1>$4#pngHmV!72C<i*$5&]&:GtND#+_`:9j#Nj5DfS0HUB)NS.g$fc[^7PQb*)!;
%]g3b)ot(Q`+S"!bZ3g&",f%XkpgG%E"P,_7RY=eE)dKN"V6)qoo_$C:b,D-9MdV0PFW!#Aj4.e::UQ(+R3tE(AN[X;Eemi%&72&/
%T@VYSAuFP3ij<j:?A0G5)\mc.gACDE0PcVMBXX'+>-0OCCpkd1G4'Kh*\W-]&5<*ZBSp+#9i3tf+:m[;-pUg?#0fg3Am66RW1S^>
%ct1Q<]aWWmgl04R`'C1W#:dtV`Qc]ANf=Me/gZIPP)FZi\PZXV(4?N>'[;_N\:-+iZ]T2Eck(\\Vch5a[nkq5Q"K"^g5C'+(Nh/h
%j17Pl2t1uUTE^WZDdb=6(""$(UQTo=a1II4c\1,DHdq]M4XPie]3U^),!q3R]-?$.].=1UTpaIeQVq]4f`m%n^5:2k.'JAeca,TE
%`3f%#H5H3BPiN+Ph>Rs/3@Q&hD914Bd+Q37h!W0tJ%rY^otZlQMb'35gSn"<K2V?QU<pF)S<3-%79a5nG&]h3#]76^I?E+A.\0p2
%N/0'h7r]<uoknk/E#6!pn^?;J>B,;\0iVq:-^gsF/6\1&I]4b07HPt?K$0rOJ_#p<g*Z=o<A$cKC#h["mJ%^Cf%*\AV/8c(eT]Q#
%JfmV+)`B`,9LDMc'JHgB)jIgeSGWDiN_G6q1W$-"?V2SD7QEX;[6dRY=g@P)=O8&-a6hfV>0L2(Mn!+o4k8hF(<0@Ub7[[:c?]gt
%==5^lM^n6+3n2U]7Db:D#N$je5cn#u%8;n;2!0#'#Uh(<.W%P]>)NRoI[R%75$\!]A]Fh:U0#j<cDp[?H+qqtM./K*9%8#<B!<=Q
%r(XA70&$j3lD<1?1q]f7ET`kB.eH.J_sHdQGK@X#qb`f9<im<GX]pL]0"gh!C3:#F9j7'HO[R"DekHqWL!n!OY8e;\P!Ta+6%g,/
%g",h2AAAJ/[4)HVD,#TjB9`fecK6RU5&)NYq_bHS\T_8s!Ni49F>eE22S8WC-rZ\[\E3TN!U=H#\cq=8eb-JD.Ei6QKShQYr;o:&
%+Q(G,^e2NUGDurX&`q6gGl4_#08(cj,IYmWY-tILB(N4>>RhN6gX`hTM`i^=9QfFuhF-'W[P@tfLhWB*GS>Xiii=dTr-/9iWbj]`
%pHo*7fEsj.15a<HI)!I%?oJ$MLN.qGPk56sEENVg'.8CTj9qo)H3(4/$Oi#GF+0CgJ_:6rTI'r!m%WX]"lfIl$!_ZD*bR9"A9TgF
%F>Rm/\EV;!mB9UKB,)AR/U?-2gZ:T,HCs:-M4R>d\;s_T8OI.S*rf.8R$GfYi&qk)AWj*sngee3eoP.kV>m(-qXTYlR14N"[<Cil
%Db<PXO'.uFcnF<H2ss?0b_<t<3;b0!'[VK'l6eQ?W#sq%j,iRU>X@57`qVOsKo36m/sSGI.>g,`&6L8!d]kh(1H_pAq+uu)Lt;?_
%pDO'&K2Yh<%ZgQrot/1(XM//aCeRGU4t_3uXXDa4=Iq0JPb_Bj@J#3tX!&^.&4KrBQ4qZ"+fp+hB<\_RUSrl;Kb(^u#\I70*L`DB
%i.Kml,l,q]]Re9@rZZ9tHTi"h/(kuiq#D)`>S_G#]n5-D<EePVXs3,Xb$2u/Yct'bF?6_Ba!_YMhFnIsY_;Y9Z:i6bD^88Z(G"/C
%@GM.4f.*fYIQh@`f/OA2f8ri?n+Q'[:`Ef?hF2;"e@<<EYZ91fr(A-HD#N*F#L<fbZUZ6,"j`hT`+BF*2U>ZLJf5m@/&rHOeJ8_1
%\AdK@ZREa"Nj<JB']B%Bg&q&FoeYf4j:Y]d/]?5M_:c%me8"nS+29A!+&3AQWL:n/h@t3uXJp.-H%9*WR*RA:5kSh:$]mj?&u88*
%h4-br.%4/%):/frj22S-/U;4&l1uFjI`7)+;5bliEEqCGjGfXoUBNCtF5-]/3U^>e`Xu4k26UaK4O./l'fEhj!Q'I7W?l\9I>@3N
%hb%SV,)O)6RO.Lk_=='WkSpnT"A<=#d;,]2`CXrUTT/<3Ya%\jV'N_Nb%iNKSFBc%nTmVrcNRbE2T.Y`j+fKWbO25e5V6SPn)Li6
%`iSmo>$OC=-N3,t,iq:.Md>2$Ut]9ZXd'dTZ^A"P(obrA(o@lMc*Y.a'sAHoCbHKNlBnGHbid)8;^pO%Emqm>9HRQ*.3A4LI3BK[
%@Msl]*HuZD)h^<MqM1QAoF0@#GGHAsZV:9V7[f6Ej)^[C)!u,Kk&6o+?'8ukriY8<&pRXNSkQ'fV_a3Biq]#km,0G!%_^?U>rWRE
%$3HZq.J)8O]IXAE=J8S32*r5cP^Ae#(LHe^HK4t:7`0'pOgV&:'Tm+o[EC>6pD`P(a&ib@TuQrt55p?;m2uB#?iKJ35Q:LtroW*f
%q=7<gs5W#:j6uKtJ+rKjS%U8=S`+T\mcRCY3?d`>fKMuZ7[Lq<hWY>BI12hYALK6lWJZHR&X2F/Hpo[HJG?dk&R9PVd/$sa)oS16
%Y]OUAgE@Plcn+!P&A-OQr7)FGLUT)[-DC"$9f>:m>_Z$':^8mnXO#[s)W"pB!o^W:k8IhgkYi:](ZV!ZJ/Xsupe2(te-$F:Z^]Bt
%SAf9\TG8iNN0aRg\Fnq*!],IBi<..+qjRnZ>:AG&MXQ;@7OQq8JiUVt3NNtn;k7ib<A$H(-#'lM]rJ8<:Y!_[))niJH\fBm`LmP#
%3Rpp8,s&8[!ucU,A2RuEQK68-P'/MN.;5Jf#bMpoqas$q7kq%KM+`r\4^4Zm2?o[GUMKRYThE+5(>&01W<R+1p5QAW$jqjqCrfm%
%S@pUSVVVW!6`/`p=,H_nedt8SK5_hTQeed#1'9.$8`h']P@P4=eNk&<+Gh?M81B7TDHX*h'rafA>85L?BOiRJ5E'gfj!$d!^i3a+
%1Bnd%5C+E0g_@4EpiRm1H)!9`i,kM<\bOZ%0e*cA\M5&mBgK7#^^'+LI".3G!fTl4,e[=?`io\/Z,L\ce]`gC;RhpF^htan&,J7M
%%OF4CbBXJ$%qZ.7igdq!)&bgf8*!"an1j.?odmF5'V]V6O[lKc'q?"q:"#pfWAZTBq.gq@1GELB'gF/`+F,d1LCgHpQ=9Kn_Yl,+
%e8tqq0dNdd2t@sPo@Rop0ligVS3B5od"nrn=4G&m*/Bh@#*p2M##>B22>BENK2@7h;uf(0p@"/"\sq,!`+gBg9IY9E&PRhVIu59V
%\#<=2I?]HR#/Lt-hO6sXa(-P>00_!5EAb^<BX`A_7iUcU1$N8j(OEIDU08;ec!iXNKFkrWY:YNPm$sLfn=2%g<LSVb_\['WfTA&X
%g?o-uAm8*s6.QC+h=&o[([sQHD6%YtP#H2s&4H?^R(`Z+c/.[36MN+]Qd./SBXgL=.QI3q%1b/AokVGik+s(_KY;mdC6rP+h=-+>
%9hZ[.Hg/gBO+pk<X$T'L4\%8YA)k/=He-8Wo>@hC8CD(,Zd<Uc6B=#?^@6T/*\Fk"<`R.re'=X,OuUX)BNndt2s'VJb1qiN3",,>
%0D&p&1HW8AB;%i=/ZMge@DeX'g%!%(F+U):\'+7(e8gk`U##3l*_-r_.FEX&RYIF_Wu>%e`"C^c"I,$3i+P*s(4/)kLbPLUO5_]I
%>Ahf_NM%N[01YItO-X!LX+Et#NqT:+\5rI6iD:WfonS60lD?BGm=m:dBO\u@rc@^F\4*g*$l/#C&=j3p[H6<aF62u1XEsLgc9f/)
%$iNh;LO-jp:'H8#K1oWV%=-K*Q3Hmn@P2k.LOAL<ZdQB,YJ[<J::6PSo0d$)CLOYeQ>hoQ'#+)TCmt.=*S3YG9;rUTD^G7s-QkWK
%$0lY#oc=&u8KG9.4rd#=lX&I=&DgZ"1h,2@4A`cKU53A%R`N-I5cOcZ6E3jlS^0p$^dYbZO%"\I!eN.he%Ffq0gQE]MmJd0,0WoG
%\4L]la>Jg@+B83cNo)H&?P]bl-pl;K+[$_Z!cB17Kjl-#j7kk;`k2`$lQpa'0,R6o+lI'"@u(T*_B0=5R^f:5QgYGU^\oA%8rDcV
%k44:6`-\?ph$JZ!WjVZi6kOq3M\*0P*q3Pr_S[:tX%&8<1@_"!I0%Clk"',]n7#-`c30pU`$efF&K]pX]28\r,2/.^H?;:\1o_!>
%a6Zo^b2.fc@.GL2UY?lbkX,5_'t5>bY=5jMKU=]']9*CG^9OrPibep?Q,jXN3\74>>c5Q=E=SRop*a-EVo)4'S@"cNn`@-X]miu3
%+;*EoOZY3G,mZK=HFG<V`e`9>QtOiePSOC#RW!Ut<RDS8kmEps`I%:.9PnUY?13@d_WY)]h[9TnDTq_WS])Jfe8*F]5j\97O)DW(
%f@]H6^ERDCM9ug,mB0Cj@OX-^<C4\Mh^rpY`^7_/lD-s9F?F\Bn<EQCD4;l*:MCe_(1g%J0>"Ft*!7q3eM[PA]@q'3?@2NNVE:0&
%$>_<`C^m@R"gr?8V]2_<`Q9(pN4(5[B)9^U0oXnTV-h0]f,O7Bs1]^@P)9e<j.@V^[d_NHoHHN$32a!RH\TV&'(=n:f'DBV7ERJM
%Kft.cW6gk^0UYu44ANT&WIn4RR@eU)j+='aaFkCTFe'p?0dCbLOK:#WaolY8FP0$pj,EZ[h:@^DG-t3'D7r%=cHbXiA4<AL?;<1)
%KR`Crp'8#%rMUUX%+CU?Wkm9573_OH'cjUg,!aJT*?8Z&e:a'fNAO`CJf$r"Ud6"-Hoo/2_^;6m_o8.9d$EG>+XD.MXb_;1;%Q&!
%<Y5q'WRUa\3e:I+]#k[,?:uKF15sDE9Yr7JhCuQbe([r8QfI-$6Am@o"=$m4pf%X/.FTQ5iM4U%;1/S+*bUas.MCf"3JO5'<RI!K
%S<3dq8/&fOjMpMkc,[hF9a8d0U_Uk]1CrUa+Yq/nNu>)n^2%[h2.kVeq(2)sK(VaD9&<aGI,"G#Mua%ZlaRStgDjU-U\d'98"=[P
%<,<*k+@9"XisI(f")0Ki)2:bK);\rgT@_BRHT/sZ;QPTA)\6ZV<Hb#cN#G3`#8jC22B4.+"/6R:&@!$ASJG?QI$+*L&Qf->+]7Sp
%c9'pEiDY8s'-P.6nfUK2c1a9@E4b.?76o@c;T7*4"P]r"QcZ?nVE)gD$:R'2ckbS,Al^)]C7K7&1f$YTj=#-_2r^#f3@\YPfW:o(
%:bL\6N>/IJDYJZ"KkWp@!`+.GWog,<hZ7%F:"DrjTN;3j8#*%25^\:ZEAPaEVMXV/'eZA7D-SDtclsHc^FEE0,SSrJL_L3gJFn@*
%9%7PVBo(j^Jmkg$!YKhfX!O'@,'+&\W07-n#e[t9C-kY*Hr0GTF$)pB7&Vk22=krf8r_Zejg5'9W>@^^i[dubKFYmu,O*Oak9OnO
%i=6]G*X%'>V9l]'d4:Bh(.2D9E^[(a+bm$M3Z3L!#>A-C6CZfMILASD2T4]r>\]OXc&fjBEAPbKJNE`cU?p<s`!%*ur*i6OEA>TC
%#\5$.,+3Cs"D,0fo&W]@]G%se&,_,S'W)sB`c<V;mR@I)R*DnU$J?B'B0r$pGmH(Ced"C<jMK_NR"ZLP[YR&IaC/7@L_Mhi#SU7b
%3$#;t"hl_Dnl]Eei="%:q7,\VBfGp/WEe@5cHY##3B10Zi1T6j#h4'T-76R$D]0WZAl]5a&<R]mU1-Z3c&)6om_=V]&#.j-Q$XD8
%(R$f^40_r\H(a2*YL?-]QZ/"S&jugVO"Tl1g8V`qn@=(f;\FN_<ug+rR#SL6VZ.m&2kSP(ZG5qQ&!.t-:.mt]Z4CmU5Yu('E\rdU
%D%stU(fXB9bBE4g*[h]u,/IqL#ML83LaG?EUI0$Y'KrBP`T;t><dg=sAb]@]cq?b;S@;c;O1rOk7Wqhg(pPlSF;De1p`Zt=9uRa7
%e0#3UR"gVKE31LUYVnY\&W)M"b(5^766%J%T5&)C/.c`Cgsm'a#[^4X>iGo958&ASX/EM4i2K@/1uYaiGr?@iI7'^IUNbf?[,?<M
%H3-RYQ_G;Ae;ARc0>h*C_c*5o*TLG!*[dk*L2,k=ckh\poGl9O6WigZV+HD>M/]Eu\s'5A(1a*"[mOaSMCc+FKMX?4#Oc:Q@MVij
%-C^+BHAO:(<FhU0$K>h.Joms-cI)Nk"O!el3mk_fM:I1u%r2mZeie/g%&--5:Z8EBo^3-1>?qFBg2RoHWugFKWD3Lp3T\,hCndaF
%r8>9IlFag-"U(/`hI8Ijd\2LeaTCtJlW8dU2E<lTcWBTbf;.^ADBXI8,2f\aLO^p:fN;NJ]HGf<!Z7pE1+9\P'>m(8=;F82(q*k8
%>9$;U1+RTIja'<.R^.^-+nLOo.G>-P-<F%,$CW!Hl1l=YpW>kSPKS*%EG3[fQ&[QTMCI]'BEc^8O!):^5_I2:+i;3\!XIHJ&2TD7
%i;RS>3HB*/@<@2b+HH'GdTmn#']hlH<>Ts9-oT.+KiQ)-Wc1Kp&P\q,F@p(B8/nL;SY-d.X9VX1`qgO)0:(3ih\goG:G<uSN1@T,
%e_I1VVq!%I,\uru"Ekrg=`\9<LKc=R&q;F$3/N$P./%mnra*Ub_(jh66S9.6T\ZOYnJ29]$R2Bj-+Re2[1Q:D4dIq"r'7:Xe>Lr7
%.LBP*q6Oln'otnoK",/46fC`]UD:3@d`0g_"qR]7#?,@hIotB`o^)p'1dYNBGm4L[_tFW8Ob$_5cgtse>-F)2Qno!^A%mEEPDUf!
%c4^Z#SYts@q7LNTHUR/orDpcfH3qihp)MZJ\2g#("+/>`o0d^UQqHM(\QQ$F'?bqgY`9XeP@,..N_,$#/YF6ST`aSQeC0!YnrUO>
%=q_=E%fJ"JeK`'?U*q6e<L'6K1V"gn!XN0-E@p:Va66Mh8DS(69S'LDl9uSbo7PFQUakIL$ikAr4tY]NK\JIA2m"/fCR0[1Y`KtW
%8Ta:?0',8'(fKLR(eR38Z6s?Ok2Cl5k97#\?O`e<88GlgXWKHGg%)/gi[E7E<*6''$Vh<3(AoB3ZYUcX`"9.MCbG&W,,Fb9,7!.[
%n83jp>l+!.%-J3e#;19gY-pL1;gIW-)pn9pGn-]T]U:E>U0Z*%V5U'!:-KJF'e:XMjDeh,k^DupR,qs(=f/4q-n)^%9\!dNOd%]7
%Nj2GB/l,O-.\mMtAB%p=F*:'gDGA$ecu\ap'*Z2gk-*?]g=Aq]NjTiRoL4dtU:XB%mL[CXXQ$aT@Pu^$regO"^qCBlE:);7RXI>S
%k(G^KO#s?1r/C1@l3$Nnc-[rQs1CFo.H)=2n#Z8MAF]^]&RbM!#6"6Aq2aFC,eJ7tM>itms#3gSDkd0e7/>.BjmNJM]Im0W!'q/+
%)2f8f7BT[;X@cnP^oO<58M>#W&%NU$1$IVodWO!Z+dmG%d?MS286N[ahQ72pP1tWb+id5!go<DZ6Vo3)'oSJKdNuiXnkfo3W(s8!
%,fV\4!rkRPE:-G<_!lCSFL+^r9P5[;C9@Jo'nr-V9]Q%Z;`>U]c+sP=g5Q"3KM:uBoEYYu&\l+lUJ+@HTa3^1_@$T9-hEu4C,eQJ
%7E:sTTccDZpLPMh`LF^2ih)8e;cTRVYsD:8HV8ufefuFo#7f,'k=dR+3R/#<,_;k_ES7baD'm6!$m?0k1iXeDS%o7O&dA5%!nNTi
%K9L]*,+m6\L[O)fQK_\)3%rAoS-CXe8=OP,?D>IID#eg()@(dt9sLd^?LMJ7*_Pfi[bpo1iLS=)+cB*j0a(WA8e>DO(adGrOt6B/
%NnoQ)HBH_ooT5j@j%e<7`H&ZuCD_CUkj#$,cPP@3pX/-=SJ3,3N.(E0OlORPX#P_=Z11.<I"un3"i:q^1hL</!nJ%lV-[:IN*pZ$
%!V[cA.f)8)croK.MFR@s-74+7X-Kak%p:%m8:?b5A-OU^6_D!*'Xo7:X)1h#G!'3U4OFLS0!1oTe<*G?Zt;YY)Juq]Tm"]s[is=L
%NYitWb)F!NkiVSrOp.0uA61OWRS2jJBFf35?B[FDa0>Ukq@kd5>e`K.]/%(k"<-(t<6.&=HF#^9-^^`9ee03TCNnj27qcp(UAd8a
%%)#aF/36E!?s/'V)eo!c8d$WG4E:Fuk#XJcm6$t8ljT[0ihITRph$ou^(kfRC53VGGD7-QiN@`O(h0YjkTm"I:SEVnHD&?Kh)YW\
%a#P"?.L_oEhW(>]3'\G-aCZXTj;;6kPDIZ%#?<j+]Ql+HM8m1bk.ROUR!>FkZuck^Ihe2$KF5kT3i;(m&:kQe+mkN;ENY#k3uE"V
%A94IK`Y_VVT'2^fZR#rAe<?L-We.B]`nj)8+HWI0A_(fcCs#+/SZ"IDGsr_n.r?:f0X`P?4`3dZq;-i(j8>cd"[[Ai8N1;6,pSL?
%lC):dW*T<0$jr>TM,:.+C`Qfr*\Hq)As(!9&;pH]>Md#gpG>/AL.OM#ZRM90nH!l&hOG.J0/!^1j)H;L(JL0s&pD+Li`j_4UX3Sg
%F@eOk4LUc3G1Xr!%Z$+tS'JD<giMgi2-Z).0N<JL&fHtTc02ib0n62LrAB0ra+Z;Hglc"9WAe)Z&@Mt=m@Os7;>$?V+laPK74.fB
%J2t(/!X@"C7[eoA!JZO8E84"uq4`G[S;.!K#SrP99/6c'I)q'Eed/0RD1quu4E,N?n=.Ap<L]*t,*,a1YnPmjfd.Mh'g?HCR1)`e
%iFO:<(sL-R+"(;g&SpakN5-o/B*O%GC^YLok5i,p'TA4]U$PRME+%W&!*(cgLbp&u+.1,:#\_/\2o2Dtde%R->G0,0#H3:W$1pt]
%#-k,'iD$)`/#mo7%3"'&^p>e'&9Wsm0EaQ*Ekki++^eAo"eKhao[tSH7m,)TeaA%d_8ku6r;@f2,;KP$a<WqQbY8IH"q#\TaU666
%HcQqH87]6SNFG]"KTJq`RH#nm5"/cJa.E,re@m"h,(6/$OGOX[AXn+@`k3ug*pJLS;haGnT]<kcb8Q2hGq9?&Fb&Q@_OS<\pTO*q
%7kS3o>b6%bP;tk]nBI['?@b[7-G%o3KU<U:/)%0-eg>0gq1F5Tn%>g'["4"Z]/[f09^la^1L>0D6uaU*i?>%-(g+aZ\":R$lKGX`
%mi@@l^cQsKc#f.7(]H.tW=qW`Vs;RN'mu_[f\ngt[[g1>Ar)@1!J4I/HYErK;Xd,"TF*5>!,H<>1Zjf%_FKmIZHDZo`JARlpRA)O
%pC>2)DG@1DL$>.m!siUIWf!QH,p1FL7=Ng50>tiA:__nX9Y7o&4B'cm,sDF9D_^C`QHA)/0Cf=M9fhKhFi)\jj0c.!hE.5lT!&Ui
%+37c'QRB/UG&FGhiC*@<:6D'gB1"A.$0'$0(qE%$&L8L??rr2ML^WY2VB*FcFbf]oOY/@alD]V?5+52_QsP_*(u]0d"]3m97Mq'i
%8I2#Erm5jlO.5^tWt&X5GEP8MGoM\M?OsBXN3[!>!Wth:V(E;h:hRkd+m/UEXM@eZaO[<Bo=toV,KcGMp]Ru3"cil:/Ge(SpE&g/
%\l84f75=ia?unqZPF*SfTQbWV(QYW&Of;"E=sW%]7B*:";g8sDQsEsnq\*B_Zn)BMUd]N7^]\4QM\dYVH-eB7&QQ#,:mjgMpT=-]
%6.9n@ImM_Ga5*]ms6:Y\d3962jGd9m9S)T_DsV0m,^,G#?,<'#C/Z.2A+)5mJOld]$"UcW.tHq!2J\T=6gI7VVfnB4&6AOemhE^Z
%?f]`<(.:NZik$+>U_/#"g'V]^qUt5p.VT!dmpX81m<$#]6jA16@!,2d:M<NT\2suCE5kCe-[NOYL[`%e;48i1$oRuBN:L'nWDZ8U
%':ZKjOpR:PKo%qQLj+4WT:heQSo2sA>A+([b=)E->cPlO.1!(3qIVpa['6GXrfQG%"k*hu4riSj:\fEmMrTWC-p7YVZA&mfX!Cr\
%Wk>BJI>V^!1/hfg@;DHl9U#.<@M)m#3+[.)3D0m*+;B),hi&&5Jkm\dOVOo>8&%T$$71q'8MUQ`DTsL_H",]rQb#I8$SS<P\B+N-
%f.HbJII9Uo;$N]39[g62Xa\?ZM<X,6J]phgk9I]9VC&Bj8s,C)P6oBI.;'-\EhQ[t>WrNH0TQkrb[;n-/cf9C,O\HLaH$[t;mLW>
%iMBKQl-1l_Lb_Sc5G3lurl-/=JE'mVK#+`E(-![>%0Vn]/VM++NNC<`mKS9h"j3>pI:Y@0'+>Q(=qn@2m67A-QO^Z2ARW/emAKQu
%YIm0V,Y=h+?=Z@%*sWfFRq.^!@#@]\f!"WYSb-3T(jE<MN)h@?=G2ZIZS2QHn2NN`?q(FL/j9U#KP?)`;`(_d`2$hiVnPIGmod4j
%U;"gaNnLV^MR$;&Z;:if^0.NE4qFk`M$]NfH@i_1(#3T2JS6k^5R:;JSQJ0Hc0R@7QM;$ggi%VMmBm=?I9"rNU*5AJW*Oc7.!Vh#
%`QT5gN,LZep`O='RggRt[bc6\84(-u4:EUOg[tq"SBFu`F=uJHj^+9)]Ud,W6b+aTD=-opfr=ILb+B]h%bZ3$\R:OEOl'7h&IpsO
%ejKW]74D=ai#71Ef;,N7lX?VK#9+8g9WfU:Is.EA76FJnF-0k#kFsK7DXb&Z^O9b`J!isPJ+q6H$HO]9qZ#VB&<0f!Y7aVHIB_qa
%U&ba37>@G&ItcKaU2ViIQ-NSIqQkE\1[jr7>snrL/V5!oU17@*p9mOg'3+"HU5-rI59[DIWcnU$KM/*sdR9^ZP#Ph?#_Hf=.f^8L
%WbrskIJP^oV)Fd9YF<lPiflZDV1LhTp'HP'M"!St3DL,VC(M8`r"GM.Z)G+`QDXVl)3r7".X50X1^%nYEQ/2%4qbC^b:kn-M?0=R
%`#OL_q$-QepS][ZnmDE1:uN^jo;-/6-P5_uQf%u4oSniTaq^5/"?G>+lo9k5i.S=`TL;1o-LMu8C;l:??(?UNm6eT&oGFI;&`"-1
%B4OM$5!:sTj&0&;$d4+laYAkXKW^1<o#2(NHYM7@>4_k["Un*)\A&2?)-qK2"VtQ?*]iCN_2I9`4:>=,?F&4)Wt)FH\5l<+(Nd$'
%Tdm=CHfjo[#c<aoBknd!A,(FM!&mgV7*[H%a2/XJ(hld8c9e-NC*iC"i"k,*^G&+Sn7H.XD-G>0+\HWEG`[WmZe:uS.jPG9XCOT=
%V=4Om$[oba\,Oi`1/2DEj<dn--(;Kp[7EE+ol;qsDbp^V5FVCGk^DP<'T;YNGXg=[n7RT63)'g-YRLZg*o.O5kZR0uQ,=BhqPA5Y
%ATasl[/KW15,s2.J$6'>=mCFs-,BeJcH<tF&BeW9R4k[K%g*ZhY`LL$[FEgNm@TBloAf@GcqrH$K;_5#Ms7OLT\hHHU"+H#DT-I6
%U3LokqHK`Td'pbpFe"fp%ipEH=RE-Ki,u`e1L>3oU$]lfaVi6C&t-"hS./UIa.c5KRDhlPB3/lUSDD%Lb@t!CMW0:*Xcd`j9?Aoe
%;0(Ba]A8FgeoAFEq>Hju@mT5E3BAu7-eTH7^ZWBbP[+303T)Ef7i&ZF1!a?:3Ih5QqYKDf?-**o)C:<nXouj9.``9ICDQORNtL(B
%$e6We6B@amRb-S&M1r;o&,XS`>5gY2fu77=)Mm4<"[-bDnPfR>gnN%uEctR"*ZuYKO9feFSs`n?(^"<@Z%FOIAP<9Wqdh)p^]`'b
%*gj*I<a[(,U'j+Re=`J'6-?B2#Aje"1j28%\r<S^>Xu,I$XI8Hl7e$"Qe1d)k5,uX*"X$PJ,]>tS$JKcb\@0KlF8/aPEB2^<NY4j
%7b9^"XH/LITYS4.N+7b3#i*_plS>uQQ=GNj&n8/'4SQB;^P(pW<s0d3OdQWY<m[T'G]RBqk@7:WJhC0h8YF*O-8_,nP:iX$c0(\e
%Sji[^M!Ji6066jO7a3oQ2+jN&Rf4XkYoakn%;50CEn*Ka[g.i?(YPj@15eM1QFg9>L8Lanp+<7f6&b2^hW6;G.<0HL?,^[%en`X_
%^fB1X`bU(=koo]FfPM*F3fLclUWt[B'm`Z7rI`(H^%(rSl"W'p=)cDgPMlS8KI=nN?(G"=q?5D^Tjoi)MC]],G=`r)`GlECE))-S
%S.+Q#W!6gN(:*\<i\kmR`^3`/=)khkYPinDAA#a9R.1M,h&CPFR?A!h*B'jI"NhBLM*=;7JEL4;n!3^U0SB9!-cRr!%<_6#*Gu']
%CNQC[*Kl"D35n!]$2#'.B*mHLk278#h!*Y@D`E>Rjd@00&F-u$rZ_U<2Mqp^L%"=pC3P)_G2O!RMAC/p4mu#Ap2CfZ(m""4cSq>r
%>.&ogNs>#EV(6\t0CJPAh3W6JbO5'_`k!>u[ssItCg7T'G=MtB1'(_M_3)EJggE8[K>f>_kO*:0\q1jGi:"UZ[ZaHl/8$-aiJ'N>
%E+LLLbA&@%58&:iBpALi+g<]EiL1A*rl<c6^YO)h&@UBn"dPf(n,"cpbKnEYh^q\6PP?(tNC.RhHboQ)TV)L+.WNN]_(iMkmEOt)
%gc(/A<IohCL2]%USAdiUS+m:N96f<Zqqd)-&e!ZjhTc?4(3/6qm/k!+3*.OdGKEGL*tj#d"dM=hb]OG*SR`$P*FYO9V.@+cpRB&.
%O(pV>p31a(\5XnEnkf#SVD7_h/?ci48@kPGJ%[qu"K7ZO6l"tX]\Z=;#hHa?.S_:/f`k0h+"-?cTIDR_$Z[*5^MH.VW[FI2;OpVu
%$?<;Y-S"WT!Zp("PR&V[V"K79#A!^_iCQ:D5]R2u76`AHP&Wk(Rb+gLQ?B36](=M3pB@6rEbbcdUF6T4r[0]=*Y1m\j7,W.Mi3/k
%]Q4(qM+;SOTI7k8UTi/rj<S^FhGk5mT0SM^nW/jP+HSa:.'ejfZ%8_?7O:T2"K6RKp#ah9!oV\RW;ajuPDlY'rH[jPr?\tUdHIhj
%<$K4&o_#P^I+E'mWm^PO@8uN]pKHofLZ4qTJ^"Q[LAMQ#Y)>Dt!Ml#ID;$3Z/Z`JloZ&AA;V34F04XDU$,$o!*HcAH80A7q1+q@F
%3ejUW3DAR=;iSK+Fol>*)"bN3+EV%C+CZsD@tUtME2sP8A_c8%#sN^_`ea40rG\d4,09=!L:ak3f6C2oe0:62ifVh!-5f^+6a^b[
%OYWA=jRjR^l=!^`5C2EQ-;Hb%aXG@Q[>memE`(BL]6rA&A5%bad?@=1@eGfe"Mq8%m=;@!4@oT/F:kWHd2+5D7+,C[6W#TpiH<`;
%rK\_gJ!N\P5paO%Ie]K@H[.[kUBQF&+I.&M(tB0COPk79]N=[g:B"[-Q6t?;XTsW:E#oU.i_U,'e!\a=Hme,iJb(YCMq7PQX=..#
%ZO4e0*XPT)>?M-@k\WRXls'Qc*tU1omt3m$cfKeL0VAEih<A+o0G]9"YKU$H,f*m$/gWtS!3rF]GAt,..*1Eg:Hrkj7jcO4_l=kR
%;-mHlTu*<]8AcCBNWOuK,'&1Rc^dJoh@/D5eVkTYWh=Qm\H_P04d0f79e/4-Ru;Da<=)X:d)RQkk*!>-A6I;[R1s"d]f;JYB`9d5
%Qtt!tW4(Xgip3L:/26u*]k[e]%mEF@VT?XoOZ+Itn5<EO.iM?0^"+FS\BnYhRQJ&'Vrq,q<bH;O>[AHAeDR"g?Mjdnm<D=epsN`-
%UB:\nn`d!)p+4X!DkKPP3B?@54(`C+*q/9d:2T=FdcZa5jG0pW86Sr\]HB7sU3.?3U;!(\SJ[3Xfi;ulN3-DH30G5>d*)eQVC%Df
%M.kkWd)gl?0b0!b:lsj2BI6J3W!JGS4ek>O-C[l&4qBRnjfI'b1J'4\?!N4G<E\I\@CrbcV=KupV0OD^H0srWh^H6HGm0<Y#77B5
%8m,ZGn64uNjlqfQjFIZH.N"@/QqXe[.&<]87]'`>M?e%]HXoqk\[*Cm3,ICuXgYC+U^Iq[SpKWVPZ=S(_"&Z7gF'7&##&6mH&N_!
%b7K@<4So\$q?,$hr:/Lm[gqM"+[o;KXL9J:5PV6d-u*-\E9(U`,kr/&9]q/+P'20!Ek8bdk_W@*6>'%6S1Ta>#a:W9;.,d[MNq_T
%5?a;b>/rJPklt.IGCWE7J3O)"@TgSECpH8tCfBFF6FA&]\'6!Eoc#t`=rsCjM<*tTWjU,BY,:N(4mp>Z^$5tX"f/_*jE>;0RTg?n
%bgD=krhi;f?0t-F+NYVkQ]C3/5jGE;agWDiVBHJ>:(a)Q8l2lrOn5/9XLJ`OLI3IBF(KQaYP8:O'#!aTr&cnUddCX!URV_;(UPO5
%H-84*gkW3hao%",:mTV.g]s9/F+WClUbt6p$[`tua5%lPGE-X`FKZ_l=Y0qZ"'s:4%o@RkpTLFYO>`/)S;iq7'j5;'kY7YAW!^Tp
%2EJ$'VW$aTqp)]%b[lmIU_t+1JD&C$Um*g:4qBO,QHDD,8lF/eO:[8a[Xc1[TVRuAd;4qaBU4=#Z$Rr\i.R(0eJK2CJ]SIWS2rU(
%osc$[2a;hC/%MVe9LffNP]]]l*t)so!"pB)KWG4-jrin<7?E9@64[#CNB>f]k:9_EhF.#^$(qHW@*7QOjTB_F1*@*Cd:Z6VF9Gpt
%.I*:`<:!4S1,_2)*($1(f_,%)lDi6na\YE3V0a?3>(p^L4`jP,/o![%5)]PWZ^!_kJ(tIaj)u!k0C1Ig]gm5gIAI"F(Kca.PfR.u
%@o+6pLV0UNG)Y`7eFdhgNYV)]^jIV)'NJ6^.3t?N1jK+p0-deF&5qr%Y;uA(lV;QE3k:r2I0O3s$l.nY,DLlWN`SY95*m_a;K+[@
%73eQUlaiU*&=T;NA-47p/+JG$\J_Tkm3o\SgdMk5dO^i?:QHp'dkHHs1W^c(CRmDG\cM<sa8kqG(oOa9l]97pS2r^6+L5pI<iq0o
%@l+8=!>5\PdYA5YFN7>8S`gc3\i8SH>pXE(<362i1J+BJBr^D3S3/:g]PG+=ZFVhhh!#5YmQq=JN4Ltgiko]Sl>\n;D\dM8F694;
%5"U'SD4oETJi8L5aFZ$+.n_@4#`TTf$6e6'ML.n+<g'+Ia]a7A3?!FBkEL//CXoQI#QU+-oTPZ3F@s.QWmWLimM_.V2HeNh8M*Lt
%%X<o927aHoKtFS-?!CtV[oRZ,X$!;t!QW%JeFZU/b?r<UEAr\lQZ\R-Hr7UFE0&/Q)J"sc#EstT-Mn/JWD*&E$_888=V??_;--1C
%AU'if.@Q^SY9P$8JBX@o,U5cLL)A7<Yt\)>Jm)CjI1:fVch9=f]ZO\TkumhnVT3)^aYP5KN@K'TaNO/5agap,.>dj3hK6nq?6f04
%b@j%Va70%jY#?6`,V<eG9"M:jX43TWp=%+SM*^hX>G^`-M$W*PE!a+]^g<=97qG_5'/-3o<B\pD$?3U&'[#blfG.B6>u6f.?2%n5
%#t1Sb9A-;U1).Mj;<O?)O&45(%oF]-^-I,1;q*[i*FOs%qT@K5+j_&*B!`VgA,(LU=0k(qKCE?m\gGV-b+g]p_3!Fl;p?^c=]\#r
%iB9E,4"QRW#`ADD.I5(*::0=3I.=N$nA$W+'/]d(O)8020BeXB?$6ZpdMP2J&]>eg,bm.ASaHXASb;:YgYtPj>Be`dW>:XHO\\AY
%Q^jF3ScN2RlZ"k<mh^-+4,5YS9fNfB<`u8T854,]%8h:LP6?Q'FfP?KaS0h6c-q,mQhi/qZCFd>[u`+Ve6N?@gF?:W+KmiiWodBm
%6)Uq#Kakr_U?IGnabi+"fuXsenUZm#D!MFtK8SmLlFOh.hGcme3:_#&EmRD(hM_0@%+jN_&Do,+;YI\5*0O`(=]a[Q;oN#FZCluQ
%K-*@#:2-&QDN<r']#Bh;:!h[m[**0$ROBO'd_<<'&7Uf<m'qDecBb];YnqLS45H<dUe\(tfgSnM3g,e-g=<:):>^A'OLH/?2:f.;
%Yt]oW<5p?<fQ$T7]bSB;H8AlggJN@-)o[k@Us[!E`;g"+ds2>`OW[D@C#'FQ8Y5`G>Z?R"kN(e23_h`N:g</<=(W4jcS5MtRZ23X
%GS6oejXt#CS%O#$<jJh#"U/2u)a'%,J$Y7ZR?+u1Vm`$Gmfn11/U]OHO1f@&YA"M_Y3OVEe"2,sfXEfOkd+8-!dEA5.P=Ng[677G
%Z3jA^?`OQJ?"XP7\?[nZb-Jrjb'ecOR=bo$:#>X;^sfla:K#lL90oUfLVY:7/[K%$g$YN>Q&VBs^9udh]:F@g8cS0g/H>Vl,uK*4
%iouS[[[A7HH5bsieaVBkXQ;R)s"dWs-TZ/#G_(*EQfSg!N&RIC&8C?il+J&*Bu!7aMRm<!n*a+XJBc./_ZjQT)9AHfKJ>>=ZrXj6
%OD`>5B]n@U]a6X0r,U9kcIF3$@>b!Y0E2+1*//if'?oB`@X-][NIdSG,a,/$BgG/?.`nLfnaqc6`->Rb[hb.V1]F"DdkKh!*7i)Z
%ZU!ZA_'S9*(*lU$;ka/ea9akT0p*_3,`@$fb6JLte5I_S9'a!K*oA1'9!:FI$4Ja1!Ya9S=.:r)O?MZ@?@=V.1^Cf_3`(ml\NDI[
%Dd)b]ig/Q=_s'\V\*c,`(1`$QJ56P>?VquX5JIBHkNKc"\^9PH@Od!4"uEO;?Z4;UCVIPRcg'GV&i_gX$$;Sa^C`Jl8Hgufk5d>p
%)OIQ$r"e([+*D.b4-ur]4).B!]iXZ`Do)DF;,P.ST=F7T;C?]g2&9VQ\aV$?*o*At^2UJT=_$ZMo[4O!4JR0(4tTmQ81Ap+k50MT
%'O\OBr<\>FCtBGIF:FA^<IucF0CD+&q,%qBGE&9MF\V@NJ9XEo<R#o?$gu@@n.tJP9Dfl60ZbRVJ)g$;L:/>\Mn[%AHs.)l_h3]k
%cEH[joC4n&B8/*X]T0*d^OFVBgOAM8DaF!j4'cIVJCo`D)i]Z$7mA:ulNU)\p?/pCg#u5],<CV3qXYqBhDJ^^%uBj%2/DQeS+d#j
%5/.9I<VEj-"05[Bl357NNY#9J=*1DZoQd+NR1\L3?l*biRdY`[;[-OG<H3Z?f'i%YZVLe5K<e.[7nj<YS2[\KjM$CTe8AAYYI/8p
%1iRpsTKg7qju6o^?H9&.>lM^?/JR!3X(hOa:\o?$,4"i)d#?$f^,IM'S(s6JlcDagKmU8"lUZcq8M;mIkCLL@3!G;@>UA1#VM%1H
%00!?:-bs?1pfTSALT[0ASb3ihBu,["`=*hohqt3+J3P%R^cWVM]t@"0i)(L=AB)UV;Xc't0&SnWR;m/f[!I#g2g%h%!#H2bdH?AG
%RFJEn&@7%:FI2KPFnpM;W<0%)@ePsV\`e)jJtIX*HCsEm5\"'1VCCIF2'onJi,<B.qJ#7Flnu:"q,Y'&V00l./=T2X5CV/sb<PUL
%%;)&pabh`f1nQV7+:dXWFI)F//baRXIe+1]GWcn>)I+5M>QYT("0oPTk5cdKKjG86p\3l(i"%Jn\:6DjUfO';RA5`)1oT6!]7bO\
%Pb=N8KpKXbhj<"^Rg7'<ItO1)AkKR'hnF_\CAdpBlU$52EBBL.SNrnhA:"R;pZ*.F6)J@.#CY$.pao/$jEoDCQ()fDd2dm@7*0ak
%Fq>LR/&Q`#%^>0R/[g=ZoG`.ur64LN<)g$Ca2H1s0jih5kPk:9g$^NONS(XHh_YS<k3;Eg"33-3;(s%j5PP+-i?$f$r8BdqKY?oH
%&nR7BW6Bpe,WjcEo0e^e>9%Kr$2<X9i@Tp2=ejo>HjhgE062s5+B`dsW%HsLIJ5G5C?-4+D20"&R(9VP%['9TJD(Y(d:8RDO.Tng
%\n<@[dLo^A,)sc#A-Sl13-7'H(!l*N+pJWaa_!)mgq+o>[k!F,6C*6JGKe.KG*7N<*SY'qZnCttJQWVLMn<K7gE*,$)9^RGmYa2=
%_Z%uGQBDrF22kJR/"9?]_f"F;+Q"XN`b.OS7`q)-oL5->H]`j/q8:^%HdeWpk:HbQnI0OrW97*eCt/MeEq/"s7:uo3aquTRH3BJ<
%d-kM(dK`,#F*>^!`%Y(#\)F2iR,97,R3[YVk/l'V0HcT^1`7-/S4iuHQ$iS@R?p.a8(03hKmV:b(#1N9VIRch/N=ItK'?C!j=p\5
%55+9$C52B?^"L6sqQE%M+Cem):eZlM`rm!-b+I*(<NjAOSOQC&#<7OTi>db4"VOioOG"CrRNf\92S)b2X%d;&LG%U&a&jBm!%:96
%Y(4V$E>S_=\966+`EJMY'Li/-Z,GH5OhH]YCDo8S&P<$)f\i22kV.UIh:(:@21Rl.k@)Kl=sJ65.7kLOEZYI)SneWR6@#p<J]!MA
%pU#5Ac,>@fp-t6T#5RoHj)EabCGR62n;%)+LU=UjU(-:9-<X=U]NEWNF[gmB1A\mOEE[?[oa8t'>*?68!2IoQ-&0_2'F2th<C)Q'
%=MZ5Ce9qGaRJa3@SbXTk@8)V,/FhmbmN@[Q)_:*m6P*`X5XhJ%[M,73(]ul*?ABH(#*DOf_ZqPJ*U5,tFJ*\@,H3M*Gqp^Ea`.pD
%iT\OLYrMAR"Q+9oLB3_taNl*Pe6PtneZkeR;7/lMn=R`t,>*Qub7\J=Ps,iN/Y7k]O_-mCNh%W10N"KY\EV0q7lmH>.$'Yh*JATS
%=k[8F*F6Z8?e"&[H8l#OWYf`g,mP)ADln**Pt4Z,N:!a!cB6/M.2n<=#i7aSFTh(q\,m[1H%JAr8F@(]SAJJb'U7"U1?DIZWB^Y8
%YnU9GUsNR!D#\bIb-,Ve4(JDWd=XrL%WmmsFVlJb`t[D!1l,dLOh46Y5(j=dShj,sl2C\U_GrlXhScr.ZK/u6G!R=/5$'/:7L=&9
%g0@WF0F`uP<EbNY7VEu1(?[DIP9Q@-r!M%5U@Gb,aZ?3K'LY(4SJZ%j.!lhMSsL>::32jsXtJ$57Z#HFaHo8gh"gH=@qHKA'dloo
%2nL:!T50lWBH6l3Lp+VEZtM<!PSA#2!/TRo`kfe\<=kS]A@Z'Yo4qObNX:lS%NpA6FE'CGN[ZF$;2$q:NN3JQY'Od@Fe29($p1*Q
%K!FnK(7at]ZHERaOXgRs_Qj3WK<30'Yq(LeKBfpb$?=mJ*k3(Z/Z[rf)>[:^M98[&]QE:;\@SAH$%WokNHN#]UkKVlBoIk,\9L5h
%3E[#V@Z<gud=_n2b7bmT].>Aoe/]FHMZ>>>,/0.J!E<,q;Y^L+3\d(hfh.`YFTS[3<lArLTD5t?gf8$ukU8*Tq,OQaL1''hrUip[
%/u%E.;tmAP#?TI>E[o4jk4JlqOlFn?s'"Z.<gouA6JmMsA_[EVJsP2/4<fo*P9LoZR#>oK0engGG2NgsB<$WF]7;drpFMpmJs/p4
%*<);]r9>%V/g/OH-*s>Z6#Y8ILXiZrb18akR,n*4_]Q/M@c\2&*Bm(/F^u(N6j:FF:f3'9"R+bESd=EhQ!hf@8[9<sSUZp+5"-W]
%"^:!h%`WIdU4@P&C8$;3[IrRW2r>VF`./ZmIl9gb&$G=EJ[hIt8-.dOrsKsL-m)'fk2JN"6KLcB[RHh?SLp/LVT@sB7>GcS/<*bN
%W%$5tK[716\]?(nB>d/GeuKs=0!b$M`^u\Za%k%,R=Y_?LInp>eRq.h;_*7[cF66a:o$@+pcUnL5JFe8IOV,P8;lEgYHmAEGKM'd
%engoJ3$bEaqOo[/\aTYfV.;!nD\rmdb(5G[%:m?@7H;/`,pk%V]is%t0eX11MAEa--V%2g>$s\f4Dh"B-kD8lP-^iT\CaMg^,b,u
%(WVc<mpP;VU",,29hi`jHrW[28,&,V5/K%1F)GS5jsILke@EVrY)#^p84UgK1oZ1FHVNaIGi<@aQ@^?IlN3()USA+iD5uIJaT^7k
%*gi2C)(dXp7hnG^!l?B6&;[VUDS#FV;)2\4R()o4U>ucaHO,HND+(B]M3nf]YL;4'),(HY/m7.G_/EW&.]9%(NNnfrLjM-T#ZZXi
%-jc!cE@Ak,0F<^f$QYAUP67l$;"Buj.a")8G.X=Y?o=$i<]lQ'4937;N:oZjn^<tHYO;\?IJiG=A:4[qJW#R!dMFmbE/&55N`cC\
%=e,X3P.p53^4f#fatr*V=)Xa,q97e!h$mWS3s'*WLIrBk-tTB3H._`<"*:E`X&alAoB:&8h$4XlZlhqc^0>LNj/+Wi?JY+B$Y.K]
%-!*%Hie5Pc!A_(.KMfH=G;f`(9\gN7cB9?G$<&V)"t>s?T^[J0Zj>,.aX*W=1m/PcPoa%ZW2GJm!F_e/lY$oF'f^$i'+nkjW7Uu+
%<5$NRRmF=a@f\F2dWtQKRfa.SBIo)@*J`_eXmNWS+S!.b%kruEf(IRFG*[F+FTTSVgI'ep0r3+ULRiWS>"p3D09t:`&^c7U!kp&h
%@TVDL+/6o?#V-rn%h>QbR6#ES78CDZ4=Ha?&/6S$J)#//RtFGd6Ejeqr5"DgeM>4j#;CnJHi]-p[!%C)*H"tQ:V7;dVQk`,9bj"N
%=u=pj64FAaX@`C4!p?Seq#Vj]G2_mG\<`Z?!d3tCJJaZ)d,7e1q@p:QTcI7-=&BHE,o0rg*h#,D>WL@;W(/.7ruSS=3Dc]4ED6@F
%&DeKKR>Ga0$9)G/oESgl7:N.Gk<l3^VS6>mKiW[]C0M1"o7"UrSZ(r%JP&q-&%4u\C(Q]gZTh8=I12JA0O]l(VO*e\ku\&n[/.++
%gN$t9rAnX#[(W`;eC+Kl<RVeVnG0ZH+;-P5SEWZkD=''c%?tWO*HbItojso,fp!9B]%/cSHZPiX's295BM\r_<k>HA%Z5pg?#.(V
%e7365=+H+2Puq_mB;;?c0Qj2j$"j$C0ie@Kj_.gQ5"D.*ARZL0jfUom+s&lh66MFfU8F[q$dF\Ke2B@<f]+Fa$u.kFTMed?%H7p#
%#Scn/.Kgsd0"J"oJ4V]\6O3ZArX],Y[/.,VUZJ/M8bl;,9)%MNb^Xc8TZ7U7E',/g`s&j!?9X+-*cN6%U#EXRr:e%?T"[gmi5K*<
%g^,3M<b]sh%MKEi:$SXr@000L@T8g,'Bj_,=(-6=i#?QOotrgai3"otG5X*)'B&!_C7>ttL^'&`qDd:WTPrq:pf5,A\lZ:4dp6E+
%LV(JoXjoXgfhaTb/S]\7(:nnp1'eC:YF>:h_#BOfRcB_f!1;_Z3B!H/.Du(A*a3K=EA8Hr)/!?'9>"$BoTnu6E/OCJ-hT[1QQR3b
%=:Z"(9PrpCgn$8g`u&:T`a'c(E&?4`q"h0U6kRQd0E/so,4aQR0<E/r,(^M+meuE%JHZtj9En%#M+EfJUfuc"QCu3!/lgA'JemD1
%FSUW)W)M`GFd@gq=/kb13_Ml2`(_]C`E=BC@A5X)&eQ[f[9f@L?>!\,9Di`1cj1!;Ui$df=X$0?CMKtYc4YqUNT.4IS0bB>CK6FN
%jXe5b])3ftfs'#Z/q+F`K`9[d8jmp*F4dUi"OJQ<4rkpn\@D>M\Juo%47[R,`/hq57)URt[GJJf@+&V[DKgpljh4s5,nc^jGT3sF
%'&j>U5)cs=!mr:8Z'Vp&dXeG&IX=^5C_pE?XLglPqF/TjEgK=A0[&bG,46)II<iJH;*%8g@f78j(/Ijrqt+sf5Y^;4FE<9!31>Tu
%l/oc`0W,s#ioUel$]&OL(I*ZU<DkdsILZt.c<S6;cN2'oj!pX\%M7$N1hA[.]QWF=\1kafRWQ?2^I,rXqWTRer>d#?@StI2jmS:3
%qC_+&O@ZbC5E*>Z(,9OrQG3NCdYh%]nTVdSQ5kY1h]Y:BlP`G-mtLk=.,Gd*n*o%t2_N=ZMeZ.NK]T*cNoM>*!j/'ra!ms^_=CN\
%9JP-`:-XG'`O^F65D=p3A)d8@r=f5l=bOdj+bJ7!CY1Zt!0(7'b>BGB:oh_A+H?f4rV9Hr9coOYfQ(&D$7#gBl`W"hd#*,r/:WB+
%21Fo]=,:g<A-pFf+gFm#?QC.&&t2nPQ",(j?sT\l0<>Wk=EmTL^iW\/P1&PYYoFNc]CX&(l!`LHQ\+=4&A`#"4_#KA3)i2gc-+KW
%6E2sj?WiBn&`dBMcd^?m<#Fk0q\]gXAQa]@cX>s0\8-&/D*J,qV/[A+56D&BaQ)FR1O/<1YA\,EggKokBtXs"%!5gH23t]P)Am*"
%2g%"q)IP!M2qr@2M"lOn\`2ghJ/'V?)9^\U65QZeLU!?YYc-Zh@%@`>?HSg"Q&)c_pgK0Ar%Pen?@2:XQ&/_IMjd=UGmVEcIonW1
%k_>h.)`IdKO\iQFNLKpjmG\pCr<.?Q'`sK]-NH]of8Z98&<7S.U>&BBW;+P00**3"nUG@.JXbN/h+Q\Hf-Y0"-#8q='nG:K,]C9a
%'u2P#`9Y87$:H<716BLW+<kX3W]?Q_!YLrX7BP)!.hH.\SdkqI=(!S'+0t$P?bQS=P7SR<!SiXP)/]0V]QWItM\GWSZF%'"+-Z&(
%b,T%4LZ"(cZVaF15F.+l/6^fHO/N'K,+fX"`X,1ZT5!7sNkngTMmcganGkEupY3Oq[&0e(`+ou-W[-KK[.)spjm<i_+((FTlg/@A
%??UdVX@0rC6U/%)TAC)G5Ha^j:#"AYoL$$LostS1;#/Yo2\#`<!KqNQ)Z'8_d+"as)>\>B-@J/k4+@BoE_n9pf_Jmdo>[%5_!It*
%$.D(&XtI5bkVL5ccZ:PsVAZY9I3-/*X_JrTI@_`UcECrS#NV=\-@6^e!<X&4r)W1UdO$[eDu2Y'='KES`\*Ln5e%N+IK$**Dn"'m
%q!,fP=]W`3[*iH'A'aFh0Wjsa1G<Ye`_;HNHI7G*SXu<X1=f/]4VkNuAXVsr,S]?`AF/s:VQ)1)dnW^+.T)M4SR)kCVSDB?q\CP]
%UW_Xt;>Y\36d_0l(h6pnbXXGV=o3LR:4e<5q`<(Y61naBf)]S89Js#KRMqNrO.+\JU_9a)9hb.>)_+Is[')tt(!iSJIJp$)D`=p#
%nD_B((2kU2B#ihi:?h=G1OJbi:rsf7R@PSZoFZ.Jf`?9@AOd\$[]VU#:D5fKF6K%sDjo>+S1(t!0sLgtimBMUm!u['k%S;>l,m8!
%5>3>UQ[Pd2c]!R*UPG+tR2TCJQO>s8QPNTEiY\@/Xkf6h$0U>_<J%J1\U#0Z!4I9BRUG4_bX#q-YgBgb0(cAH1=a4khRq7RH>-56
%/0aVi5HM-L%9>.<l.Aop?2=Z<]R8A$@E7n1[_4/qd'd75e=+;51Yf#1'X^EF!u60Qj-uZX&Db'I41c_gMt&Pc5`8P3YHK+U;`X-I
%d'EIaoJ!q0TJU"mIN(EYZ5-G].2^Ofd3-c5nB5RAHug+95JW]@A:9F_ET&bO>%jC9(O?oKnS/tL%%@Vf9X5F6CFP[Km9Dp>Lco$E
%)\,[,gh!mM52D7@%8:m\N_1k09sP/7/PgW<F]ZKP7W!Vb<2rQ`Zoj!BXEVBcK`RgiqfT=:[65P*O^K(eKY[tsmVLB24<rJ0<>ZS&
%G3;,eWf5!b6Q"b3e[;G3^q4IJLT:DJX@cH(5-JA%4f7Cm<e!#B>@-7OGMP@h[.a(B'B%DIrj,0%SprPHJ,_ars83u<mf.\6m_Ac#
%:I"e7JA:qfJ+pFes53kK]DqHBhuDpos5ItsiHKeNrQ"C+mdG,gs8N$>s7GijJ,9+.r8Z]7l1Z;"n:1E8rrWBGXUkErYPuH>nj!*7
%?i7\(dq\j~>
%AI9_PrivateDataEnd
